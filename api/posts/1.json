{"total":6,"pageSize":10,"pageCount":1,"data":[{"title":"Java 泛型 T，E，K，V，?，傻傻分不清？","slug":"Java-泛型-T，E，K，V，-，傻傻分不清？","date":"2023-12-24T11:56:56.000Z","updated":"2023-12-24T11:56:56.000Z","comments":true,"pin":null,"path":"api/articles/Java-泛型-T，E，K，V，-，傻傻分不清？.json","excerpt":"","keywords":null,"cover":"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224195911158.png","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型。</p>\n<p>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p>\n<h2 id=\"泛型带来的好处\"><a href=\"#泛型带来的好处\" class=\"headerlink\" title=\"泛型带来的好处\"></a><strong>泛型带来的好处</strong></h2><p>在没有泛型的情况的下，通过对类型 Object 的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是本身就是一个安全隐患。</p>\n<p>那么泛型的好处就是在编译的时候能够检查类型安全，并且所有的强制转换都是自动和隐式的。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlmapperGeneric</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> T t;    </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(T t)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.t = t; </span><br><span class=\"line\">  &#125;    </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> T <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t; </span><br><span class=\"line\">  &#125;      </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do nothing    </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 不指定类型</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">noSpecifyType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">GlmapperGeneric</span> <span class=\"variable\">glmapperGeneric</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GlmapperGeneric</span>();    </span><br><span class=\"line\">    glmapperGeneric.set(<span class=\"string\">&quot;test&quot;</span>);    </span><br><span class=\"line\">    <span class=\"comment\">// 需要强制类型转换    </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> (String) glmapperGeneric.get();    </span><br><span class=\"line\">    System.out.println(test);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 指定类型    </span></span><br><span class=\"line\"><span class=\"comment\">  */</span>  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">specifyType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    GlmapperGeneric&lt;String&gt; glmapperGeneric = <span class=\"keyword\">new</span> <span class=\"title class_\">GlmapperGeneric</span>();    </span><br><span class=\"line\">    glmapperGeneric.set(<span class=\"string\">&quot;test&quot;</span>);    </span><br><span class=\"line\">    <span class=\"comment\">// 不需要强制类型转换    </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> glmapperGeneric.get();</span><br><span class=\"line\">    System.out.println(test);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>上面这段代码中的 specifyType 方法中 省去了强制转换，可以在编译时候检查类型安全，可以用在类，方法，接口上。</p>\n<h2 id=\"泛型中通配符\"><a href=\"#泛型中通配符\" class=\"headerlink\" title=\"泛型中通配符\"></a><strong>泛型中通配符</strong></h2><p>我们在定义泛型类，泛型方法，泛型接口的时候经常会碰见很多不同的通配符，比如 T，E，K，V 等等，这些通配符又都是什么意思呢？</p>\n<h3 id=\"常用的-T，E，K，V，？\"><a href=\"#常用的-T，E，K，V，？\" class=\"headerlink\" title=\"常用的 T，E，K，V，？\"></a>常用的 T，E，K，V，？</h3><p>本质上这些个都是通配符，没啥区别，只不过是编码时的一种约定俗成的东西。比如上述代码中的 T ，我们可以换成 A-Z 之间的任何一个 字母都可以，并不会影响程序的正常运行，但是如果换成其他的字母代替 T ，在可读性上可能会弱一些。通常情况下，T，E，K，V，？是这样约定的：</p>\n<ul>\n<li>？表示不确定的 java 类型</li>\n<li>T (type) 表示具体的一个java类型</li>\n<li>K V (key value) 分别代表java键值中的Key Value</li>\n<li>E (element) 代表Element</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"？无界通配符\"><a href=\"#？无界通配符\" class=\"headerlink\" title=\"？无界通配符\"></a>？无界通配符</h3><p>先从一个小例子看起 。</p>\n<p>我有一个父类 Animal 和几个子类，如狗、猫等，现在我需要一个动物的列表，我的第一个想法是像这样的：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Animal&gt; listAnimals</span><br></pre></td></tr></table></figure></div>\n\n<p>但是老板的想法确实这样的：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span>&gt; listAnimals</span><br></pre></td></tr></table></figure></div>\n\n<p>为什么要使用通配符而不是简单的泛型呢？通配符其实在声明局部变量时是没有什么意义的，但是当你为一个方法声明一个参数时，它是非常重要的。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">countLegs</span> <span class=\"params\">(List&lt;? extends Animal &gt; animals )</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">retVal</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;    </span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( Animal animal : animals ) &#123;</span><br><span class=\"line\">    retVal += animal.countLegs();    </span><br><span class=\"line\">  &#125;    </span><br><span class=\"line\">  <span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">countLegs1</span> <span class=\"params\">(List&lt; Animal &gt; animals )</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">retVal</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;     </span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( Animal animal : animals ) &#123;</span><br><span class=\"line\">    retVal += animal.countLegs();    </span><br><span class=\"line\">  &#125;    </span><br><span class=\"line\">  <span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">  List&lt;Dog&gt; dogs = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// 不会报错    </span></span><br><span class=\"line\">  countLegs( dogs ); </span><br><span class=\"line\">  <span class=\"comment\">// 报错    </span></span><br><span class=\"line\">  countLegs1(dogs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>当调用 countLegs1 时，就会飘红，提示的错误信息如下：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224195911158.png\"/></div></div>\n\n<p>所以，对于不确定或者不关心实际要操作的类型，可以使用无限制通配符（尖括号里一个问号，即 &lt;?&gt; ），表示可以持有任何类型。像 countLegs 方法中，限定了上届，但是不关心具体类型是什么，所以对于传入的 Animal 的所有子类都可以支持，并且不会报错。而 countLegs1 就不行。</p>\n<h3 id=\"上界通配符-extends-E\"><a href=\"#上界通配符-extends-E\" class=\"headerlink\" title=\"上界通配符 &lt; ? extends E&gt;\"></a>上界通配符 &lt; ? extends E&gt;</h3><blockquote>\n<p>上界：用 extends 关键字声明，表示参数化的类型可能是所指定的类型，或者是此类型的子类。</p>\n</blockquote>\n<p>在类型参数中使用 extends 表示这个泛型中的参数必须是 E 或者 E 的子类，这样有两个好处：</p>\n<ul>\n<li>如果传入的类型不是 E 或者 E 的子类，编译不成功</li>\n<li>泛型中可以使用 E 的方法，要不然还得强转成 E 才能使用</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;K <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span>, E <span class=\"keyword\">extends</span> <span class=\"title class_\">B</span>&gt; E <span class=\"title function_\">test</span><span class=\"params\">(K arg1, E arg2)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">E</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> arg2;    </span><br><span class=\"line\">  arg2.compareTo(arg1);    </span><br><span class=\"line\">  <span class=\"comment\">//.....    return result;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>类型参数列表中如果有多个类型参数上限，用逗号分开</p>\n</blockquote>\n<h3 id=\"下界通配符-super-E\"><a href=\"#下界通配符-super-E\" class=\"headerlink\" title=\"下界通配符 &lt; ? super E&gt;\"></a>下界通配符 &lt; ? super E&gt;</h3><blockquote>\n<p>下界: 用 super 进行声明，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至 Object</p>\n</blockquote>\n<p>在类型参数中使用 super 表示这个泛型中的参数必须是 E 或者 E 的父类。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(List&lt;? <span class=\"built_in\">super</span> T&gt; dst, List&lt;T&gt; src)</span> &#123;    </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (T t : src) &#123;</span><br><span class=\"line\">    dst.add(t);    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">  List&lt;Dog&gt; dogs = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();    </span><br><span class=\"line\">  List&lt;Animal&gt; animals = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();    </span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Test3</span>().test(animals,dogs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Dog 是 Animal 的子类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>dst 类型 “大于等于” src 的类型，这里的“大于等于”是指 dst 表示的范围比 src 要大，因此装得下 dst 的容器也就能装 src 。</p>\n<h3 id=\"？和-T-的区别\"><a href=\"#？和-T-的区别\" class=\"headerlink\" title=\"？和 T 的区别\"></a>？和 T 的区别</h3><div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224195846999\"/></div></div>\n\n<p>？和 T 都表示不确定的类型，区别在于我们可以对 T 进行操作，但是对 ？不行，比如如下这种 ：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以</span></span><br><span class=\"line\"><span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> operate();</span><br><span class=\"line\"><span class=\"comment\">// 不可以？</span></span><br><span class=\"line\">car = operate();</span><br></pre></td></tr></table></figure></div>\n\n<p>简单总结下：</p>\n<p>T 是一个 确定的 类型，通常用于泛型类和泛型方法的定义，？是一个 不确定 的类型，通常用于泛型方法的调用代码和形参，不能用于定义类和泛型方法。</p>\n<h4 id=\"区别1：通过-T-来-确保-泛型参数的一致性\"><a href=\"#区别1：通过-T-来-确保-泛型参数的一致性\" class=\"headerlink\" title=\"区别1：通过 T 来 确保 泛型参数的一致性\"></a>区别1：通过 T 来 确保 泛型参数的一致性</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过 T 来 确保 泛型参数的一致性</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span>&gt; voidtest(List&lt;T&gt; dest, List&lt;T&gt; src)</span><br><span class=\"line\"><span class=\"comment\">//通配符是 不确定的，所以这个方法不能保证两个 List 具有相同的元素类型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(List&lt;? extends Number&gt; dest, List&lt;? extends Number&gt; src)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>像下面的代码中，约定的 T 是 Number 的子类才可以，但是申明时是用的 String ，所以就会飘红报错。</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224195847102\"/></div></div>\n\n<p>不能保证两个 List 具有相同的元素类型的情况</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlmapperGeneric&lt;String&gt; glmapperGeneric = <span class=\"keyword\">new</span> <span class=\"title class_\">GlmapperGeneric</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;String&gt; dest = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;Number&gt; src = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">glmapperGeneric.testNon(dest,src);</span><br></pre></td></tr></table></figure></div>\n\n<p>上面的代码在编译器并不会报错，但是当进入到 testNon 方法内部操作时（比如赋值），对于 dest 和 src 而言，就还是需要进行类型转换。</p>\n<h4 id=\"区别2：类型参数可以多重限定而通配符不行\"><a href=\"#区别2：类型参数可以多重限定而通配符不行\" class=\"headerlink\" title=\"区别2：类型参数可以多重限定而通配符不行\"></a>区别2：类型参数可以多重限定而通配符不行</h4><div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224195934147.png\"/></div></div>\n\n<p>使用 &amp; 符号设定多重边界（Multi Bounds)，指定泛型类型 T 必须是 MultiLimitInterfaceA 和 MultiLimitInterfaceB 的共有子类型，此时变量 t 就具有了所有限定的方法和属性。对于通配符来说，因为它不是一个确定的类型，所以不能进行多重限定。</p>\n<h4 id=\"区别3：通配符可以使用超类限定而类型参数不行\"><a href=\"#区别3：通配符可以使用超类限定而类型参数不行\" class=\"headerlink\" title=\"区别3：通配符可以使用超类限定而类型参数不行\"></a>区别3：通配符可以使用超类限定而类型参数不行</h4><p>类型参数 T 只具有 一种 类型限定方式：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span></span><br></pre></td></tr></table></figure></div>\n\n<p>但是通配符 ? 可以进行 两种限定：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span>? <span class=\"built_in\">super</span> A</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"Class-和-Class-区别\"><a href=\"#Class-和-Class-区别\" class=\"headerlink\" title=\"** Class 和 Class&lt;?&gt; 区别**\"></a>** Class<T> 和 Class&lt;?&gt; 区别**</h2><p>前面介绍了 ？和 T 的区别，那么对于，Class<T> 和 &lt;Class<?> 又有什么区别呢？Class<T> 和 Class<?></p>\n<p>最常见的是在反射场景下的使用，这里以用一段发射的代码来说明下。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过反射的方式生成  multiLimit </span></span><br><span class=\"line\"><span class=\"comment\">// 对象，这里比较明显的是，我们需要使用强制类型转换</span></span><br><span class=\"line\"><span class=\"type\">MultiLimit</span> <span class=\"variable\">multiLimit</span> <span class=\"operator\">=</span> (MultiLimit)Class.forName(<span class=\"string\">&quot;com.glmapper.bridge.boot.generic.MultiLimit&quot;</span>).newInstance();</span><br></pre></td></tr></table></figure></div>\n\n<p>对于上述代码，在运行期，如果反射的类型不是 MultiLimit 类，那么一定会报<br> java.lang.ClassCastException 错误。</p>\n<p>对于这种情况，则可以使用下面的代码来代替，使得在在编译期就能直接 检查到类型的问题：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224195847276\"/></div></div>\n\n<p>Class<T> 在实例化的时候，T 要替换成具体类。Class&lt;?&gt; 它是个通配泛型，? 可以代表任何类型，所以主要用于声明时的限制情况。比如，我们可以这样做申明：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Class&lt;?&gt; clazz;</span><br><span class=\"line\"><span class=\"comment\">// 不可以，因为 T 需要指定类型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Class&lt;T&gt; clazzT;</span><br></pre></td></tr></table></figure></div>\n\n<p>所以当不知道定声明什么类型的 Class 的时候可以定义一 个Class&lt;?&gt;。</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224195949975.png\"/></div></div>\n\n\n\n<p>那如果也想 public Class<T> clazzT; 这样的话，就必须让当前的类也指定 T ，</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test3</span>&lt;T&gt; &#123;    </span><br><span class=\"line\">  <span class=\"keyword\">public</span> Class&lt;?&gt; clazz;    <span class=\"comment\">// 不会报错    </span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Class&lt;T&gt; clazzT;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a><strong>小结</strong></h2><p>本文零碎整理了下 JAVA 泛型中的一些点，不是很全，仅供参考。</p>\n","text":"前言Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。泛型带来的好处在没有泛型的情况的下，通过对类型 Object ","raw":null,"photos":[],"categories":[{"name":"Java","slug":"Java","count":1,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"},{"name":"泛型","slug":"泛型","count":1,"path":"api/tags/泛型.json"}]},{"title":"Docker从入门到干活，看这一篇足矣","slug":"Docker从入门到干活，看这一篇足矣","date":"2023-12-24T11:46:11.000Z","updated":"2023-12-24T11:46:11.000Z","comments":true,"pin":null,"path":"api/articles/Docker从入门到干活，看这一篇足矣.json","excerpt":"","keywords":null,"cover":"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194735414.png","content":"<h2 id=\"1-容器简介\"><a href=\"#1-容器简介\" class=\"headerlink\" title=\"1. 容器简介\"></a>1. <strong>容器简介</strong></h2><h3 id=\"1-1-什么是-Linux-容器\"><a href=\"#1-1-什么是-Linux-容器\" class=\"headerlink\" title=\"1.1. 什么是 Linux 容器\"></a>1.1. <strong>什么是 Linux 容器</strong></h3><p>Linux容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。</p>\n<p>容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194735414.png\"/></div></div>\n\n<p>更加详细地来说，请您假定您在开发一个应用。您使用的是一台笔记本电脑，而且您的开发环境具有特定的配置。其他开发人员身处的环境配置可能稍有不同。您正在开发的应用依赖于您当前的配置，还要依赖于某些特定文件。</p>\n<p>与此同时，您的企业还拥有标准化的测试和生产环境，且具有自身的配置和一系列支持文件。</p>\n<p>您希望尽可能多在本地模拟这些环境，而不产生重新创建服务器环境的开销。</p>\n<p>因此，您要如何确保应用能够在这些环境中运行和通过质量检测，并且在部署过程中不出现令人头疼的问题，也无需重新编写代码和进行故障修复？答案就是使用容器。</p>\n<p>容器可以确保您的应用拥有必需的配置和文件，使得这些应用能够在从开发到测试、再到生产的整个流程中顺利运行，而不出现任何不良问题。这样可以避免危机，做到皆大欢喜。</p>\n<p>虽然这只是简化的示例，但在需要很高的可移植性、可配置性和隔离的情况下，我们可以利用 Linux 容器通过很多方式解决难题。</p>\n<p>无论基础架构是在企业内部还是在云端，或者混合使用两者，容器都能满足您的需求。</p>\n<h3 id=\"1-2-容器不就是虚拟化吗\"><a href=\"#1-2-容器不就是虚拟化吗\" class=\"headerlink\" title=\"1.2. 容器不就是虚拟化吗\"></a>1.2. <strong>容器不就是虚拟化吗</strong></h3><p>是，但也不竟然。我们用一种简单方式来思考一下：</p>\n<p>虚拟化使得许多操作系统可同时在单个系统上运行。</p>\n<p>容器则可共享同一个操作系统内核，将应用进程与系统其他部分隔离开。</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194735739.png\"/></div></div>\n\n\n\n<p>图 - 普通虚拟化技术和Docker的对比</p>\n<p>这意味着什么？首先，让多个操作系统在单个虚拟机监控程序上运行以实现虚拟化，并不能达成和使用容器同等的轻量级效果。</p>\n<p>事实上，在仅拥有容量有限的有限资源时，您需要能够可以进行密集部署的轻量级应用。</p>\n<p>Linux 容器可从单个操作系统运行，在所有容器中共享该操作系统，因此应用和服务能够保持轻量级，并行快速运行。</p>\n<h3 id=\"1-3-容器发展简史\"><a href=\"#1-3-容器发展简史\" class=\"headerlink\" title=\"1.3. 容器发展简史\"></a>1.3. <strong>容器发展简史</strong></h3><div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224194831007.png\"/></div></div>\n\n\n\n<p>我们现在称为容器技术的概念最初出现在 2000 年，当时称为 FreeBSD jail，这种技术可将 FreeBSD 系统分区为多个子系统（也称为 Jail）。</p>\n<p>Jail 是作为安全环境而开发的，系统管理员可与企业内部或外部的多个用户共享这些 Jail。</p>\n<p>Jail 的目的是让进程在经过修改的 chroot 环境中创建，而不会脱离和影响整个系统 — 在 chroot 环境中，对文件系统、网络和用户的访问都实现了虚拟化。</p>\n<p>尽管 Jail 在实施方面存在局限性，但最终人们找到了脱离这种隔离环境的方法。</p>\n<p>但这个概念非常有吸引力。</p>\n<p>2001 年，通过 Jacques Gélinas 的 VServer 项目，隔离环境的实施进入了 Linux 领域。</p>\n<p>正如 Gélinas 所说，这项工作的目的是“在高度独立且安全的单一环境中运行多个通用 Linux 服务器 [sic]。” </p>\n<p>在完成了这项针对 Linux 中多个受控制用户空间的基础性工作后，Linux 容器开始逐渐成形并最终发展成了现在的模样。</p>\n<h2 id=\"2-什么是-Docker？\"><a href=\"#2-什么是-Docker？\" class=\"headerlink\" title=\"2. 什么是 Docker？\"></a>2. <strong>什么是 Docker？</strong></h2><p>“Docker” 一词指代多种事物，包括开源社区项目、开源项目使用的工具、主导支持此类项目的公司 Docker Inc. 以及该公司官方支持的工具。技术产品和公司使用同一名称，的确让人有点困惑。</p>\n<p>🎍 IT 软件中所说的 “Docker” ，是指容器化技术，用于支持创建和使用 Linux 容器。</p>\n<p>🎍 开源 Docker 社区致力于改进这类技术，并免费提供给所有用户，使之获益。</p>\n<p>🎍 Docker Inc. 公司凭借 Docker 社区产品起家，它主要负责提升社区版本的安全性，并将改进后的版本与更广泛的技术社区分享。此外，它还专门对这些技术产品进行完善和安全固化，以服务于企业客户。</p>\n<p>借助 Docker ，您可将容器当做重量轻、模块化的虚拟机使用。同时，您还将获得高度的灵活性，从而实现对容器的高效创建、部署及复制，并能将其从一个环境顺利迁移至另一个环境。</p>\n<h3 id=\"2-1-Docker-如何工作？\"><a href=\"#2-1-Docker-如何工作？\" class=\"headerlink\" title=\"2.1. Docker 如何工作？\"></a>2.1. <strong>Docker 如何工作？</strong></h3><p>Docker 技术使用 Linux 内核和内核功能（例如 Cgroups 和 namespaces）来分隔进程，以便各进程相互独立运行。</p>\n<p>这种独立性正是采用容器的目的所在；它可以独立运行多种进程、多个应用程序，更加充分地发挥基础设施的作用，同时保持各个独立系统的安全性。</p>\n<p>容器工具（包括 Docker）可提供基于镜像的部署模式。这使得它能够轻松跨多种环境，与其依赖程序共享应用或服务组。Docker 还可在这一容器环境中自动部署应用程序（或者合并多种流程，以构建单个应用程序）。</p>\n<p>此外，由于这些工具基于 Linux 容器构建，使得 Docker 既易于使用，又别具一格 —— 它可为用户提供前所未有的高度应用程访问权限、快速部署以及版本控制和分发能力。</p>\n<h3 id=\"2-2-Docker-技术是否与传统的-Linux-容器相同？\"><a href=\"#2-2-Docker-技术是否与传统的-Linux-容器相同？\" class=\"headerlink\" title=\"2.2. Docker 技术是否与传统的 Linux 容器相同？\"></a><strong>2.2. Docker 技术是否与传统的 Linux 容器相同？</strong></h3><p>否。Docker 技术最初是基于 LXC 技术构建（大多数人都会将这一技术与“传统的” Linux 容器联系在一起），但后来它逐渐摆脱了对这种技术的依赖。</p>\n<p><strong>就轻量级 虚拟化 这一功能来看，LXC 非常有用</strong>，但它无法提供出色的开发人员或用户体验。除了运行容器之外，Docker 技术还具备其他多项功能，包括简化用于构建容器、传输镜像以及控制镜像版本的流程。</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224194925218.png\"/></div></div>\n\n<p>传统的 Linux 容器使用 init 系统来管理多种进程。这意味着，所有应用程序都作为一个整体运行。与此相反，Docker 技术鼓励应用程序各自独立运行其进程，并提供相应工具以实现这一功能。这种精细化运作模式自有其优势。</p>\n<h3 id=\"2-3-docker的目标\"><a href=\"#2-3-docker的目标\" class=\"headerlink\" title=\"2.3. docker的目标\"></a>2.3. <strong>docker的目标</strong></h3><p>docker的主要目标是”Build,Ship and Run any App,Angwhere”,构建，运输，处处运行</p>\n<ul>\n<li><strong>构建：</strong>做一个docker镜像</li>\n<li><strong>运输：</strong>docker pull</li>\n<li><strong>运行：</strong>启动一个容器</li>\n</ul>\n<p>每一个容器，他都有自己的文件系统rootfs.</p>\n<h2 id=\"3-安装Docker\"><a href=\"#3-安装Docker\" class=\"headerlink\" title=\"3. 安装Docker\"></a>3. <strong>安装Docker</strong></h2><p>环境说明</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要两台几点进行安装</span></span><br><span class=\"line\">[root@docker01 ~]# cat /etc/redhat-release </span><br><span class=\"line\">CentOS Linux release 7.2.1511 (Core) </span><br><span class=\"line\">[root@docker01 ~]# uname  -r </span><br><span class=\"line\">3.10.0-327.el7.x86_64</span><br><span class=\"line\">[root@docker01 ~]# hostname -I</span><br><span class=\"line\">10.0.0.100 172.16.1.100 </span><br><span class=\"line\">[root@docker02 ~]# hostname -I</span><br><span class=\"line\">10.0.0.101 172.16.1.101</span><br></pre></td></tr></table></figure></div>\n\n<p>在<strong>两个节点</strong>上都进行操作</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">sed -i &#x27;s#download.docker.com#mirrors.ustc.edu.cn/docker-ce#g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\">yum install docker-ce -y</span><br></pre></td></tr></table></figure></div>\n\n<p>修改在<em>docker01</em>配置：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改启动文件，监听远程端口</span></span><br><span class=\"line\">vim /usr/lib/systemd/system/docker.service</span><br><span class=\"line\">ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://10.0.0.100:2375</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl enable docker.service </span><br><span class=\"line\">systemctl restart docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ps -ef检查进行，是否启动</span></span><br></pre></td></tr></table></figure></div>\n\n<p>在<em>docker02</em>测试</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker02 ~]# docker -H 10.0.0.100 info</span><br><span class=\"line\">Containers: 0</span><br><span class=\"line\"> Running: 0</span><br><span class=\"line\"> Paused: 0</span><br><span class=\"line\"> Stopped: 0</span><br><span class=\"line\">Images: 0</span><br><span class=\"line\">Server Version: 17.12.0-ce</span><br><span class=\"line\">Storage Driver: devicemapper</span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure></div>\n\n\n\n<h3 id=\"3-1-Docker基础命令操作\"><a href=\"#3-1-Docker基础命令操作\" class=\"headerlink\" title=\"3.1. Docker基础命令操作\"></a>3.1. <strong>Docker基础命令操作</strong></h3><p>查看docker相关信息</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]#  docker version  </span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Version:    17.12.0-ce</span><br><span class=\"line\"> API version:    1.35</span><br><span class=\"line\"> Go version:    go1.9.2</span><br><span class=\"line\"> Git commit:    c97c6d6</span><br><span class=\"line\"> Built:    Wed Dec 27 20:10:14 2017</span><br><span class=\"line\"> OS/Arch:    linux/amd64</span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:    17.12.0-ce</span><br><span class=\"line\">  API version:    1.35 (minimum version 1.12)</span><br><span class=\"line\">  Go version:    go1.9.2</span><br><span class=\"line\">  Git commit:    c97c6d6</span><br><span class=\"line\">  Built:    Wed Dec 27 20:12:46 2017</span><br><span class=\"line\">  OS/Arch:    linux/amd64</span><br><span class=\"line\">  Experimental:    false</span><br></pre></td></tr></table></figure></div>\n\n<p>配置docker镜像加速</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]</span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure></div>\n\n\n\n<h3 id=\"3-2-启动第一个容器\"><a href=\"#3-2-启动第一个容器\" class=\"headerlink\" title=\"3.2. 启动第一个容器\"></a>3.2. <strong>启动第一个容器</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run -d -p 80:80 nginx</span><br><span class=\"line\">Unable to find image &#x27;nginx:latest&#x27; locally</span><br><span class=\"line\">latest: Pulling from library/nginx</span><br><span class=\"line\">e7bb522d92ff: Pull complete </span><br><span class=\"line\">6edc05228666: Pull complete </span><br><span class=\"line\">cd866a17e81f: Pull complete </span><br><span class=\"line\">Digest: sha256:285b49d42c703fdf257d1e2422765c4ba9d3e37768d6ea83d7fe2043dad6e63d</span><br><span class=\"line\">Status: Downloaded newer image for nginx:latest</span><br><span class=\"line\">8d8f81da12b5c10af6ba1a5d07f4abc041cb95b01f3d632c3d638922800b0b4d</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">容器启动后，在浏览器进行访问测试</span> </span><br></pre></td></tr></table></figure></div>\n\n<p>参数说明</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194736648.png\"/></div></div>\n\n\n\n<h3 id=\"3-3-Docker镜像生命周期\"><a href=\"#3-3-Docker镜像生命周期\" class=\"headerlink\" title=\"3.3. Docker镜像生命周期\"></a>3.3. <strong>Docker镜像生命周期</strong></h3><div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194737059.png\"/></div></div>\n\n<h2 id=\"4-Docker镜像相关操作\"><a href=\"#4-Docker镜像相关操作\" class=\"headerlink\" title=\"4. Docker镜像相关操作\"></a>4. <strong>Docker镜像相关操作</strong></h2><h3 id=\"4-1-搜索官方仓库镜像\"><a href=\"#4-1-搜索官方仓库镜像\" class=\"headerlink\" title=\"4.1. 搜索官方仓库镜像\"></a>4.1. <strong>搜索官方仓库镜像</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]#  docker search centos</span><br><span class=\"line\">NAME                      DESCRIPTION                    STARS    OFFICIAL               AUTOMATED</span><br><span class=\"line\">centos                    The official build of CentOS.  3992     [OK]      </span><br><span class=\"line\">ansible/centos7-ansible   Ansible on Centos7             105                              [OK]</span><br></pre></td></tr></table></figure></div>\n\n<p>列表说明</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194737205.png\"/></div></div>\n\n<h3 id=\"4-2-获取镜像\"><a href=\"#4-2-获取镜像\" class=\"headerlink\" title=\"4.2. 获取镜像\"></a>4.2. <strong>获取镜像</strong></h3><p>根据镜像名称拉取镜像</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker pull centos</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">latest: Pulling from library/centos</span><br><span class=\"line\">af4b0a2388c6: Downloading  34.65MB/73.67MB</span><br></pre></td></tr></table></figure></div>\n\n<p>查看当前主机镜像列表</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker image list </span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">centos              latest              ff426288ea90        3 weeks ago         207MB</span><br><span class=\"line\">nginx               latest              3f8a4339aadd        5 weeks ago         108MB</span><br></pre></td></tr></table></figure></div>\n\n<p>拉第三方镜像方法</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull index.tenxcloud.com/tenxcloud/httpd</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"4-3-导出镜像\"><a href=\"#4-3-导出镜像\" class=\"headerlink\" title=\"4.3. 导出镜像\"></a>4.3. <strong>导出镜像</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker image list </span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">centos              latest              ff426288ea90        3 weeks ago         207MB</span><br><span class=\"line\">nginx               latest              3f8a4339aadd        5 weeks ago         108MB</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出</span></span><br><span class=\"line\">[root@docker01 ~]# docker image save centos &gt; docker-centos.tar.gz</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"4-4-删除镜像\"><a href=\"#4-4-删除镜像\" class=\"headerlink\" title=\"4.4. 删除镜像\"></a>4.4. <strong>删除镜像</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker image rm centos:latest</span><br><span class=\"line\">[root@docker01 ~]# docker image list </span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">nginx               latest              3f8a4339aadd        5 weeks ago         108MB</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"4-5-导入镜像\"><a href=\"#4-5-导入镜像\" class=\"headerlink\" title=\"4.5. 导入镜像\"></a>4.5. <strong>导入镜像</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker image load -i docker-centos.tar.gz  </span><br><span class=\"line\">e15afa4858b6: Loading layer  215.8MB/215.8MB</span><br><span class=\"line\">Loaded image: centos:latest</span><br><span class=\"line\">[root@docker01 ~]# docker image list </span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">centos              latest              ff426288ea90        3 weeks ago         207MB</span><br><span class=\"line\">nginx               latest              3f8a4339aadd        5 weeks ago         108MB</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"4-6-查看镜像的详细信息\"><a href=\"#4-6-查看镜像的详细信息\" class=\"headerlink\" title=\"4.6. 查看镜像的详细信息\"></a>4.6. <strong>查看镜像的详细信息</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker image inspect centos</span><br></pre></td></tr></table></figure></div>\n\n\n\n<h2 id=\"5-容器的日常管理\"><a href=\"#5-容器的日常管理\" class=\"headerlink\" title=\"5. 容器的日常管理\"></a>5. <strong>容器的日常管理</strong></h2><h3 id=\"5-1-容器的起-停\"><a href=\"#5-1-容器的起-停\" class=\"headerlink\" title=\"5.1. 容器的起&#x2F;停\"></a>5.1. <strong>容器的起&#x2F;停</strong></h3><p>最简单的运行一个容器</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run nginx</span><br></pre></td></tr></table></figure></div>\n\n<p>创建容器，两步走（不常用）</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker create centos:latest  /bin/bash</span><br><span class=\"line\">bb7f32368ecf0492adb59e20032ab2e6cf6a563a0e6751e58930ee5f7aaef204</span><br><span class=\"line\">[root@docker01 ~]# docker start stupefied_nobel</span><br><span class=\"line\">stupefied_nobel</span><br></pre></td></tr></table></figure></div>\n\n<p>快速启动容器方法</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run  centos:latest  /usr/bin/sleep 20;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>容器内的第一个进程必须一直处于运行的状态，否则这个容器，就会处于退出状态！</strong></p>\n<p>查看正在运行的容器</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker container ls</span><br><span class=\"line\">    或</span><br><span class=\"line\">[root@docker01 ~]# docker ps </span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">8708e93fd767        nginx               &quot;nginx -g &#x27;daemon of…&quot;   6 seconds ago       Up 4 seconds        80/tcp              keen_lewin</span><br></pre></td></tr></table></figure></div>\n\n<p>查看你容器详细信息&#x2F;ip</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker container  inspect  容器名称/id</span><br></pre></td></tr></table></figure></div>\n\n<p>查看你所有容器（包括未运行的）</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES</span><br><span class=\"line\">8708e93fd767        nginx               &quot;nginx -g &#x27;daemon of…&quot;   4 minutes ago       Exited (0) 59 seconds ago                       keen_lewin</span><br><span class=\"line\">f9f3e6af7508        nginx               &quot;nginx -g &#x27;daemon of…&quot;   5 minutes ago       Exited (0) 5 minutes ago                        optimistic_haibt</span><br><span class=\"line\">8d8f81da12b5        nginx               &quot;nginx -g &#x27;daemon of…&quot;   3 hours ago         Exited (0) 3 hours ago                          lucid_bohr</span><br></pre></td></tr></table></figure></div>\n\n<p>停止容器</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker stop 容器名称/id </span><br><span class=\"line\">或</span><br><span class=\"line\">[root@docker01 ~]# docker container  kill  容器名称/id</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"5-2-进入容器方法\"><a href=\"#5-2-进入容器方法\" class=\"headerlink\" title=\"5.2. 进入容器方法\"></a>5.2. <strong>进入容器方法</strong></h3><p>启动时进去方法</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run -it #参数：-it 可交互终端</span><br><span class=\"line\">[root@docker01 ~]# docker run -it nginx:latest  /bin/bash</span><br><span class=\"line\">root@79241093859e:/#</span><br></pre></td></tr></table></figure></div>\n\n<p>退出&#x2F;离开容器</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl+p &amp; ctrl+q</span><br></pre></td></tr></table></figure></div>\n\n\n\n<p><strong>启动后进入容器的方法</strong></p>\n<p>启动一个docker</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run -it centos:latest </span><br><span class=\"line\">[root@1bf0f43c4d2f /]# ps -ef </span><br><span class=\"line\">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\">root          1      0  0 15:47 pts/0    00:00:00 /bin/bash</span><br><span class=\"line\">root         13      1  0 15:47 pts/0    00:00:00 ps -ef</span><br></pre></td></tr></table></figure></div>\n\n<p>attach进入容器，使用pts&#x2F;0 ，会让所用通过此方法进如放入用户看到同样的操作。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker attach 1bf0f43c4d2f</span><br><span class=\"line\">[root@1bf0f43c4d2f /]# ps -ef </span><br><span class=\"line\">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\">root          1      0  0 15:47 pts/0    00:00:00 /bin/bash</span><br><span class=\"line\">root         14      1  0 15:49 pts/0    00:00:00 ps -ef</span><br></pre></td></tr></table></figure></div>\n\n<p>自命名启动一个容器 –name</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker attach 1bf0f43c4d2f</span><br><span class=\"line\">[root@1bf0f43c4d2f /]# ps -ef </span><br><span class=\"line\">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\">root          1      0  0 15:47 pts/0    00:00:00 /bin/bash</span><br><span class=\"line\">root         14      1  0 15:49 pts/0    00:00:00 ps -ef</span><br></pre></td></tr></table></figure></div>\n\n<p>exec 进入容器方法（推荐使用）</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker exec -it clsn1  /bin/bash </span><br><span class=\"line\">[root@b20fa75b4b40 /]# 重新分配一个终端</span><br><span class=\"line\">[root@b20fa75b4b40 /]# ps -ef </span><br><span class=\"line\">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\">root          1      0  0 16:11 pts/0    00:00:00 /bin/bash</span><br><span class=\"line\">root         13      0  0 16:14 pts/1    00:00:00 /bin/bash</span><br><span class=\"line\">root         26     13  0 16:14 pts/1    00:00:00 ps -ef</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"5-3-删除所有容器\"><a href=\"#5-3-删除所有容器\" class=\"headerlink\" title=\"5.3. 删除所有容器\"></a>5.3. <strong>删除所有容器</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker rm -f  `docker ps -a -q`</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-f 强制删除</span></span><br></pre></td></tr></table></figure></div>\n\n\n\n<h3 id=\"5-4-启动时进行端口映射\"><a href=\"#5-4-启动时进行端口映射\" class=\"headerlink\" title=\"5.4. 启动时进行端口映射\"></a>5.4. <strong>启动时进行端口映射</strong></h3><p>-p参数端口映射</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run -d -p 8888:80  nginx:latest </span><br><span class=\"line\">287bec5c60263166c03e1fc5b0b8262fe76507be3dfae4ce5cd2ee2d1e8a89a9</span><br></pre></td></tr></table></figure></div>\n\n<p>不同指定映射方法</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194737613.png\"/></div></div>\n\n<p>随机映射</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -P （大P）# 需要镜像支持</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"6-Docker-数据卷的管理\"><a href=\"#6-Docker-数据卷的管理\" class=\"headerlink\" title=\"6. Docker 数据卷的管理\"></a>6. <strong>Docker 数据卷的管理</strong></h2><h3 id=\"6-1-挂载时创建卷\"><a href=\"#6-1-挂载时创建卷\" class=\"headerlink\" title=\"6.1. 挂载时创建卷\"></a>6.1. <strong>挂载时创建卷</strong></h3><p>挂载卷</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run -d -p 80:80 -v /data:/usr/share/nginx/html nginx:latest</span><br><span class=\"line\">079786c1e297b5c5031e7a841160c74e91d4ad06516505043c60dbb78a259d09</span><br></pre></td></tr></table></figure></div>\n\n<p>容器内站点目录: &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p>\n<p>在宿主机写入数据，查看</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# echo &quot;http://www.nmtui.com&quot; &gt;/data/index.html</span><br><span class=\"line\">[root@docker01 ~]# curl 10.0.0.100</span><br><span class=\"line\">http://www.nmtui.com</span><br></pre></td></tr></table></figure></div>\n\n<p>设置共享卷，使用同一个卷启动一个新的容器</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run -d -p 8080:80 -v /data:/usr/share/nginx/html nginx:latest </span><br><span class=\"line\">351f0bd78d273604bd0971b186979aa0f3cbf45247274493d2490527babb4e42</span><br><span class=\"line\">[root@docker01 ~]# curl 10.0.0.100:8080</span><br><span class=\"line\">http://www.nmtui.com</span><br></pre></td></tr></table></figure></div>\n\n<p>查看卷列表</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker volume ls</span><br><span class=\"line\">DRIVER              VOLUME NAME</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"6-2-创建卷后挂载\"><a href=\"#6-2-创建卷后挂载\" class=\"headerlink\" title=\"6.2. 创建卷后挂载\"></a>6.2. <strong>创建卷后挂载</strong></h3><p>创建一个卷</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker volume create </span><br><span class=\"line\">f3b95f7bd17da220e63d4e70850b8d7fb3e20f8ad02043423a39fdd072b83521</span><br><span class=\"line\">[root@docker01 ~]# docker volume ls </span><br><span class=\"line\">DRIVER              VOLUME NAME</span><br><span class=\"line\">local               f3b95f7bd17da220e63d4e70850b8d7fb3e20f8ad02043423a39fdd072b83521</span><br></pre></td></tr></table></figure></div>\n\n<p>指定卷名</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker volume ls </span><br><span class=\"line\">DRIVER              VOLUME NAME</span><br><span class=\"line\">local               clsn</span><br><span class=\"line\">local               f3b95f7bd17da220e63d4e70850b8d7fb3e20f8ad02043423a39fdd072b83521</span><br></pre></td></tr></table></figure></div>\n\n<p>查看卷路径</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker volume inspect clsn </span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;CreatedAt&quot;: &quot;2018-02-01T00:39:25+08:00&quot;,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class=\"line\">        &quot;Labels&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/clsn/_data&quot;,</span><br><span class=\"line\">        &quot;Name&quot;: &quot;clsn&quot;,</span><br><span class=\"line\">        &quot;Options&quot;: &#123;&#125;,</span><br><span class=\"line\">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></div>\n\n<p>使用卷创建</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run -d -p 9000:80 -v clsn:/usr/share/nginx/html nginx:latest </span><br><span class=\"line\">1434559cff996162da7ce71820ed8f5937fb7c02113bbc84e965845c219d3503</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">宿主机测试</span></span><br><span class=\"line\">[root@docker01 ~]# echo &#x27;blog.nmtui.com&#x27; &gt;/var/lib/docker/volumes/clsn/_data/index.html </span><br><span class=\"line\">[root@docker01 ~]# curl 10.0.0.100:9000</span><br><span class=\"line\">blog.nmtui.com</span><br></pre></td></tr></table></figure></div>\n\n<p>设置卷</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run  -d  -P  --volumes-from 079786c1e297 nginx:latest </span><br><span class=\"line\">b54b9c9930b417ab3257c6e4a8280b54fae57043c0b76b9dc60b4788e92369fb</span><br></pre></td></tr></table></figure></div>\n\n<p>查看使用的端口</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# netstat -lntup </span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1400/sshd           </span><br><span class=\"line\">tcp        0      0 10.0.0.100:2375         0.0.0.0:*               LISTEN      26218/dockerd       </span><br><span class=\"line\">tcp6       0      0 :::9000                 :::*                    LISTEN      32015/docker-proxy  </span><br><span class=\"line\">tcp6       0      0 :::8080                 :::*                    LISTEN      31853/docker-proxy  </span><br><span class=\"line\">tcp6       0      0 :::80                   :::*                    LISTEN      31752/docker-proxy  </span><br><span class=\"line\">tcp6       0      0 :::22                   :::*                    LISTEN      1400/sshd           </span><br><span class=\"line\">tcp6       0      0 :::32769                :::*                    LISTEN      32300/docker-proxy  </span><br><span class=\"line\">[root@docker01 ~]# curl 10.0.0.100:32769</span><br><span class=\"line\">http://www.nmtui.com</span><br></pre></td></tr></table></figure></div>\n\n\n\n<h3 id=\"6-3-手动将容器保存为镜像\"><a href=\"#6-3-手动将容器保存为镜像\" class=\"headerlink\" title=\"6.3. 手动将容器保存为镜像\"></a>6.3. <strong>手动将容器保存为镜像</strong></h3><p>本次是基于docker官方centos 6.8 镜像创建</p>\n<p>官方镜像列表：</p>\n<p><a href=\"https://hub.docker.com/explore/\">https://hub.docker.com/explore/</a></p>\n<p>启动一个centos6.8的镜像</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker pull  centos:6.8</span><br><span class=\"line\">[root@docker01 ~]# docker run -it -p 1022:22 centos:6.8  /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在容器种安装sshd服务，并修改系统密码</span></span><br><span class=\"line\">[root@582051b2b92b ~]# yum install  openssh-server -y </span><br><span class=\"line\">[root@582051b2b92b ~]# echo &quot;root:123456&quot; |chpasswd</span><br><span class=\"line\">[root@582051b2b92b ~]#  /etc/init.d/sshd start</span><br></pre></td></tr></table></figure></div>\n\n<p>启动完成后镜像ssh连接测试</p>\n<p>将容器提交为镜像</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker commit brave_mcclintock  centos6-ssh</span><br></pre></td></tr></table></figure></div>\n\n<p>使用新的镜像启动容器</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run -d  -p 1122:22  centos6-ssh:latest  /usr/sbin/sshd -D </span><br><span class=\"line\">5b8161fda2a9f2c39c196c67e2eb9274977e7723fe51c4f08a0190217ae93094</span><br></pre></td></tr></table></figure></div>\n\n<p>在容器安装httpd服务</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@5b8161fda2a9 /]#  yum install httpd -y</span><br></pre></td></tr></table></figure></div>\n\n<p>编写启动脚本脚本</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@5b8161fda2a9 /]# cat  init.sh </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span> </span><br><span class=\"line\">/etc/init.d/httpd start </span><br><span class=\"line\">/usr/sbin/sshd -D</span><br><span class=\"line\">[root@5b8161fda2a9 /]# chmod +x init.sh </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意执行权限</span></span><br></pre></td></tr></table></figure></div>\n\n<p>再次提交为新的镜像</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker commit  5b8161fda2a9 centos6-httpd </span><br><span class=\"line\">sha256:705d67a786cac040800b8485cf046fd57b1828b805c515377fc3e9cea3a481c1</span><br></pre></td></tr></table></figure></div>\n\n<p>启动镜像，做好端口映射。并在浏览器中测试访问</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run -d -p 1222:22 -p 80:80  centos6-httpd /init.sh </span><br><span class=\"line\">46fa6a06644e31701dc019fb3a8c3b6ef008d4c2c10d46662a97664f838d8c2c</span><br></pre></td></tr></table></figure></div>\n\n\n\n<h2 id=\"7-Dockerfile自动构建docker镜像\"><a href=\"#7-Dockerfile自动构建docker镜像\" class=\"headerlink\" title=\"7. Dockerfile自动构建docker镜像\"></a>7. <strong>Dockerfile自动构建docker镜像</strong></h2><p>官方构建dockerffile文件参考</p>\n<p><a href=\"https://github.com/CentOS/CentOS-Dockerfiles\">https://github.com/CentOS/CentOS-Dockerfiles</a></p>\n<h3 id=\"7-1-Dockerfile指令集\"><a href=\"#7-1-Dockerfile指令集\" class=\"headerlink\" title=\"7.1. Dockerfile指令集\"></a>7.1. <strong>Dockerfile指令集</strong></h3><p>dockerfile主要组成部分：</p>\n<ul>\n<li>基础镜像信息 FROM centos:6.8</li>\n<li>制作镜像操作指令RUN yum insatll openssh-server -y</li>\n<li>容器启动时执行指令 CMD [“&#x2F;bin&#x2F;bash”]</li>\n</ul>\n<p>dockerfile常用指令：</p>\n<ul>\n<li>FROM 这个镜像的妈妈是谁？（指定基础镜像）</li>\n<li>MAINTAINER 告诉别人，谁负责养它？（指定维护者信息，可以没有）</li>\n<li>RUN 你想让它干啥（在命令前面加上RUN即可）</li>\n<li>ADD 给它点创业资金（COPY文件，会自动解压）</li>\n<li>WORKDIR 我是cd,今天刚化了妆（设置当前工作目录）</li>\n<li>VOLUME 给它一个存放行李的地方（设置卷，挂载主机目录）</li>\n<li>EXPOSE 它要打开的门是啥（指定对外的端口）</li>\n<li>CMD 奔跑吧，兄弟！（指定容器启动后的要干的事情）</li>\n</ul>\n<p>dockerfile其他指令： </p>\n<ul>\n<li><p>COPY 复制文件</p>\n</li>\n<li><p>ENV 环境变量</p>\n</li>\n<li><p>ENTRYPOINT 容器启动后执行的命令</p>\n</li>\n</ul>\n<h3 id=\"7-2-创建一个Dockerfile\"><a href=\"#7-2-创建一个Dockerfile\" class=\"headerlink\" title=\"7.2. 创建一个Dockerfile\"></a>7.2. <strong>创建一个Dockerfile</strong></h3><p>创建第一个Dockerfile文件</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建目录</span></span><br><span class=\"line\">[root@docker01 base]# cd /opt/base</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建Dcokerfile文件，注意大小写</span></span><br><span class=\"line\">[root@docker01 base]# vim Dockerfile</span><br><span class=\"line\">FROM centos:6.8</span><br><span class=\"line\">RUN yum install openssh-server -y </span><br><span class=\"line\">RUN echo &quot;root:123456&quot; |chpasswd</span><br><span class=\"line\">RUN /etc/init.d/sshd start </span><br><span class=\"line\">CMD [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br></pre></td></tr></table></figure></div>\n\n<p>使用自构建的镜像启动</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 base]# docker image build  -t centos6.8-ssh . </span><br><span class=\"line\">-t 为镜像标签打标签  . 表示当前路径</span><br></pre></td></tr></table></figure></div>\n\n<p>使用自构建的镜像启动</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 base]# docker run  -d -p 2022:22 centos6.8-ssh-b </span><br><span class=\"line\">dc3027d3c15dac881e8e2aeff80724216f3ac725f142daa66484f7cb5d074e7a</span><br></pre></td></tr></table></figure></div>\n\n\n\n<h3 id=\"7-3-使用Dcokerfile安装kodexplorer\"><a href=\"#7-3-使用Dcokerfile安装kodexplorer\" class=\"headerlink\" title=\"7.3. 使用Dcokerfile安装kodexplorer\"></a>7.3. <strong>使用Dcokerfile安装kodexplorer</strong></h3><p>Dockerfile文件内容</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:6.8</span><br><span class=\"line\">RUN yum install wget unzip php php-gd php-mbstring -y &amp;&amp; yum clean all</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置工作目录，之后的操作都在这个目录中</span></span><br><span class=\"line\">WORKDIR /var/www/html/</span><br><span class=\"line\">RUN wget -c http://static.kodcloud.com/update/download/kodexplorer4.25.zip</span><br><span class=\"line\">RUN unzip kodexplorer4.25.zip &amp;&amp; rm -f kodexplorer4.25.zip</span><br><span class=\"line\">RUN chown -R apache.apache .</span><br><span class=\"line\">CMD [&quot;/usr/sbin/apachectl&quot;,&quot;-D&quot;,&quot;FOREGROUND&quot;]</span><br></pre></td></tr></table></figure></div>\n\n<p>更多的Dockerfile可以参考官方方法。</p>\n<h2 id=\"8-Docker中的镜像分层\"><a href=\"#8-Docker中的镜像分层\" class=\"headerlink\" title=\"8. Docker中的镜像分层\"></a>8. <strong>Docker中的镜像分层</strong></h2><p>参考文档：</p>\n<p><a href=\"http://www.maiziedu.com/wiki/cloud/dockerimage/\">http://www.maiziedu.com/wiki/cloud/dockerimage/</a></p>\n<p>Docker 支持通过扩展现有镜像，创建新的镜像。实际上，Docker Hub 中 99% 的镜像都是通过在 base 镜像中安装和配置需要的软件构建出来的。</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194737782.png\"/></div></div>\n\n<p>从上图可以看到，新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层。</p>\n<h3 id=\"8-1-Docker-镜像为什么分层\"><a href=\"#8-1-Docker-镜像为什么分层\" class=\"headerlink\" title=\"8.1. Docker 镜像为什么分层\"></a>8.1. <strong>Docker 镜像为什么分层</strong></h3><p>镜像分层最大的一个好处就是共享资源。</p>\n<p>比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像；同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p>\n<p>如果多个容器共享一份基础镜像，当某个容器修改了基础镜像的内容，比如 &#x2F;etc 下的文件，这时其他容器的 &#x2F;etc 是不会被修改的，修改只会被限制在单个容器内。这就是容器 Copy-on-Write 特性。</p>\n<h3 id=\"8-2-可写的容器层\"><a href=\"#8-2-可写的容器层\" class=\"headerlink\" title=\"8.2. 可写的容器层\"></a>8.2. <strong>可写的容器层</strong></h3><p>当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224195013155.png\"/></div></div>\n\n\n\n<p>所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。只有<strong>容器层是可写的，容器层下面的所有镜像层都是只读的。</strong></p>\n<h3 id=\"8-3-容器层的细节说明\"><a href=\"#8-3-容器层的细节说明\" class=\"headerlink\" title=\"8.3. 容器层的细节说明\"></a>8.3. <strong>容器层的细节说明</strong></h3><p>镜像层数量可能会很多，所有镜像层会联合在一起组成一个统一的文件系统。如果不同层中有一个相同路径的文件，比如 &#x2F;a，上层的 &#x2F;a 会覆盖下层的 &#x2F;a，也就是说用户只能访问到上层中的文件 &#x2F;a。在容器层中，用户看到的是一个叠加之后的文件系统。</p>\n<p>文件操作的</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194738679.png\"/></div></div>\n\n\n\n<p>只有当需要修改时才复制一份数据，这种特性被称作 Copy-on-Write。可见，容器层保存的是镜像变化的部分，不会对镜像本身进行任何修改。</p>\n<p>这样就解释了我们前面提出的问题：容器层记录对镜像的修改，所有镜像层都是只读的，不会被容器修改，所以镜像可以被多个容器共享。</p>\n<h2 id=\"9-使用docker运行zabbix-server\"><a href=\"#9-使用docker运行zabbix-server\" class=\"headerlink\" title=\"9. 使用docker运行zabbix-server\"></a>9. <strong>使用docker运行zabbix-server</strong></h2><h3 id=\"9-1-容器间的互联\"><a href=\"#9-1-容器间的互联\" class=\"headerlink\" title=\"9.1. 容器间的互联\"></a>9.1. <strong>容器间的互联</strong></h3><p>在运行zabbix之前务必要了解容器间互联的方法</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建一个nginx容器</span></span><br><span class=\"line\">docker run -d -p 80:80 nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建容器，做<span class=\"built_in\">link</span>，并进入容器中</span></span><br><span class=\"line\">docker run -it --link quirky_brown:web01 centos-ssh /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在容器中访问nginx容器可以ping通</span></span><br><span class=\"line\">ping web01 </span><br></pre></td></tr></table></figure></div>\n\n<p>命令执行过程</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动apache容器</span></span><br><span class=\"line\">[root@docker01 ~]# docker run -d httpd:2.4  </span><br><span class=\"line\">3f1f7fc554720424327286bd2b04aeab1b084a3fb011a785b0deab6a34e56955</span><br><span class=\"line\">^[[A[root@docker01 docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">3f1f7fc55472        httpd:2.4           &quot;httpd-foreground&quot;   6 seconds ago       Up 5 seconds        80/tcp              determined_clarke</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉取一个busybox 镜像</span></span><br><span class=\"line\">[root@docker01 ~]# docker pull busybox </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动容器</span></span><br><span class=\"line\">[root@docker01 ~]# docker run -it  --link determined_clarke:web busybox:latest   /bin/sh </span><br><span class=\"line\">/ # </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用新的容器访问最初的web容器</span></span><br><span class=\"line\">/ # ping web </span><br><span class=\"line\">PING web (172.17.0.2): 56 data bytes</span><br><span class=\"line\">64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.058 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">--- web ping statistics ---</span><br><span class=\"line\">1 packets transmitted, 1 packets received, 0% packet loss</span><br><span class=\"line\">round-trip min/avg/max = 0.058/0.058/0.058 ms   </span><br></pre></td></tr></table></figure></div>\n\n\n\n<h3 id=\"9-2-启动zabbix容器\"><a href=\"#9-2-启动zabbix容器\" class=\"headerlink\" title=\"9.2. 启动zabbix容器\"></a>9.2. <strong>启动zabbix容器</strong></h3><p>1、启动一个mysql的容器</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mysql-server -t \\</span><br><span class=\"line\">      -e MYSQL_DATABASE=&quot;zabbix&quot; \\</span><br><span class=\"line\">      -e MYSQL_USER=&quot;zabbix&quot; \\</span><br><span class=\"line\">      -e MYSQL_PASSWORD=&quot;zabbix_pwd&quot; \\</span><br><span class=\"line\">      -e MYSQL_ROOT_PASSWORD=&quot;root_pwd&quot; \\</span><br><span class=\"line\">      -d mysql:5.7 \\</span><br><span class=\"line\">      --character-set-server=utf8 --collation-server=utf8_bin </span><br></pre></td></tr></table></figure></div>\n\n<p>2、启动java-gateway容器监控java服务</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name zabbix-java-gateway -t \\</span><br><span class=\"line\">      -d zabbix/zabbix-java-gateway:latest</span><br></pre></td></tr></table></figure></div>\n\n<p>3、启动zabbix-mysql容器使用link连接mysql与java-gateway。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name zabbix-server-mysql -t \\</span><br><span class=\"line\">      -e DB_SERVER_HOST=&quot;mysql-server&quot; \\</span><br><span class=\"line\">      -e MYSQL_DATABASE=&quot;zabbix&quot; \\</span><br><span class=\"line\">      -e MYSQL_USER=&quot;zabbix&quot; \\</span><br><span class=\"line\">      -e MYSQL_PASSWORD=&quot;zabbix_pwd&quot; \\</span><br><span class=\"line\">      -e MYSQL_ROOT_PASSWORD=&quot;root_pwd&quot; \\</span><br><span class=\"line\">      -e ZBX_JAVAGATEWAY=&quot;zabbix-java-gateway&quot; \\</span><br><span class=\"line\">      --link mysql-server:mysql \\</span><br><span class=\"line\">      --link zabbix-java-gateway:zabbix-java-gateway \\</span><br><span class=\"line\">      -p 10051:10051 \\</span><br><span class=\"line\">      -d zabbix/zabbix-server-mysql:latest</span><br></pre></td></tr></table></figure></div>\n\n<p>4、启动zabbix web显示，使用link连接zabbix-mysql与mysql。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name zabbix-web-nginx-mysql -t \\</span><br><span class=\"line\">      -e DB_SERVER_HOST=&quot;mysql-server&quot; \\</span><br><span class=\"line\">      -e MYSQL_DATABASE=&quot;zabbix&quot; \\</span><br><span class=\"line\">      -e MYSQL_USER=&quot;zabbix&quot; \\</span><br><span class=\"line\">      -e MYSQL_PASSWORD=&quot;zabbix_pwd&quot; \\</span><br><span class=\"line\">      -e MYSQL_ROOT_PASSWORD=&quot;root_pwd&quot; \\</span><br><span class=\"line\">      --link mysql-server:mysql \\</span><br><span class=\"line\">      --link zabbix-server-mysql:zabbix-server \\</span><br><span class=\"line\">      -p 80:80 \\</span><br><span class=\"line\">      -d zabbix/zabbix-web-nginx-mysql:latest</span><br></pre></td></tr></table></figure></div>\n\n\n\n<h3 id=\"9-3-关于zabbix-API\"><a href=\"#9-3-关于zabbix-API\" class=\"headerlink\" title=\"9.3. 关于zabbix API\"></a>9.3. <strong>关于zabbix API</strong></h3><p>关于zabbix API可以参考官方文档：</p>\n<p><a href=\"https://www.zabbix.com/documentation/3.4/zh/manual/api\">https://www.zabbix.com/documentation/3.4/zh/manual/api</a></p>\n<p>1、获取token方法</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取token</span></span><br><span class=\"line\">[root@docker02 ~]# curl -s -X POST -H &#x27;Content-Type:application/json&#x27; -d &#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class=\"line\">&quot;method&quot;: &quot;user.login&quot;,</span><br><span class=\"line\">&quot;params&quot;: &#123;</span><br><span class=\"line\">&quot;user&quot;: &quot;Admin&quot;,</span><br><span class=\"line\">&quot;password&quot;: &quot;zabbix&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;id&quot;: 1</span><br><span class=\"line\">&#125;&#x27; http://10.0.0.100/api_jsonrpc.php</span><br><span class=\"line\">&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:&quot;d3be707f9e866ec5d0d1c242292cbebd&quot;,&quot;id&quot;:1&#125;</span><br></pre></td></tr></table></figure></div>\n\n\n\n<h2 id=\"10-docker-仓库（registry）\"><a href=\"#10-docker-仓库（registry）\" class=\"headerlink\" title=\"10. docker 仓库（registry）\"></a>10. <strong>docker 仓库（registry）</strong></h2><h3 id=\"10-1-创建一个普通仓库\"><a href=\"#10-1-创建一个普通仓库\" class=\"headerlink\" title=\"10.1. 创建一个普通仓库\"></a>10.1. <strong>创建一个普通仓库</strong></h3><p>1、创建仓库</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 --restart=always --name registry -v /opt/myregistry:/var/lib/registry  registry </span><br></pre></td></tr></table></figure></div>\n\n<p>2、修改配置文件，使之支持http</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# cat  /etc/docker/daemon.json </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;],</span><br><span class=\"line\">  &quot;insecure-registries&quot;: [&quot;10.0.0.100:5000&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>重启docker让修改生效</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# systemctl restart  docker.service</span><br></pre></td></tr></table></figure></div>\n\n<p>3、修改镜像标签</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker tag  busybox:latest  10.0.0.100:5000/clsn/busybox:1.0</span><br><span class=\"line\">[root@docker01 ~]# docker images</span><br><span class=\"line\">REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">centos6-ssh                     latest              3c2b1e57a0f5        18 hours ago        393MB</span><br><span class=\"line\">httpd                           2.4                 2e202f453940        6 days ago          179MB</span><br><span class=\"line\">10.0.0.100:5000/clsn/busybox    1.0                 5b0d59026729        8 days ago          1.15MB</span><br></pre></td></tr></table></figure></div>\n\n<p>4、将新打标签的镜像上传镜像到仓库</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker push   10.0.0.100:5000/clsn/busybox</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"10-2-带basic认证的仓库\"><a href=\"#10-2-带basic认证的仓库\" class=\"headerlink\" title=\"10.2. 带basic认证的仓库\"></a>10.2. <strong>带basic认证的仓库</strong></h3><p>1、安装加密工具</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 clsn]# yum install httpd-tools  -y</span><br></pre></td></tr></table></figure></div>\n\n<p>2、设置认证密码</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/registry-var/auth/ -p</span><br><span class=\"line\">htpasswd  -Bbn clsn 123456  &gt; /opt/registry-var/auth/htpasswd</span><br></pre></td></tr></table></figure></div>\n\n<p>3、启动容器，在启动时传入认证参数</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 -v /opt/registry-var/auth/:/auth/ -e &quot;REGISTRY_AUTH=htpasswd&quot; -e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd registry</span><br></pre></td></tr></table></figure></div>\n\n<p>4、使用验证用户测试</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登陆用户</span></span><br><span class=\"line\">[root@docker01 ~]# docker login 10.0.0.100:5000 </span><br><span class=\"line\">Username: clsn  </span><br><span class=\"line\">Password: 123456</span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">推送镜像到仓库</span></span><br><span class=\"line\">[root@docker01 ~]# docker push 10.0.0.100:5000/clsn/busybox </span><br><span class=\"line\">The push refers to repository [10.0.0.100:5000/clsn/busybox]</span><br><span class=\"line\">4febd3792a1f: Pushed </span><br><span class=\"line\">1.0: digest: sha256:4cee1979ba0bf7db9fc5d28fb7b798ca69ae95a47c5fecf46327720df4ff352d size: 527</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">认证文件的保存位置</span></span><br><span class=\"line\">[root@docker01 ~]# cat .docker/config.json </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;auths&quot;: &#123;</span><br><span class=\"line\">        &quot;10.0.0.100:5000&quot;: &#123;</span><br><span class=\"line\">            &quot;auth&quot;: &quot;Y2xzbjoxMjM0NTY=&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;https://index.docker.io/v1/&quot;: &#123;</span><br><span class=\"line\">            &quot;auth&quot;: &quot;Y2xzbjpIenNAMTk5Ng==&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;HttpHeaders&quot;: &#123;</span><br><span class=\"line\">        &quot;User-Agent&quot;: &quot;Docker-Client/17.12.0-ce (linux)&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>至此，一个简单的docker镜像仓库搭建完成</p>\n<h2 id=\"11-docker-compose编排工具\"><a href=\"#11-docker-compose编排工具\" class=\"headerlink\" title=\"11. docker-compose编排工具\"></a>11. <strong>docker-compose编排工具</strong></h2><h3 id=\"11-1-安装docker-compose\"><a href=\"#11-1-安装docker-compose\" class=\"headerlink\" title=\"11.1. 安装docker-compose\"></a>11.1. <strong>安装docker-compose</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载pip软件</span></span><br><span class=\"line\">yum install -y python2-pip</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载 docker-compose</span></span><br><span class=\"line\">pip install docker-compose</span><br></pre></td></tr></table></figure></div>\n\n<p>国内开启pip 下载加速：</p>\n<p><a href=\"http://mirrors.aliyun.com/help/pypi\">http://mirrors.aliyun.com/help/pypi</a></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/.pip/</span><br><span class=\"line\">cat &gt; ~/.pip/pip.conf &lt;&lt;&#x27;EOF&#x27;</span><br><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"11-2-编排启动镜像\"><a href=\"#11-2-编排启动镜像\" class=\"headerlink\" title=\"11.2. 编排启动镜像\"></a>11.2. <strong>编排启动镜像</strong></h3><p>1、创建文件目录</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# mkdir /opt/my_wordpress/</span><br><span class=\"line\">[root@docker01 ~]# cd /opt/my_wordpress/</span><br></pre></td></tr></table></figure></div>\n\n<p>2、编写编排文件</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 my_wordpress]# vim docker-compose.yml</span><br><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">   db:</span><br><span class=\"line\">     image: mysql:5.7</span><br><span class=\"line\">     volumes:</span><br><span class=\"line\">       - /data/db_data:/var/lib/mysql</span><br><span class=\"line\">     restart: always</span><br><span class=\"line\">     environment:</span><br><span class=\"line\">       MYSQL_ROOT_PASSWORD: somewordpress</span><br><span class=\"line\">       MYSQL_DATABASE: wordpress</span><br><span class=\"line\">       MYSQL_USER: wordpress</span><br><span class=\"line\">       MYSQL_PASSWORD: wordpress</span><br><span class=\"line\">   wordpress:</span><br><span class=\"line\">     depends_on:</span><br><span class=\"line\">       - db</span><br><span class=\"line\">     image: wordpress:latest</span><br><span class=\"line\">     volumes:</span><br><span class=\"line\">       - /data/web_data:/var/www/html</span><br><span class=\"line\">     ports: </span><br><span class=\"line\">       - &quot;8000:80&quot;</span><br><span class=\"line\">     restart: always</span><br><span class=\"line\">     environment:</span><br><span class=\"line\">       WORDPRESS_DB_HOST: db:3306</span><br><span class=\"line\">       WORDPRESS_DB_USER: wordpress</span><br><span class=\"line\">       WORDPRESS_DB_PASSWORD: wordpress</span><br></pre></td></tr></table></figure></div>\n\n<p>3、启动</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 my_wordpress]# docker-compose up</span><br><span class=\"line\"><span class=\"meta prompt_\">　　#</span><span class=\"language-bash\">启动方法：docker-compose up</span></span><br><span class=\"line\"><span class=\"meta prompt_\">　　#</span><span class=\"language-bash\">后台启动方法：docker-compose up -d</span></span><br></pre></td></tr></table></figure></div>\n\n\n\n<p>4、浏览器上访问<a href=\"http://10.0.0.100:8000/\">http://10.0.0.100:8000</a></p>\n<p>进行wordpress的安装即可</p>\n<h3 id=\"11-3-haproxy代理后端docker容器\"><a href=\"#11-3-haproxy代理后端docker容器\" class=\"headerlink\" title=\"11.3. haproxy代理后端docker容器\"></a>11.3. <strong>haproxy代理后端docker容器</strong></h3><p>1、修改编排脚本</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 my_wordpress]# cat docker-compose.yml </span><br><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">   db:</span><br><span class=\"line\">     image: mysql:5.7</span><br><span class=\"line\">     volumes:</span><br><span class=\"line\">       - /data/db_data:/var/lib/mysql</span><br><span class=\"line\">     restart: always</span><br><span class=\"line\">     environment:</span><br><span class=\"line\">       MYSQL_ROOT_PASSWORD: somewordpress</span><br><span class=\"line\">       MYSQL_DATABASE: wordpress</span><br><span class=\"line\">       MYSQL_USER: wordpress</span><br><span class=\"line\">       MYSQL_PASSWORD: wordpress</span><br><span class=\"line\">   wordpress:</span><br><span class=\"line\">     depends_on:</span><br><span class=\"line\">       - db</span><br><span class=\"line\">     image: wordpress:latest</span><br><span class=\"line\">     volumes:</span><br><span class=\"line\">       - /data/web_data:/var/www/html</span><br><span class=\"line\">     ports: </span><br><span class=\"line\">       - &quot;80&quot;</span><br><span class=\"line\">     restart: always</span><br><span class=\"line\">     environment:</span><br><span class=\"line\">       WORDPRESS_DB_HOST: db:3306</span><br><span class=\"line\">       WORDPRESS_DB_USER: wordpress</span><br><span class=\"line\">       WORDPRESS_DB_PASSWORD: wordpress</span><br></pre></td></tr></table></figure></div>\n\n<p>2、同时启动两台wordpress</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 my_wordpress]# docker-compose scale wordpress=2 </span><br><span class=\"line\">WARNING: The scale command is deprecated. Use the up command with the --scale flag instead.</span><br><span class=\"line\">Starting mywordpress_wordpress_1 ... done</span><br><span class=\"line\">Creating mywordpress_wordpress_2 ... done</span><br></pre></td></tr></table></figure></div>\n\n<p>3、安装haproxy</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# yum install haproxy -y</span><br></pre></td></tr></table></figure></div>\n\n<p>4、修改haproxy配置文件</p>\n<p>关于配置文件的详细说明，参考：</p>\n<p><a href=\"https://www.cnblogs.com/MacoLee/p/5853413.html\">https://www.cnblogs.com/MacoLee/p/5853413.html</a></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]#cp /etc/haproxy/haproxy.cfg&#123;,.bak&#125;</span><br><span class=\"line\">[root@docker01 ~]# vim /etc/haproxy/haproxy.cfg</span><br><span class=\"line\">global</span><br><span class=\"line\">    log         127.0.0.1 local2</span><br><span class=\"line\">    chroot      /var/lib/haproxy</span><br><span class=\"line\">    pidfile     /var/run/haproxy.pid</span><br><span class=\"line\">    maxconn     4000</span><br><span class=\"line\">    user        haproxy</span><br><span class=\"line\">    group       haproxy</span><br><span class=\"line\">    daemon</span><br><span class=\"line\">    stats socket /var/lib/haproxy/stats level admin  #支持命令行控制</span><br><span class=\"line\">defaults</span><br><span class=\"line\">    mode                    http</span><br><span class=\"line\">    log                     global</span><br><span class=\"line\">    option                  httplog</span><br><span class=\"line\">    option                  dontlognull</span><br><span class=\"line\">    option http-server-close</span><br><span class=\"line\">    option forwardfor       except 127.0.0.0/8</span><br><span class=\"line\">    option                  redispatch</span><br><span class=\"line\">    retries                 3</span><br><span class=\"line\">    timeout http-request    10s</span><br><span class=\"line\">    timeout queue           1m</span><br><span class=\"line\">    timeout connect         10s</span><br><span class=\"line\">    timeout client          1m</span><br><span class=\"line\">    timeout server          1m</span><br><span class=\"line\">    timeout http-keep-alive 10s</span><br><span class=\"line\">    timeout check           10s</span><br><span class=\"line\">    maxconn                 3000</span><br><span class=\"line\">listen stats</span><br><span class=\"line\">    mode http</span><br><span class=\"line\">    bind 0.0.0.0:8888</span><br><span class=\"line\">    stats enable</span><br><span class=\"line\">    stats uri     /haproxy-status </span><br><span class=\"line\">    stats auth    admin:123456</span><br><span class=\"line\">frontend frontend_www_example_com</span><br><span class=\"line\">    bind 10.0.0.100:8000</span><br><span class=\"line\">    mode http</span><br><span class=\"line\">    option httplog</span><br><span class=\"line\">    log global</span><br><span class=\"line\">    default_backend backend_www_example_com</span><br><span class=\"line\">backend backend_www_example_com</span><br><span class=\"line\">    option forwardfor header X-REAL-IP</span><br><span class=\"line\">    option httpchk HEAD / HTTP/1.0</span><br><span class=\"line\">    balance roundrobin</span><br><span class=\"line\">    server web-node1  10.0.0.100:32768 check inter 2000 rise 30 fall 15</span><br><span class=\"line\">    server web-node2  10.0.0.100:32769 check inter 2000 rise 30 fall 15</span><br></pre></td></tr></table></figure></div>\n\n<p>5、启动haproxy</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start haproxy</span><br><span class=\"line\">systemctl enable haproxy</span><br></pre></td></tr></table></figure></div>\n\n<p>6、使用浏览器访问hapeoxy监听的8000端口可以看到负载的情况</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194738709.png\"/></div></div>\n\n<p>7、使用浏览器访问 </p>\n<p><a href=\"http://10.0.0.100:8888/haproxy-status\">http://10.0.0.100:8888/haproxy-status</a></p>\n<p>可以看到后端节点的监控状况，</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194739069.png\"/></div></div>\n\n<h3 id=\"11-4-安装socat-直接操作socket控制haproxy\"><a href=\"#11-4-安装socat-直接操作socket控制haproxy\" class=\"headerlink\" title=\"11.4. 安装socat 直接操作socket控制haproxy\"></a>11.4. <strong>安装socat 直接操作socket控制haproxy</strong></h3><p>1、安装软件</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install socat.x86_64 -y</span><br></pre></td></tr></table></figure></div>\n\n<p>2、查看帮助</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 web_data]# echo &quot;help&quot;|socat stdio /var/lib/haproxy/stats</span><br></pre></td></tr></table></figure></div>\n\n<p>3、下线后端节点</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;disable server backend_www_example_com/web-node2&quot;|socat stdio /var/lib/haproxy/stats</span><br></pre></td></tr></table></figure></div>\n\n<p>4、上线后端节点</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;enable server backend_www_example_com/web-node3&quot;|socat stdio /var/lib/haproxy/stats</span><br></pre></td></tr></table></figure></div>\n\n<p>5、编写php测试页，放到&#x2F;data&#x2F;web_data下，在浏览器中访问可以查看当前的节点</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 web_data]# vim check.php</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;PHP测试&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;?php  echo &#x27;&lt;p&gt;Hello World &lt;/p&gt;&#x27;; ?&gt;</span><br><span class=\"line\">        &lt;?php  echo &quot;访问的服务器地址是:&quot;.&quot;&lt;fontcolor=red&gt;&quot;.$_SERVER[&#x27;SERVER_ADDR&#x27;].&quot;&lt;/font&gt;&quot;.&quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">        echo&quot;访问的服务器域名是:&quot;.&quot;&lt;fontcolor=red&gt;&quot;.$_SERVER[&#x27;SERVER_NAME&#x27;].&quot;&lt;/font&gt;&quot;.&quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">        ?&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"12-重启docker服务，容器全部退出的解决办法\"><a href=\"#12-重启docker服务，容器全部退出的解决办法\" class=\"headerlink\" title=\"12. 重启docker服务，容器全部退出的解决办法\"></a>12. 重启docker服务，容器全部退出的解决办法</h2><h3 id=\"12-1-在启动是指定自动重启\"><a href=\"#12-1-在启动是指定自动重启\" class=\"headerlink\" title=\"12.1. 在启动是指定自动重启\"></a>12.1. <strong>在启动是指定自动重启</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  --restart=always</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"12-1-修改docker默认配置文件\"><a href=\"#12-1-修改docker默认配置文件\" class=\"headerlink\" title=\"12.1. 修改docker默认配置文件\"></a>12.1. <strong>修改docker默认配置文件</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加上下面这行</span></span><br><span class=\"line\">&quot;live-restore&quot;: true</span><br></pre></td></tr></table></figure></div>\n\n<p>docker server配置文件 &#x2F;etc&#x2F;docker&#x2F;daemon.json 参考</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker02 ~]# cat  /etc/docker/daemon.json </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;],</span><br><span class=\"line\">  &quot;graph&quot;: &quot;/opt/mydocker&quot;, # 修改数据的存放目录到/opt/mydocker/，原/var/lib/docker/</span><br><span class=\"line\">  &quot;insecure-registries&quot;: [&quot;10.0.0.100:5000&quot;],</span><br><span class=\"line\">  &quot;live-restore&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>重启生效，只对在此之后启动的容器生效</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# systemctl restart  docker.service</span><br></pre></td></tr></table></figure></div>\n\n\n\n<h2 id=\"13-Docker网络类型\"><a href=\"#13-Docker网络类型\" class=\"headerlink\" title=\"13. Docker网络类型\"></a>13. <strong>Docker网络类型</strong></h2><div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194739297.png\"/></div></div>\n\n\n\n<h3 id=\"13-1-docker的网络类型\"><a href=\"#13-1-docker的网络类型\" class=\"headerlink\" title=\"13.1. docker的网络类型\"></a>13.1. <strong>docker的网络类型</strong></h3><div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224195047745.png\"/></div></div>\n\n\n\n<p>Bridge默认docker网络隔离基于网络命名空间，在物理机上创建docker容器时会为每一个docker容器分配网络命名空间，并且把容器IP桥接到物理机的虚拟网桥上。</p>\n<h3 id=\"13-2-不为容器配置网络功能\"><a href=\"#13-2-不为容器配置网络功能\" class=\"headerlink\" title=\"13.2. 不为容器配置网络功能\"></a>13.2. <strong>不为容器配置网络功能</strong></h3><p>此模式下创建容器是不会为容器配置任何网络参数的，如：容器网卡、IP、通信路由等，全部需要自己去配置。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run  -it --network none busybox:latest  /bin/sh </span><br><span class=\"line\">/ # ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue </span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"13-3-与其他容器共享网络配置-Container）\"><a href=\"#13-3-与其他容器共享网络配置-Container）\" class=\"headerlink\" title=\"13.3. 与其他容器共享网络配置(Container）\"></a>13.3. <strong>与其他容器共享网络配置(Container）</strong></h3><p>此模式和host模式很类似，只是此模式创建容器共享的是其他容器的IP和端口而不是物理机，此模式容器自身是不会配置网络和端口，创建此模式容器进去后，你会发现里边的IP是你所指定的那个容器IP并且端口也是共享的，而且其它还是互相隔离的，如进程等。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run  -it --network container:mywordpress_db_1  busybox:latest  /bin/sh </span><br><span class=\"line\">/ # ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue </span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">105: eth0@if106: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class=\"line\">    link/ether 02:42:ac:12:00:03 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.18.0.3/16 brd 172.18.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"13-4-使用宿主机网络\"><a href=\"#13-4-使用宿主机网络\" class=\"headerlink\" title=\"13.4. 使用宿主机网络\"></a>13.4. <strong>使用宿主机网络</strong></h3><p>此模式创建的容器没有自己独立的网络命名空间，是和物理机共享一个Network Namespace，并且共享物理机的所有端口与IP，并且这个模式认为是不安全的。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAINTEXT\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker run  -it --network host  busybox:latest  /bin/shshell</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"13-5-查看网络列表\"><a href=\"#13-5-查看网络列表\" class=\"headerlink\" title=\"13.5. 查看网络列表\"></a>13.5. <strong>查看网络列表</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker network list </span><br><span class=\"line\">NETWORK ID          NAME                  DRIVER              SCOPE</span><br><span class=\"line\">b15e8a720d3b        bridge                bridge              local</span><br><span class=\"line\">345d65b4c2a0        host                  host                local</span><br><span class=\"line\">bc5e2a32bb55        mywordpress_default   bridge              local</span><br><span class=\"line\">ebf76eea91bb        none                  null                local</span><br></pre></td></tr></table></figure></div>\n\n\n\n<ul>\n<li><h3 id=\"用PIPEWORK为docker容器配置独立IP\"><a href=\"#用PIPEWORK为docker容器配置独立IP\" class=\"headerlink\" title=\"用PIPEWORK为docker容器配置独立IP\"></a><strong>用PIPEWORK为docker容器配置独立IP</strong></h3><ul>\n<li><p>参考文档：</p>\n<p>blog.csdn.net&#x2F;design321&#x2F;article&#x2F;details&#x2F;48264825</p>\n</li>\n<li><p>官方网站：</p>\n<p>github.com&#x2F;jpetazzo&#x2F;pipework</p>\n</li>\n<li><p>宿主环境：centos7.2</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>1、安装pipework</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/jpetazzo/pipework/archive/master.zip</span><br><span class=\"line\">unzip master.zip </span><br><span class=\"line\">cp pipework-master/pipework  /usr/local/bin/</span><br><span class=\"line\">chmod +x /usr/local/bin/pipework</span><br></pre></td></tr></table></figure></div>\n\n<p>2、配置桥接网卡</p>\n<p>安装桥接工具</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install bridge-utils.x86_64 -y</span><br></pre></td></tr></table></figure></div>\n\n<p>修改网卡配置，实现桥接</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改eth0配置，让br0实现桥接</span></span><br><span class=\"line\">[root@docker01 ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">NAME=eth0</span><br><span class=\"line\">DEVICE=eth0</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">BRIDGE=br0</span><br><span class=\"line\">[root@docker01 ~]# cat /etc/sysconfig/network-scripts/ifcfg-br0 </span><br><span class=\"line\">TYPE=Bridge</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">NAME=br0</span><br><span class=\"line\">DEVICE=br0</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">IPADDR=10.0.0.100</span><br><span class=\"line\">NETMASK=255.255.255.0</span><br><span class=\"line\">GATEWAY=10.0.0.254</span><br><span class=\"line\">DNS1=223.5.5.5</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启网络</span></span><br><span class=\"line\">[root@docker01 ~]# /etc/init.d/network restart</span><br></pre></td></tr></table></figure></div>\n\n<p>3、运行一个容器镜像测试：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipework br0 $(docker run -d -it -p 6880:80 --name  httpd_pw httpd) 10.0.0.220/24@10.0.0.254</span><br></pre></td></tr></table></figure></div>\n\n<p>在其他主机上测试端口及连通性</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# curl 10.0.0.220</span><br><span class=\"line\">&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class=\"line\">[root@docker01 ~]# ping 10.0.0.220 -c 1</span><br><span class=\"line\">PING 10.0.0.220 (10.0.0.220) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 10.0.0.220: icmp_seq=1 ttl=64 time=0.043 ms</span><br></pre></td></tr></table></figure></div>\n\n<p>4、再运行一个容器，设置网路类型为none：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipework br0 $(docker run -d -it --net=none --name test httpd:2.4) 10.0.0.221/24@10.0.0.254</span><br></pre></td></tr></table></figure></div>\n\n<p>进行访问测试</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# curl 10.0.0.221</span><br><span class=\"line\">&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>5、重启容器后需要再次指定：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipework br0 testduliip  172.16.146.113/24@172.16.146.1</span><br><span class=\"line\">pipework br0 testduliip01  172.16.146.112/24@172.16.146.1</span><br></pre></td></tr></table></figure></div>\n\n<p>Dcoker跨主机通信之overlay可以参考：</p>\n<p>cnblogs.com&#x2F;CloudMan6&#x2F;p&#x2F;7270551.html</p>\n<h3 id=\"13-6-Docker跨主机通信之macvlan\"><a href=\"#13-6-Docker跨主机通信之macvlan\" class=\"headerlink\" title=\"13.6. Docker跨主机通信之macvlan\"></a>13.6. <strong>Docker跨主机通信之macvlan</strong></h3><p>创建网络</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 ~]# docker network  create --driver macvlan  --subnet 10.1.0.0/24 --gateway 10.1.0.254 -o parent=eth0  macvlan_1</span><br><span class=\"line\">33a1f41dcc074f91b5bd45e7dfedabfb2b8ec82db16542f05213839a119b62ca</span><br></pre></td></tr></table></figure></div>\n\n<p>设置网卡为混杂模式</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip link set eth0 promisc on</span><br></pre></td></tr></table></figure></div>\n\n<p>创建使用macvlan网络容器</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker02 ~]# docker run  -it --network macvlan_1  --ip=10.1.0.222 busybox /b</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"14-docker企业级镜像仓库harbor\"><a href=\"#14-docker企业级镜像仓库harbor\" class=\"headerlink\" title=\"14. docker企业级镜像仓库harbor\"></a>14. <strong>docker企业级镜像仓库harbor</strong></h2><p>容器管理</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 harbor]# pwd</span><br><span class=\"line\">/opt/harbor</span><br><span class=\"line\">[root@docker01 harbor]# docker-compose stop</span><br></pre></td></tr></table></figure></div>\n\n<p>1、安装docker、docker-compose</p>\n<p>下载 harbor</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt &amp;&amp; https://storage.googleapis.com/harbor-releases/harbor-offline-installer-v1.3.0.tgz</span><br><span class=\"line\">tar xf harbor-offline-installer-v1.3.0.tgz</span><br></pre></td></tr></table></figure></div>\n\n<p>2、修改主机及web界面密码</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 harbor]# vim harbor.cfg </span><br><span class=\"line\">    ···</span><br><span class=\"line\">    hostname = 10.0.0.100</span><br><span class=\"line\">    harbor_admin_password = Harbor12345</span><br><span class=\"line\">    ···</span><br></pre></td></tr></table></figure></div>\n\n<p>3、执行安装脚本</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker01 harbor]# ./install.sh</span><br></pre></td></tr></table></figure></div>\n\n<p>浏览器访问 <a href=\"http://10.0.0.11/\">http://10.0.0.11</a></p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194739908.png\"/></div></div> \n\n<p>添加一个项目</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194740296.png\"/></div></div>\n\n<p>4、镜像推送到仓库的指定项目</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker02 ~]# docker  tag centos:6.8  10.0.0.100/clsn/centos6.8:1.0</span><br><span class=\"line\">[root@docker02 ~]#  </span><br><span class=\"line\">[root@docker02 ~]# docker images </span><br><span class=\"line\">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">busybox                     latest              5b0d59026729        8 days ago          1.15MB</span><br><span class=\"line\">10.0.0.100/clsn/centos6.8   1.0                 6704d778b3ba        2 months ago        195MB</span><br><span class=\"line\">centos                      6.8                 6704d778b3ba        2 months ago        195MB</span><br><span class=\"line\">[root@docker02 ~]# docker login 10.0.0.100</span><br><span class=\"line\">Username: admin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Login Succeeded</span><br></pre></td></tr></table></figure></div>\n\n<p>5、推送镜像</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SHELL\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@docker02 ~]# docker push 10.0.0.100/clsn/centos6.8 </span><br><span class=\"line\">The push refers to repository [10.0.0.100/clsn/centos6.8]</span><br><span class=\"line\">e00c9229b481: Pushing  13.53MB/194.5MB</span><br></pre></td></tr></table></figure></div>\n\n<p>6、在web界面里查看</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194740343.png\"/></div></div> \n\n<h3 id=\"14-1-使用容器的建议\"><a href=\"#14-1-使用容器的建议\" class=\"headerlink\" title=\"14.1. 使用容器的建议\"></a>14.1. <strong>使用容器的建议</strong></h3><ol>\n<li><p>不要以拆分方式进行应用程序发布</p>\n</li>\n<li><p>不要创建大型镜像</p>\n</li>\n<li><p>不要在单个容器中运行多个进程</p>\n</li>\n<li><p>不要再镜像内保存凭证，不要依赖IP地址</p>\n</li>\n<li><p>以非root用户运行进程</p>\n</li>\n<li><p>不要使用“最新”标签</p>\n</li>\n<li><p>不要利用运行中的容器创建镜像</p>\n</li>\n<li><p>不要使用单层镜像</p>\n</li>\n<li><p>不要将数据存放在容器内</p>\n</li>\n</ol>\n<h3 id=\"14-2-关于Docker容器的监控\"><a href=\"#14-2-关于Docker容器的监控\" class=\"headerlink\" title=\"14.2. 关于Docker容器的监控\"></a>14.2. <strong>关于Docker容器的监控</strong></h3><p><strong>容器的基本信息</strong></p>\n<ul>\n<li>包括容器的数量、ID、名称、镜像、启动命令、端口等信息</li>\n</ul>\n<p><strong>容器的运行状态</strong></p>\n<ul>\n<li>统计各状态的容器的数量，包括运行中、暂停、停止及异常退出</li>\n</ul>\n<p><strong>容器的用量信息</strong></p>\n<ul>\n<li>统计容器的CPU使用率、内存使用量、块设备I&#x2F;O使用量、网络使用情况等资源的使用情况</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li>redhat.com&#x2F;zh&#x2F;topics&#x2F;containers&#x2F;whats-a-linux-container</li>\n<li>redhat.com&#x2F;zh&#x2F;topics&#x2F;containers&#x2F;what-is-docker</li>\n<li>blog.51cto.com&#x2F;dihaifeng&#x2F;1713512</li>\n<li>cnblogs.com&#x2F;Bourbon-tian&#x2F;p&#x2F;6867796.html</li>\n<li>cnblogs.com&#x2F;CloudMan6&#x2F;p&#x2F;6806193.html</li>\n</ul>\n","text":"1. 容器简介1.1. 什么是 Linux 容器Linux容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。 [Figure]  ","raw":null,"photos":[],"categories":[{"name":"开发工具","slug":"开发工具","count":1,"path":"api/categories/开发工具.json"}],"tags":[{"name":"开发工具","slug":"开发工具","count":1,"path":"api/tags/开发工具.json"},{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"}]},{"title":"MySQL大表优化方案","slug":"MySQL大表优化方案","date":"2023-12-24T11:42:52.000Z","updated":"2023-12-24T11:42:52.000Z","comments":true,"pin":null,"path":"api/articles/MySQL大表优化方案.json","excerpt":"","keywords":null,"cover":"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194431917","content":"<p>当MySQL单表记录数过大时，增删改查性能都会急剧下降，可以参考以下步骤来优化：</p>\n<h3 id=\"单表优化\"><a href=\"#单表优化\" class=\"headerlink\" title=\"单表优化\"></a><strong>单表优化</strong></h3><p>除非单表数据未来会一直不断上涨，否则不要一开始就考虑拆分，拆分会带来逻辑、部署、运维的各种复杂度，一般以整型值为主的表在千万级以下，字符串为主的表在五百万以下是没有太大问题的。而事实上很多时候MySQL单表的性能依然有不少优化空间，甚至能正常支撑千万级以上的数据量：</p>\n<h4 id=\"字段\"><a href=\"#字段\" class=\"headerlink\" title=\"字段\"></a>字段</h4><ul>\n<li>尽量使用TINYINT、SMALLINT、MEDIUM_INT作为整数类型而非INT，如果非负则加上UNSIGNED</li>\n<li>VARCHAR的长度只分配真正需要的空间</li>\n<li>使用枚举或整数代替字符串类型</li>\n<li>尽量使用TIMESTAMP而非DATETIME，</li>\n<li>单表不要有太多字段，建议在20以内</li>\n<li>避免使用NULL字段，很难查询优化且占用额外索引空间</li>\n<li>用整型来存IP</li>\n</ul>\n<h4 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h4><ul>\n<li>索引并不是越多越好，要根据查询有针对性的创建，考虑在WHERE和ORDER BY命令上涉及的列建立索引，可根据EXPLAIN来查看是否用了索引还是全表扫描</li>\n<li>应尽量避免在WHERE子句中对字段进行NULL值判断，否则将导致引擎放弃使用索引而进行全表扫描</li>\n<li>值分布很稀少的字段不适合建索引，例如”性别”这种只有两三个值的字段</li>\n<li>字符字段只建前缀索引</li>\n<li>字符字段最好不要做主键</li>\n<li>不用外键，由程序保证约束</li>\n<li>尽量不用UNIQUE，由程序保证约束</li>\n<li>使用多列索引时主意顺序和查询条件保持一致，同时删除不必要的单列索引</li>\n</ul>\n<h4 id=\"查询SQL\"><a href=\"#查询SQL\" class=\"headerlink\" title=\"查询SQL\"></a>查询SQL</h4><ul>\n<li>可通过开启慢查询日志来找出较慢的SQL</li>\n<li>不做列运算：SELECT id WHERE age + 1 &#x3D; 10，任何对列的操作都将导致表扫描，它包括数据库教程函数、计算表达式等等，查询时要尽可能将操作移至等号右边</li>\n<li>sql语句尽可能简单：一条sql只能在一个cpu运算；大语句拆小语句，减少锁时间；一条大sql可以堵死整个库</li>\n<li>不用SELECT *</li>\n<li>OR改写成IN：OR的效率是n级别，IN的效率是log(n)级别，in的个数建议控制在200以内</li>\n<li>不用函数和触发器，在应用程序实现</li>\n<li>避免%xxx式查询</li>\n<li>少用JOIN</li>\n<li>使用同类型进行比较，比如用’123’和’123’比，123和123比</li>\n<li>尽量避免在WHERE子句中使用!&#x3D;或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描</li>\n<li>对于连续数值，使用BETWEEN不用IN：SELECT id FROM t WHERE num BETWEEN 1 AND 5</li>\n<li>列表数据不要拿全表，要使用LIMIT来分页，每页数量也不要太大</li>\n</ul>\n<h4 id=\"引擎\"><a href=\"#引擎\" class=\"headerlink\" title=\"引擎\"></a><strong>引擎</strong></h4><p>目前广泛使用的是MyISAM和InnoDB两种引擎：</p>\n<h5 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h5><p>MyISAM引擎是MySQL 5.1及之前版本的默认引擎，它的特点是：</p>\n<ul>\n<li>不支持行锁，读取时对需要读到的所有表加锁，写入时则对表加排它锁</li>\n<li>不支持事务</li>\n<li>不支持外键</li>\n<li>不支持崩溃后的安全恢复</li>\n<li>在表有读取查询的同时，支持往表中插入新纪录</li>\n<li>支持BLOB和TEXT的前500个字符索引，支持全文索引</li>\n<li>支持延迟更新索引，极大提升写入性能</li>\n<li>对于不会进行修改的表，支持压缩表，极大减少磁盘空间占用</li>\n</ul>\n<h5 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h5><p>InnoDB在MySQL 5.5后成为默认索引，它的特点是：</p>\n<ul>\n<li>支持行锁，采用MVCC来支持高并发</li>\n<li>支持事务</li>\n<li>支持外键</li>\n<li>支持崩溃后的安全恢复</li>\n<li>不支持全文索引</li>\n</ul>\n<p>总体来讲，MyISAM适合SELECT密集型的表，而InnoDB适合INSERT和UPDATE密集型的表</p>\n<h4 id=\"系统调优参数\"><a href=\"#系统调优参数\" class=\"headerlink\" title=\"系统调优参数\"></a><strong>系统调优参数</strong></h4><p>可以使用下面几个工具来做基准测试：</p>\n<ul>\n<li>sysbench：一个模块化，跨平台以及多线程的性能测试工具</li>\n<li>iibench-mysql：基于 Java 的 MySQL&#x2F;Percona&#x2F;MariaDB 索引进行插入性能测试工具</li>\n<li>tpcc-mysql：Percona开发的TPC-C测试工具</li>\n</ul>\n<p>具体的调优参数内容较多，具体可参考官方文档，这里介绍一些比较重要的参数：</p>\n<ul>\n<li>back_log：back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。也就是说，如果MySql的连接数据达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。可以从默认的50升至500</li>\n<li>wait_timeout：数据库连接闲置时间，闲置连接会占用内存资源。可以从默认的8小时减到半小时</li>\n<li>max_user_connection: 最大连接数，默认为0无上限，最好设一个合理上限</li>\n<li>thread_concurrency：并发线程数，设为CPU核数的两倍</li>\n<li>skip_name_resolve：禁止对外部连接进行DNS解析，消除DNS解析时间，但需要所有远程主机用IP访问</li>\n<li>key_buffer_size：索引块的缓存大小，增加会提升索引处理速度，对MyISAM表性能影响最大。对于内存4G左右，可设为256M或384M，通过查询show status like ‘key_read%’，保证key_reads &#x2F; key_read_requests在0.1%以下最好</li>\n<li>innodb_buffer_pool_size：缓存数据块和索引块，对InnoDB表性能影响最大。通过查询show status like ‘Innodb_buffer_pool_read%’，保证 (Innodb_buffer_pool_read_requests – Innodb_buffer_pool_reads) &#x2F; Innodb_buffer_pool_read_requests越高越好</li>\n<li>innodb_additional_mem_pool_size：InnoDB存储引擎用来存放数据字典信息以及一些内部数据结构的内存空间大小，当数据库对象非常多的时候，适当调整该参数的大小以确保所有数据都能存放在内存中提高访问效率，当过小的时候，MySQL会记录Warning信息到数据库的错误日志中，这时就需要该调整这个参数大小</li>\n<li>innodb_log_buffer_size：InnoDB存储引擎的事务日志所使用的缓冲区，一般来说不建议超过32MB</li>\n<li>query_cache_size：缓存MySQL中的ResultSet，也就是一条SQL语句执行的结果集，所以仅仅只能针对select语句。当某个表的数据有任何任何变化，都会导致所有引用了该表的select语句在Query Cache中的缓存数据失效。所以，当我们的数据变化非常频繁的情况下，使用Query Cache可能会得不偿失。根据命中率(Qcache_hits&#x2F;(Qcache_hits+Qcache_inserts)*100))进行调整，一般不建议太大，256MB可能已经差不多了，大型的配置型静态数据可适当调大.<br>可以通过命令show status like ‘Qcache_%’查看目前系统Query catch使用大小</li>\n<li>read_buffer_size：MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。如果对表的顺序扫描请求非常频繁，可以通过增加该变量值以及内存缓冲区大小提高其性能</li>\n<li>sort_buffer_size：MySql执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。如果不能，可以尝试增加sort_buffer_size变量的大小</li>\n<li>read_rnd_buffer_size：MySql的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。</li>\n<li>record_buffer：每个进行一个顺序扫描的线程为其扫描的每张表分配这个大小的一个缓冲区。如果你做很多顺序扫描，可能想要增加该值</li>\n<li>thread_cache_size：保存当前没有与连接关联但是准备为后面新的连接服务的线程，可以快速响应连接的线程请求而无需创建新的</li>\n<li>table_cache：类似于thread_cache_size，但用来缓存表文件，对InnoDB效果不大，主要用于MyISAM</li>\n</ul>\n<h4 id=\"升级硬件\"><a href=\"#升级硬件\" class=\"headerlink\" title=\"升级硬件\"></a><strong>升级硬件</strong></h4><p>Scale up，这个不多说了，根据MySQL是CPU密集型还是I&#x2F;O密集型，通过提升CPU和内存、使用SSD，都能显著提升MySQL性能</p>\n<h3 id=\"读写分离\"><a href=\"#读写分离\" class=\"headerlink\" title=\"读写分离\"></a>读写分离</h3><p>也是目前常用的优化，从库读主库写，一般不要采用双主或多主引入很多复杂性，尽量采用文中的其他方案来提高性能。同时目前很多拆分的解决方案同时也兼顾考虑了读写分离</p>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>缓存可以发生在这些层次：</p>\n<ul>\n<li>MySQL内部：在系统调优参数介绍了相关设置</li>\n<li>数据访问层：比如MyBatis针对SQL语句做缓存，而Hibernate可以精确到单个记录，这里缓存的对象主要是持久化对象Persistence Object</li>\n<li>应用服务层：这里可以通过编程手段对缓存做到更精准的控制和更多的实现策略，这里缓存的对象是数据传输对象Data Transfer Object</li>\n<li>Web层：针对web页面做缓存</li>\n<li>浏览器客户端：用户端的缓存</li>\n</ul>\n<p>可以根据实际情况在一个层次或多个层次结合加入缓存。这里重点介绍下服务层的缓存实现，目前主要有两种方式：</p>\n<ul>\n<li>直写式（Write Through）：在数据写入数据库后，同时更新缓存，维持数据库与缓存的一致性。这也是当前大多数应用缓存框架如Spring Cache的工作方式。这种实现非常简单，同步好，但效率一般。</li>\n<li>回写式（Write Back）：当有数据要写入数据库时，只会更新缓存，然后异步批量的将缓存数据同步到数据库上。这种实现比较复杂，需要较多的应用逻辑，同时可能会产生数据库与缓存的不同步，但效率非常高。</li>\n</ul>\n<h3 id=\"表分区\"><a href=\"#表分区\" class=\"headerlink\" title=\"表分区\"></a>表分区</h3><p>MySQL在5.1版引入的分区是一种简单的水平拆分，用户需要在建表的时候加上分区参数，对应用是透明的无需修改代码</p>\n<p>对用户来说，分区表是一个独立的逻辑表，但是底层由多个物理子表组成，实现分区的代码实际上是通过对一组底层表的对象封装，但对SQL层来说是一个完全封装底层的黑盒子。MySQL实现分区的方式也意味着索引也是按照分区的子表定义，没有全局索引</p>\n<p>用户的SQL语句是需要针对分区表做优化，SQL条件中要带上分区条件的列，从而使查询定位到少量的分区上，否则就会扫描全部分区，可以通过EXPLAIN PARTITIONS来查看某条SQL语句会落在那些分区上，从而进行SQL优化，如下图5条记录落在两个分区上：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SQL\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> explain partitions <span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"number\">1</span>) <span class=\"keyword\">from</span> user_partition <span class=\"keyword\">where</span> id <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> id <span class=\"operator\">|</span> select_type <span class=\"operator\">|</span> <span class=\"keyword\">table</span>          <span class=\"operator\">|</span> partitions <span class=\"operator\">|</span> type  <span class=\"operator\">|</span> possible_keys <span class=\"operator\">|</span> key     <span class=\"operator\">|</span> key_len <span class=\"operator\">|</span> <span class=\"keyword\">ref</span>  <span class=\"operator\">|</span> <span class=\"keyword\">rows</span> <span class=\"operator\">|</span> Extra                    <span class=\"operator\">|</span><span class=\"operator\">+</span><span class=\"comment\">----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span>  <span class=\"number\">1</span> <span class=\"operator\">|</span> SIMPLE      <span class=\"operator\">|</span> user_partition <span class=\"operator\">|</span> p1,p4      <span class=\"operator\">|</span> <span class=\"keyword\">range</span> <span class=\"operator\">|</span> <span class=\"keyword\">PRIMARY</span>       <span class=\"operator\">|</span> <span class=\"keyword\">PRIMARY</span> <span class=\"operator\">|</span> <span class=\"number\">8</span>       <span class=\"operator\">|</span> <span class=\"keyword\">NULL</span> <span class=\"operator\">|</span>    <span class=\"number\">5</span> <span class=\"operator\">|</span> <span class=\"keyword\">Using</span> <span class=\"keyword\">where</span>; <span class=\"keyword\">Using</span> index <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>分区的好处是：</p>\n<ul>\n<li>可以让单表存储更多的数据</li>\n<li>分区表的数据更容易维护，可以通过清楚整个分区批量删除大量数据，也可以增加新的分区来支持新插入的数据。另外，还可以对一个独立分区进行优化、检查、修复等操作</li>\n<li>部分查询能够从查询条件确定只落在少数分区上，速度会很快</li>\n<li>分区表的数据还可以分布在不同的物理设备上，从而搞笑利用多个硬件设备</li>\n<li>可以使用分区表赖避免某些特殊瓶颈，例如InnoDB单个索引的互斥访问、ext3文件系统的inode锁竞争</li>\n<li>可以备份和恢复单个分区</li>\n</ul>\n<p>分区的限制和缺点：</p>\n<ul>\n<li>一个表最多只能有1024个分区</li>\n<li>如果分区字段中有主键或者唯一索引的列，那么所有主键列和唯一索引列都必须包含进来</li>\n<li>分区表无法使用外键约束</li>\n<li>NULL值会使分区过滤无效</li>\n<li>所有分区必须使用相同的存储引擎</li>\n</ul>\n<p>分区的类型：</p>\n<ul>\n<li>RANGE分区：基于属于一个给定连续区间的列值，把多行分配给分区</li>\n<li>LIST分区：类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择</li>\n<li>HASH分区：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL中有效的、产生非负整数值的任何表达式</li>\n<li>KEY分区：类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数。必须有一列或多列包含整数值</li>\n</ul>\n<p>分区适合的场景有：</p>\n<ul>\n<li>最适合的场景数据的时间序列性比较强，则可以按时间来分区，如下所示：</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SQL\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> members (    </span><br><span class=\"line\">  firstname <span class=\"type\">VARCHAR</span>(<span class=\"number\">25</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,    </span><br><span class=\"line\">  lastname <span class=\"type\">VARCHAR</span>(<span class=\"number\">25</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,    </span><br><span class=\"line\">  username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,    </span><br><span class=\"line\">  email <span class=\"type\">VARCHAR</span>(<span class=\"number\">35</span>),    </span><br><span class=\"line\">  joined <span class=\"type\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">RANGE</span>( <span class=\"keyword\">YEAR</span>(joined) ) (    </span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> p0 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"number\">1960</span>),    </span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> p1 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"number\">1970</span>),    </span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> p2 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"number\">1980</span>),    </span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> p3 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"number\">1990</span>),    </span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> p4 <span class=\"keyword\">VALUES</span> LESS THAN MAXVALUE</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></div>\n\n<p>查询时加上时间范围条件效率会非常高，同时对于不需要的历史数据能很容的批量删除。</p>\n<ul>\n<li>如果数据有明显的热点，而且除了这部分数据，其他数据很少被访问到，那么可以将热点数据单独放在一个分区，让这个分区的数据能够有机会都缓存在内存中，查询时只访问一个很小的分区表，能够有效使用索引和缓存</li>\n</ul>\n<p>另外MySQL有一种早期的简单的分区实现 - 合并表（merge table），限制较多且缺乏优化，不建议使用，应该用新的分区机制来替代</p>\n<h3 id=\"垂直拆分\"><a href=\"#垂直拆分\" class=\"headerlink\" title=\"垂直拆分\"></a>垂直拆分</h3><p>垂直分库是根据数据库里面的数据表的相关性进行拆分，比如：一个数据库里面既存在用户数据，又存在订单数据，那么垂直拆分可以把用户数据放到用户库、把订单数据放到订单库。垂直分表是对数据表进行垂直拆分的一种方式，常见的是把一个多字段的大表按常用字段和非常用字段进行拆分，每个表里面的数据记录数一般情况下是相同的，只是字段不一样，使用主键关联</p>\n<p>比如原始的用户表是：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194431917\"/></div></div>\n\n<p>垂直拆分后是：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194432458\"/></div></div>\n\n<p>垂直拆分的优点是：</p>\n<ul>\n<li>可以使得行数据变小，一个数据块(Block)就能存放更多的数据，在查询时就会减少I&#x2F;O次数(每次查询时读取的Block 就少)</li>\n<li>可以达到最大化利用Cache的目的，具体在垂直拆分的时候可以将不常变的字段放一起，将经常改变的放一起</li>\n<li>数据维护简单</li>\n</ul>\n<p>缺点是：</p>\n<ul>\n<li>主键出现冗余，需要管理冗余列</li>\n<li>会引起表连接JOIN操作（增加CPU开销）可以通过在业务服务器上进行join来减少数据库压力</li>\n<li>依然存在单表数据量过大的问题（需要水平拆分）</li>\n<li>事务处理复杂</li>\n</ul>\n<h3 id=\"水平拆分\"><a href=\"#水平拆分\" class=\"headerlink\" title=\"水平拆分\"></a><strong>水平拆分</strong></h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>水平拆分是通过某种策略将数据分片来存储，分库内分表和分库两部分，每片数据会分散到不同的MySQL表或库，达到分布式的效果，能够支持非常大的数据量。</p>\n<p>前面的表分区本质上也是一种特殊的库内分表</p>\n<p>库内分表，仅仅是单纯的解决了单一表数据过大的问题，由于没有把表的数据分布到不同的机器上，因此对于减轻MySQL服务器的压力来说，并没有太大的作用，大家还是竞争同一个物理机上的IO、CPU、网络，这个就要通过分库来解决</p>\n<p>前面垂直拆分的用户表如果进行水平拆分，结果是：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194432665\"/></div></div>\n\n<p>实际情况中往往会是垂直拆分和水平拆分的结合，即将Users_A_M和Users_N_Z再拆成Users和UserExtras，这样一共四张表</p>\n<p>水平拆分的优点是:</p>\n<ul>\n<li>不存在单库大数据和高并发的性能瓶颈</li>\n<li>应用端改造较少</li>\n<li>提高了系统的稳定性和负载能力</li>\n</ul>\n<p>缺点是：</p>\n<ul>\n<li>分片事务一致性难以解决</li>\n<li>跨节点Join性能差，逻辑复杂</li>\n<li>数据多次扩展难度跟维护量极大</li>\n</ul>\n<h4 id=\"分片原则\"><a href=\"#分片原则\" class=\"headerlink\" title=\"分片原则\"></a>分片原则</h4><ul>\n<li>能不分就不分，参考单表优化</li>\n<li>分片数量尽量少，分片尽量均匀分布在多个数据结点上，因为一个查询SQL跨分片越多，则总体性能越差，虽然要好于所有数据在一个分片的结果，只在必要的时候进行扩容，增加分片数量</li>\n<li>分片规则需要慎重选择做好提前规划，分片规则的选择，需要考虑数据的增长模式，数据的访问模式，分片关联性问题，以及分片扩容问题，最近的分片策略为范围分片，枚举分片，一致性Hash分片，这几种分片都有利于扩容</li>\n<li>尽量不要在一个事务中的SQL跨越多个分片，分布式事务一直是个不好处理的问题</li>\n<li>查询条件尽量优化，尽量避免Select * 的方式，大量数据结果集下，会消耗大量带宽和CPU资源，查询尽量避免返回大量结果集，并且尽量为频繁使用的查询语句建立索引。</li>\n<li>通过数据冗余和表分区赖降低跨库Join的可能</li>\n</ul>\n<p>这里特别强调一下分片规则的选择问题，如果某个表的数据有明显的时间特征，比如订单、交易记录等，则他们通常比较合适用时间范围分片，因为具有时效性的数据，我们往往关注其近期的数据，查询条件中往往带有时间字段进行过滤，比较好的方案是，当前活跃的数据，采用跨度比较短的时间段进行分片，而历史性的数据，则采用比较长的跨度存储。</p>\n<p>总体上来说，分片的选择是取决于最频繁的查询SQL的条件，因为不带任何Where语句的查询SQL，会遍历所有的分片，性能相对最差，因此这种SQL越多，对系统的影响越大，所以我们要尽量避免这种SQL的产生。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>由于水平拆分牵涉的逻辑比较复杂，当前也有了不少比较成熟的解决方案。这些方案分为两大类：客户端架构和代理架构。</p>\n<h5 id=\"客户端架构\"><a href=\"#客户端架构\" class=\"headerlink\" title=\"客户端架构\"></a>客户端架构</h5><p>通过修改数据访问层，如JDBC、Data Source、MyBatis，通过配置来管理多个数据源，直连数据库，并在模块内完成数据的分片整合，一般以Jar包的方式呈现</p>\n<p>这是一个客户端架构的例子：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640.png\"/></div></div>\n\n<p>可以看到分片的实现是和应用服务器在一起的，通过修改Spring JDBC层来实现</p>\n<p>客户端架构的优点是：</p>\n<ul>\n<li>应用直连数据库，降低外围系统依赖所带来的宕机风险</li>\n<li>集成成本低，无需额外运维的组件</li>\n</ul>\n<p>缺点是：</p>\n<ul>\n<li>限于只能在数据库访问层上做文章，扩展性一般，对于比较复杂的系统可能会力不从心</li>\n<li>将分片逻辑的压力放在应用服务器上，造成额外风险</li>\n</ul>\n<h5 id=\"代理架构\"><a href=\"#代理架构\" class=\"headerlink\" title=\"代理架构\"></a>代理架构</h5><p>通过独立的中间件来统一管理所有数据源和数据分片整合，后端数据库集群对前端应用程序透明，需要独立部署和运维代理组件</p>\n<p>这是一个代理架构的例子：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194433338.png\"/></div></div>\n\n<p>代理组件为了分流和防止单点，一般以集群形式存在，同时可能需要Zookeeper之类的服务组件来管理</p>\n<p>代理架构的优点是：</p>\n<ul>\n<li>能够处理非常复杂的需求，不受数据库访问层原来实现的限制，扩展性强</li>\n<li>对于应用服务器透明且没有增加任何额外负载</li>\n</ul>\n<p>缺点是：</p>\n<ul>\n<li>需部署和运维独立的代理中间件，成本高</li>\n<li>应用需经过代理来连接数据库，网络上多了一跳，性能有损失且有额外风险</li>\n</ul>\n<h5 id=\"各方案比较\"><a href=\"#各方案比较\" class=\"headerlink\" title=\"各方案比较\"></a>各方案比较</h5><table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">出品方</th>\n<th align=\"left\">架构模型</th>\n<th align=\"left\">支持数据库</th>\n<th align=\"left\">分库</th>\n<th align=\"left\">分表</th>\n<th align=\"left\">读写分离</th>\n<th align=\"left\">外部依赖</th>\n<th align=\"left\">是否开源</th>\n<th align=\"left\">实现语言</th>\n<th align=\"left\">支持语言</th>\n<th align=\"left\">最后更新</th>\n<th align=\"left\">Github星数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">MySQL Fabric</td>\n<td align=\"left\">MySQL官方</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">python</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">4个月前</td>\n<td align=\"left\">35</td>\n</tr>\n<tr>\n<td align=\"left\">Cobar</td>\n<td align=\"left\">阿里巴巴</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">两年前</td>\n<td align=\"left\">1287</td>\n</tr>\n<tr>\n<td align=\"left\">Cobar Client</td>\n<td align=\"left\">阿里巴巴</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">三年前</td>\n<td align=\"left\">344</td>\n</tr>\n<tr>\n<td align=\"left\">TDDL</td>\n<td align=\"left\">淘宝</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">Diamond</td>\n<td align=\"left\">只开源部分</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">未知</td>\n<td align=\"left\">519</td>\n</tr>\n<tr>\n<td align=\"left\">Atlas</td>\n<td align=\"left\">奇虎360</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">C</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">10个月前</td>\n<td align=\"left\">1941</td>\n</tr>\n<tr>\n<td align=\"left\">Heisenberg</td>\n<td align=\"left\">百度熊照</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">2个月前</td>\n<td align=\"left\">197</td>\n</tr>\n<tr>\n<td align=\"left\">TribeDB</td>\n<td align=\"left\">个人</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">NodeJS</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">3个月前</td>\n<td align=\"left\">126</td>\n</tr>\n<tr>\n<td align=\"left\">ShardingJDBC</td>\n<td align=\"left\">当当</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">当天</td>\n<td align=\"left\">1144</td>\n</tr>\n<tr>\n<td align=\"left\">Shark</td>\n<td align=\"left\">个人</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">两天前</td>\n<td align=\"left\">84</td>\n</tr>\n<tr>\n<td align=\"left\">KingShard</td>\n<td align=\"left\">个人</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Golang</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">两天前</td>\n<td align=\"left\">1836</td>\n</tr>\n<tr>\n<td align=\"left\">OneProxy</td>\n<td align=\"left\">平民软件</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">否</td>\n<td align=\"left\">未知</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">未知</td>\n<td align=\"left\">未知</td>\n</tr>\n<tr>\n<td align=\"left\">MyCat</td>\n<td align=\"left\">社区</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">两天前</td>\n<td align=\"left\">1270</td>\n</tr>\n<tr>\n<td align=\"left\">Vitess</td>\n<td align=\"left\">Youtube</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Golang</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">当天</td>\n<td align=\"left\">3636</td>\n</tr>\n<tr>\n<td align=\"left\">Mixer</td>\n<td align=\"left\">个人</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Golang</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">9个月前</td>\n<td align=\"left\">472</td>\n</tr>\n<tr>\n<td align=\"left\">JetPants</td>\n<td align=\"left\">Tumblr</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Ruby</td>\n<td align=\"left\">Ruby</td>\n<td align=\"left\">10个月前</td>\n<td align=\"left\">957</td>\n</tr>\n<tr>\n<td align=\"left\">HibernateShard</td>\n<td align=\"left\">Hibernate</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">4年前</td>\n<td align=\"left\">57</td>\n</tr>\n<tr>\n<td align=\"left\">MybatisShard</td>\n<td align=\"left\">MakerSoft</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">11个月前</td>\n<td align=\"left\">119</td>\n</tr>\n<tr>\n<td align=\"left\">Gizzard</td>\n<td align=\"left\">Twitter</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">3年前</td>\n<td align=\"left\">2087</td>\n</tr>\n</tbody></table>\n<p>如此多的方案，如何进行选择？可以按以下思路来考虑：</p>\n<ol>\n<li>确定是使用代理架构还是客户端架构。中小型规模或是比较简单的场景倾向于选择客户端架构，复杂场景或大规模系统倾向选择代理架构</li>\n<li>具体功能是否满足，比如需要跨节点ORDER BY，那么支持该功能的优先考虑</li>\n<li>不考虑一年内没有更新的产品，说明开发停滞，甚至无人维护和技术支持</li>\n<li>最好按大公司-&gt;社区-&gt;小公司-&gt;个人这样的出品方顺序来选择</li>\n<li>选择口碑较好的，比如github星数、使用者数量质量和使用者反馈</li>\n<li>开源的优先，往往项目有特殊需求可能需要改动源代码</li>\n</ol>\n<p>按照上述思路，推荐以下选择：</p>\n<ul>\n<li>客户端架构：ShardingJDBC</li>\n<li>代理架构：MyCat或者Atlas</li>\n</ul>\n<h3 id=\"兼容MySQL且可水平扩展的数据库\"><a href=\"#兼容MySQL且可水平扩展的数据库\" class=\"headerlink\" title=\"兼容MySQL且可水平扩展的数据库\"></a><strong>兼容MySQL且可水平扩展的数据库</strong></h3><p>目前也有一些开源数据库兼容MySQL协议，如：</p>\n<ul>\n<li>TiDB</li>\n<li>Cubrid</li>\n</ul>\n<p>但其工业品质和MySQL尚有差距，且需要较大的运维投入，如果想将原始的MySQL迁移到可水平扩展的新数据库中，可以考虑一些云数据库：</p>\n<ul>\n<li>阿里云PetaData</li>\n<li>阿里云OceanBase</li>\n<li>腾讯云DCDB</li>\n</ul>\n<h3 id=\"NoSQL\"><a href=\"#NoSQL\" class=\"headerlink\" title=\"NoSQL\"></a>NoSQL</h3><p>在MySQL上做Sharding是一种戴着镣铐的跳舞，事实上很多大表本身对MySQL这种RDBMS的需求并不大，并不要求ACID，可以考虑将这些表迁移到NoSQL，彻底解决水平扩展问题，例如：</p>\n<ul>\n<li>日志类、监控类、统计类数据</li>\n<li>非结构化或弱结构化数据</li>\n<li>对事务要求不强，且无太多关联操作的数据</li>\n</ul>\n","text":"当MySQL单表记录数过大时，增删改查性能都会急剧下降，可以参考以下步骤来优化：单表优化除非单表数据未来会一直不断上涨，否则不要一开始就考虑拆分，拆分会带来逻辑、部署、运维的各种复杂度，一般以整型值为主的表在千万级以下，字符串为主的表在五百万以下是没有太大问题的。而事实上很多时候","raw":null,"photos":[],"categories":[{"name":"DataBase","slug":"DataBase","count":1,"path":"api/categories/DataBase.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"},{"name":"DataBase","slug":"DataBase","count":1,"path":"api/tags/DataBase.json"}]},{"title":"MyBatis 的执行流程","slug":"MyBatis-的执行流程！","date":"2023-12-24T08:48:35.000Z","updated":"2023-12-24T11:19:17.000Z","comments":true,"pin":null,"path":"api/articles/MyBatis-的执行流程！.json","excerpt":"","keywords":null,"cover":"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183435294.png","content":"<h3 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h3><p>在MyBatis中，利用编程式进行数据查询，主要就是下面几行代码：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">SqlSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> sqlSessionFactory.openSession();</span><br><span class=\"line\"><span class=\"type\">UserMapper</span> <span class=\"variable\">userMapper</span> <span class=\"operator\">=</span> session.getMapper(UserMapper.class);</span><br><span class=\"line\">List&lt;LwUser&gt; userList = userMapper.listUserByUserName(<span class=\"string\">&quot;孤狼1号&quot;</span>);</span><br></pre></td></tr></table></figure></div>\n\n<p>第一行是获取一个<code>SqlSession</code>对象在上一篇文章分析过了，第二行就是获取<code>UserMapper</code>接口，第三行一行代码就实现了整个查询语句的流程，接下来我们就来仔细分析一下第二和第三步。</p>\n<h3 id=\"获取Mapper接口-getMapper\"><a href=\"#获取Mapper接口-getMapper\" class=\"headerlink\" title=\"获取Mapper接口(getMapper)\"></a>获取Mapper接口(getMapper)</h3><p>第二步是通过<code>SqlSession</code>对象是获取一个<code>Mapper</code>接口，这个流程还是相对简单的，下面就是我们调用<code>session.getMapper</code>方法之后的运行时序图：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183435294.png\" alt=\"image-20231224183435294\"></p>\n<p>1、在调用<code>getMapper</code>之后，会去<code>Configuration</code>对象中获取<code>Mapper</code>对象，因为在项目启动的时候就会把<code>Mapper</code>接口加载并解析存储到<code>Configuration</code>对象</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224183500210\" alt=\"图片\"></p>\n<p>2、通过<code>Configuration</code>对象中的<code>MapperRegistry</code>对象属性，继续调用<code>getMapper</code>方法</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184636165.png\" alt=\"image-20231224184636165\"></p>\n<p>3、根据<code>type</code>类型，从<code>MapperRegistry</code>对象中的<code>knownMappers</code>获取到当前类型对应的代理工厂类，然后通过代理工厂类生成对应<code>Mapper</code>的代理类</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224183500394\" alt=\"图片\"></p>\n<p>4、最终获取到我们接口对应的代理类<code>MapperProxy</code>对象</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224183500536\" alt=\"图片\"></p>\n<p>而<code>MapperProxy</code>可以看到实现了<code>InvocationHandler</code>，使用的就是JDK动态代理。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224183500588\" alt=\"图片\"></p>\n<p>至此获取<code>Mapper</code>流程结束了，那么就有一个问题了<code>MapperRegistry</code>对象内的<code>HashMap</code>属性<code>knownMappers</code>中的数据是什么时候存进去的呢？</p>\n<h3 id=\"Mapper接口和映射文件是何时关联的\"><a href=\"#Mapper接口和映射文件是何时关联的\" class=\"headerlink\" title=\"Mapper接口和映射文件是何时关联的\"></a>Mapper接口和映射文件是何时关联的</h3><p>Mapper接口及其映射文件是在加载mybatis-config配置文件的时候存储进去的，下面就是时序图：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183721291.png\" alt=\"image-20231224183721291\"></p>\n<p>1、首先我们会手动调用<code>SqlSessionFactoryBuilder</code>方法中的<code>build()</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183809123.png\" alt=\"image-20231224183809123\"></p>\n<p>2、然后会构造一个<code>XMLConfigBuilder</code>对象，并调用其<code>parse</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183849737.png\" alt=\"image-20231224183849737\"></p>\n<p>3、然后会继续调用自己的<code>parseConfiguration</code>来解析配置文件，这里面就会分别去解析全局配置文件的顶级节点，其他的我们先不看，我们直接看最后解析<code>mappers</code>节点</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183900371.png\" alt=\"image-20231224183900371\"></p>\n<p>4、继续调用自己的<code>mapperElement</code>来解析<code>mappers</code>文件（这个方法比较长，为了方便截图完整，所以把字体缩小了1号），可以看到，这里面分了四种方式来解析<code>mappers</code>节点的配置，对应了4种<code>mapper</code>配置方式，而其中红框内的两种方式是直接配置的<code>xml</code>映射文件，蓝框内的两种方式是解析直接配置<code>Mapper</code>接口的方式，从这里也可以说明，不论配置哪种方式，最终<code>MyBatis</code>都会将<code>xml</code>映射文件和<code>Mapper</code>接口进行关联。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183914717.png\" alt=\"image-20231224183914717\"></p>\n<p>5、我们先看第2种和第3中（直接配置<code>xml</code>映射文件的解析方式），会构建一个<code>XMLMapperBuilder</code>对象并调用其<code>parse</code>方法。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184656478.png\" alt=\"image-20231224184656478\"></p>\n<p>当然，这个还是会被解析的，后面执行查询的时候会再次通过不断遍历去全部解析完毕，不过有一点需要注意的是，互相引用这种是会导致解析失败报错的，所以在开发过程中我们应该避免循环依赖的产生。</p>\n<p>6、解析完映射文件之后，调用自身方法<code>bindMapperForNamespace</code>，开始绑定<code>Mapper</code>接口和映射文件：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184043173.png\" alt=\"image-20231224184043173\"></p>\n<p>7、调用<code>Configuration</code>对象的<code>addMapper</code></p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184056630.png\" alt=\"image-20231224184056630\"></p>\n<p>8、调用<code>Configuration</code>对象的属性<code>MapperRegistry</code>内的<code>addMapper</code>方法，这个方法就是正式将<code>Mapper</code>接口添加到<code>knownMappers</code>，所以上面<code>getMapper</code>可以直接获取：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184105761.png\" alt=\"image-20231224184105761\"></p>\n<p>到这里我们就完成了<code>Mapper</code>接口和<code>xml</code>映射文件的绑定</p>\n<p>9、注意上面红框里面的代码，又调用了一次<code>parse</code>方法，这个<code>parse</code>方法主要是解析注解，比如下面的语句：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Select(&quot;select * from lw_user&quot;)</span></span><br><span class=\"line\">List&lt;LwUser&gt; <span class=\"title function_\">listAllUser</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure></div>\n\n<p>所以这个方法里面会去解析<code>@Selec</code>t等注解，需要注意的是，<code>parse</code>方法里面会同时再解析一次<code>xml</code>映射文件，因为上面我们提到了<code>mappers</code>节点有4种配置方式，其中两种配置的是<code>Mapper</code>接口，而配置<code>Mapper</code>接口会直接先调用<code>addMapper</code>接口，并没有解析映射文件，所以进入注解解析方法<code>parse</code>之中会需要再尝试解析一次<code>XML</code>映射文件。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184119352.png\" alt=\"image-20231224184119352\"></p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184725124.png\" alt=\"image-20231224184725124\"></p>\n<p>解析完成之后，还会对<code>Mapper</code>接口中的方法进行解析，并将每个方法的全限定类名作为<code>key</code>存入存入<code>Configuration</code>中的<code>mappedStatements</code>属性。</p>\n<p>需要指出的是，这里存储的时候，同一个<code>value</code>会存储2次，**一个全限定名作为<code>key</code>，另一个就是只用方法名(<code>sql</code>语句的<code>id</code>)来作为<code>key</code>**：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224183637858\" alt=\"图片\"></p>\n<p>所以最终<code>mappedStatements</code>会是下面的情况：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184738684.png\" alt=\"image-20231224184738684\"></p>\n<p>事实上如果我们通过接口的方式来编程的话，最后来<code>getStatement</code>的时候，都是根据全限定名来取的，<strong>所以即使有重名对我们也没有影响，而之所以要这么做的原因其实还是为了兼容早期版本的用法，那就是不通过接口，而是直接通过方法名的方式来进行查询</strong>：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session.selectList(<span class=\"string\">&quot;com.lonelyWolf.mybatis.mapper.UserMapper.listAllUser&quot;</span>);</span><br></pre></td></tr></table></figure></div>\n\n<p>这里如果<code>shortName</code>没有重复的话，是可以直接通过简写来查询的：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session.selectList(<span class=\"string\">&quot;listAllUser&quot;</span>);</span><br></pre></td></tr></table></figure></div>\n\n<p>但是通过简写来查询一旦shortName重复了就会抛出以下异常：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224183638060\" alt=\"图片\"></p>\n<p>这里的异常其实就是<code>StrickMap</code>的<code>get</code>方法抛出来的：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184215812.png\" alt=\"image-20231224184215812\"></p>\n<h3 id=\"sql执行流程分析\"><a href=\"#sql执行流程分析\" class=\"headerlink\" title=\"sql执行流程分析\"></a>sql执行流程分析</h3><p>上面我们讲到了，获取到的<code>Mapper</code>接口实际上被包装成为了代理对象，所以我们执行查询语句肯定是执行的代理对象方法，接下来我们就以<code>Mapper</code>接口的代理对象<code>MapperProxy</code>来分析一下查询流程。</p>\n<p>整个<code>sql</code>执行流程可以分为两大步骤：</p>\n<ul>\n<li>一、寻找<code>sql</code></li>\n<li>二、执行<code>sql</code>语句</li>\n</ul>\n<h4 id=\"寻找sql\"><a href=\"#寻找sql\" class=\"headerlink\" title=\"寻找sql\"></a>寻找<code>sql</code></h4><p>首先还是来看一下寻找<code>sql</code>语句的时序图：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184226447.png\" alt=\"image-20231224184226447\"></p>\n<p>1、了解代理模式的应该都知道，调用被代理对象的方法之后实际上执行的就是代理对象的<code>invoke</code>方法</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184238250.png\" alt=\"image-20231224184238250\"></p>\n<p>2、因为我们这里并没有调用<code>Object</code>类中的方法，所以肯定走的<code>else</code>。<code>else</code>中会继续调用<code>MapperProxy</code>内部类<code>MapperMethodInvoker</code>中的方法<code>cachedInvoker</code>，这里面会有一个判断，判断一下我们是不是<code>default</code>方法，因为<code>Jdk1.8</code>中接口中可以新增<code>default</code>方法，而<code>default</code>方法是并不是一个抽象方法，所以也需要特殊处理（刚开始会从缓存里面取，缓存相关知识我们这里先不讲，后面会单独写一篇来分析一下缓存)）。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184249440.png\" alt=\"image-20231224184249440\"></p>\n<p>3、接下来，是构造一个<code>MapperMethod</code>对象,这个对象封装了<code>Mapper</code>接口中对应的方法信息以及对应的<code>sql</code>语句信息：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184259658.png\" alt=\"image-20231224184259658\"></p>\n<p>这里面就会把要执行的<code>sql</code>语句，请求参数，方法返回值全部解析封装成<code>MapperMethod</code>对象，然后后面就可以开始准备执行<code>sql</code>语句了</p>\n<h4 id=\"执行sql语句\"><a href=\"#执行sql语句\" class=\"headerlink\" title=\"执行sql语句\"></a>执行<code>sql</code>语句</h4><p>还是先来看一下执行<code>Sql</code>语句的时序图：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184309570.png\" alt=\"image-20231224184309570\"></p>\n<p>1、我们继续上面的流程进入<code>execute</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184318355.png\" alt=\"image-20231224184318355\"></p>\n<p>2、这里面会根据语句类型以及返回值类型来决定如何执行，本人这里返回的是一个集合，故而我们进入<code>executeForMany</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184325395.png\" alt=\"image-20231224184325395\"></p>\n<p>3、这里面首先会将前面存好的参数进行一次转换，然后绕了这么一圈，回到了起点<code>SqlSession</code>对象，继续调用<code>selectList</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184804748.png\" alt=\"image-20231224184804748\"></p>\n<p>3、接下来又讲流程委派给了<code>Execute</code>去执行<code>query</code>方法，最终又会去调用<code>queryFromDatabase</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184338444.png\" alt=\"image-20231224184338444\"></p>\n<p>4、到这里之后，终于要进入正题了，一般带了这种<code>do</code>开头的方法就是真正做事的，<code>Spring</code>中很多地方也是采用的这种命名方式：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184347582.png\" alt=\"image-20231224184347582\"></p>\n<p>注意，前面我们的<code>sql</code>语句还是占位符的方式，并没有将参数设置进去，所以这里在<code>return</code>上面一行调用<code>prepareStatement</code>方法创建<code>Statement</code>对象的时候会去设置参数，替换占位符。参数如何设置我们先跳过，等把流程执行完了我们在单独分析参数映射和结果集映射。</p>\n<p>5、继续进入<code>PreparedStatementHandler</code>对象的<code>query</code>方法，可以看到，这一步就是调用了<code>jdbc</code>操作对象<code>PreparedStatement</code>中的<code>execute</code>方法，最后一步就是转换结果集然后返回。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184357517.png\" alt=\"image-20231224184357517\"></p>\n<p>到这里，整个<code>SQL</code>语句执行流程分析就结束了，中途有一些参数的存储以及转换并没有深入进去，因为参数的转换并不是核心，只要清楚整个数据的流转流程，我们自己也可以有自己的实现方式，只要存起来最后我们能重新解析读出来就行。</p>\n<h3 id=\"参数映射\"><a href=\"#参数映射\" class=\"headerlink\" title=\"参数映射\"></a>参数映射</h3><p>现在我们来看一下上面在执行查询之前参数是如何进行设置的，我们先进入<code>prepareStatement</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184433823.png\" alt=\"image-20231224184433823\"></p>\n<p>我们发现，最终是调用了<code>StatementHandler</code>中的<code>parameterize</code>进行参数设置，接下来这里为了节省篇幅，我们不会一步步点进去，直接进入设置参数的方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181859574.png\" alt=\"image-20231224181859574\"></p>\n<p>上面的<code>BaseTypeHandler</code>是一个抽象类，<code>setNonNullParameter</code>并没有实现，都是交给子类去实现，而每一个子类就是对应了数据库的一种类型。下图中就是默认的一个子类<code>StringTypeHandler</code>，里面没什么其他逻辑，就是设置参数。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181909339.png\" alt=\"image-20231224181909339\"></p>\n<p>可以看到<code>String</code>里面调用了<code>jdbc</code>中的<code>setString</code>方法，而如果是<code>int</code>也会调用<code>setInt</code>方法。<br>看到这些子类如果大家之前阅读过我前面讲的<code>MyBatis</code>参数配置，应该就很明显可以知道，这些子类就是系统默认提供的一些<code>typeHandler</code>。而这些默认的<code>typeHandler</code>会默认被注册并和<code>Java</code>对象进行绑定：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181916896.png\" alt=\"image-20231224181916896\"></p>\n<p>正是因为<code>MyBatis</code>中默认提供了常用数据类型的映射，所以我们写<code>Sql</code>的时候才可以省略参数映射关系，可以直接采用下面的方式，系统可以根据我们参数的类型，自动选择合适的<code>typeHander</code>进行映射：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SQL\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> user_id,user_name <span class=\"keyword\">from</span> lw_user <span class=\"keyword\">where</span> user_name<span class=\"operator\">=</span>#&#123;userName&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>上面这条语句实际上和下面这条是等价的：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SQL\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> user_id,user_name <span class=\"keyword\">from</span> lw_user <span class=\"keyword\">where</span> user_name<span class=\"operator\">=</span>#&#123;userName,jdbcType<span class=\"operator\">=</span><span class=\"type\">VARCHAR</span>&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>或者说我们可以直接指定<code>typeHandler</code>：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SQL\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> user_id,user_name <span class=\"keyword\">from</span> lw_user <span class=\"keyword\">where</span> user_name <span class=\"operator\">=</span> #&#123;userName,jdbcType<span class=\"operator\">=</span><span class=\"type\">VARCHAR</span>,typeHandler<span class=\"operator\">=</span>org.apache.ibatis.type.IntegerTypeHandler&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>这里因为我们配置了<code>typeHandler</code>，所以会优先以配置的<code>typeHandler</code>为主不会再去读取默认的映射，如果类型不匹配就会直接报错了：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181927367.png\" alt=\"image-20231224181927367\"></p>\n<p>看到这里很多人应该就知道了，如果我们自己自定义一个<code>typeHandler</code>，然后就可以配置成我们自己的自定义类。<br>所以接下来就让我们看看如何自定义一个<code>typeHandler</code></p>\n<h4 id=\"自定义typeHandler\"><a href=\"#自定义typeHandler\" class=\"headerlink\" title=\"自定义typeHandler\"></a>自定义<code>typeHandler</code></h4><p>自定义<code>typeHandler</code>需要实现<code>BaseTypeHandler</code>接口，<code>BaseTypeHandler</code>有4个方法，包括结果集映射，为了节省篇幅，代码没有写上来：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lonelyWolf.mybatis.typeHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.CallableStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.PreparedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTypeHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseTypeHandler</span>&lt;String&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNonNullParameter</span><span class=\"params\">(PreparedStatement preparedStatement, <span class=\"type\">int</span> index, String param, JdbcType jdbcType)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;自定义typeHandler生效了&quot;</span>);</span><br><span class=\"line\">        preparedStatement.setString(index,param);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>然后我们改写一下上面的查询语句：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SQL\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> user_id,user_name <span class=\"keyword\">from</span> lw_user <span class=\"keyword\">where</span> user_name<span class=\"operator\">=</span>#&#123;userName,jdbcType<span class=\"operator\">=</span><span class=\"type\">VARCHAR</span>,typeHandler<span class=\"operator\">=</span>com.lonelyWolf.mybatis.typeHandler.MyTypeHandler&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>然后执行，可以看到，自定义的typeHandler生效了：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181936005.png\" alt=\"image-20231224181936005\"></p>\n<h3 id=\"结果集映射\"><a href=\"#结果集映射\" class=\"headerlink\" title=\"结果集映射\"></a>结果集映射</h3><p>接下来让我们看看结果集的映射，回到上面执行sql流程的最后一个方法：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resultSetHandler.handleResultSets(ps)</span><br></pre></td></tr></table></figure></div>\n\n<p>结果集映射里面的逻辑相对来说还是挺复杂的，因为要考虑到非常多的情况，这里我们就不会去深究每一个细节，直接进入到正式解析结果集的代码，下面的5个代码片段就是一个简单的但是完整的解析流程：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181944730.png\" alt=\"image-20231224181944730\"></p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181951520.png\" alt=\"image-20231224181951520\"></p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181959899.png\" alt=\"image-20231224181959899\"></p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224182008233.png\" alt=\"image-20231224182008233\"></p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224182016140.png\" alt=\"image-20231224182016140\"></p>\n<p>从上面的代码片段我们也可以看到，实际上解析结果集还是很复杂的，就如我们上一篇介绍的复杂查询一样，一个查询可以不断嵌套其他查询，还有延迟加载等等一些复杂的特性<br>的处理，所以逻辑分支是有很多，但是不管怎么处理，最后的核心还是上面的一套流程，最终还是会调用<code>typeHandler</code>来获取查询到的结果。</p>\n<p>是的，你没猜错，这个就是上面我们映射参数的<code>typeHandler</code>，因为<code>typeHandler</code>里面不只是一个设置参数方法，还有获取结果集方法(上面设置参数的时候省略了)。</p>\n<h4 id=\"自定义typeHandler结果集\"><a href=\"#自定义typeHandler结果集\" class=\"headerlink\" title=\"自定义typeHandler结果集\"></a>自定义<code>typeHandler</code>结果集</h4><p>所以说我们还是用上面那个<code>MyTypeHandler</code> 例子来重写一下取值方法(省略了设置参数方法)：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lonelyWolf.mybatis.typeHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.CallableStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.PreparedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTypeHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseTypeHandler</span>&lt;String&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNonNullParameter</span><span class=\"params\">(PreparedStatement preparedStatement, <span class=\"type\">int</span> index, String param, JdbcType jdbcType)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;设置参数-&gt;自定义typeHandler生效了&quot;</span>);</span><br><span class=\"line\">        preparedStatement.setString(index,param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据列名获取结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getNullableResult</span><span class=\"params\">(ResultSet resultSet, String columnName)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;根据columnName获取结果-&gt;自定义typeHandler生效了&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultSet.getString(columnName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据列的下标来获取结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getNullableResult</span><span class=\"params\">(ResultSet resultSet, <span class=\"type\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;根据columnIndex获取结果-&gt;自定义typeHandler生效了&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultSet.getString(columnIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理存储过程的结果集</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getNullableResult</span><span class=\"params\">(CallableStatement callableStatement, <span class=\"type\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> callableStatement.getString(columnIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>改写Mapper映射文件配置：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"XML\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;MyUserResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;lwUser&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">typeHandler</span>=<span class=\"string\">&quot;com.lonelyWolf.mybatis.typeHandler.MyTypeHandler&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_name&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userName&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;listUserByUserName&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;String&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;MyUserResultMap&quot;</span>&gt;</span></span><br><span class=\"line\">        select user_id,user_name from lw_user where user_name=#&#123;userName,jdbcType=VARCHAR,typeHandler=com.lonelyWolf.mybatis.typeHandler.MyTypeHandler&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>执行之后输出如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224182028959.png\" alt=\"image-20231224182028959\"></p>\n<p>因为我们属性上面只配置了一个属性，所以只输出了一次。</p>\n<h3 id=\"工作流程图\"><a href=\"#工作流程图\" class=\"headerlink\" title=\"工作流程图\"></a>工作流程图</h3><p>上面介绍了代码的流转，可能绕来绕去有点晕，所以我们来画一个主要的对象之间流程图来更加清晰的展示一下<code>MyBatis</code>主要工作流程：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224182036640.png\" alt=\"image-20231224182036640\"></p>\n<p>从上面的工作流程图上我们可以看到，<code>SqlSession</code>下面还有4大对象，这4大对象也很重要，后面学习拦截器的时候就是针对这4大对象进行的拦截，关于这4大对象的具体详情，我们下一篇文章再展开分析。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文主要分析了<code>MyBatis</code>的<code>SQL</code>执行流程。在分析流程的过程中，我们也举例论证了如何自定义t<code>ypeHandler</code>来实现自定义的参数映射和结果集映射，不过<code>MyBatis</code>中提供的默认映射其实可以满足大部分的需求，如果我们对某些属性需要特殊处理，那么就可以采用自定义的<code>typeHandler</code>来实现，相信如果本文如果读懂了，以下几点大家应该至少会有一个清晰的认识：</p>\n<p>1、Mapper接口和映射文件是如何进行绑定的</p>\n<p>2、MyBatis中SQL语句的执行流程</p>\n<p>3、自定义MyBatis中的参数设置处理器typeHandler</p>\n<p>4、自定义MyBatis中结果集处理器typeHandler</p>\n<p>当然，其中很多细节并没有提到，而看源码我们也并不需要追求每一行代码都能看懂，就比如我们一个稍微复杂一点的业务系统，即使我们是项目开发者如果某一个模块不是本人负责的，恐怕也很难搞清楚每一行代码的含义。所以对于MyBatis及其他框架的源码中也是一样，首先应该从大局入手，掌握整体流程和设计思想，然后如果对某些实现细节感兴趣，再深入进行了解。</p>\n","text":"概要在MyBatis中，利用编程式进行数据查询，主要就是下面几行代码：1<br>2<br>3<br>SqlSession session = sqlSessionFactory.openSession();<br>UserMapper userMapper = session.g","raw":null,"photos":[],"categories":[{"name":"框架","slug":"框架","count":1,"path":"api/categories/框架.json"}],"tags":[{"name":"MyBatis","slug":"MyBatis","count":1,"path":"api/tags/MyBatis.json"},{"name":"框架","slug":"框架","count":1,"path":"api/tags/框架.json"}]},{"title":"用“状态模式”代替if-else","slug":"用“状态模式”代替if-else","date":"2023-12-24T08:13:03.000Z","updated":"2023-12-24T11:04:17.000Z","comments":true,"pin":null,"path":"api/articles/用“状态模式”代替if-else.json","excerpt":"","keywords":null,"cover":null,"content":"<p>简介</p>\n<p>状态模式是行为型设计模式的一种。其设计理念是当对象的内部状态发生改变时，随之改变其行为。状态和行为之间是一一对应的。</p>\n<p>该模式主要用于，对象的行为依赖于它的状态，并且其行为是随着状态的改变而切换时。</p>\n<h2 id=\"状态模式UML类图\"><a href=\"#状态模式UML类图\" class=\"headerlink\" title=\"状态模式UML类图\"></a>状态模式UML类图</h2><h3 id=\"类图讲解\"><a href=\"#类图讲解\" class=\"headerlink\" title=\"类图讲解\"></a><strong>类图讲解</strong></h3><blockquote>\n<p>State：抽象状态接口（也可以定义成抽象类），该接口封装了所有状态所对应的行为。<br>ConcreteStateA&#x2F;B：具体状态类，该类实现了抽象状态接口，会根据自身对应的状态来实现接口中定义的方法，还有另一个功能是指明如何过渡到下一个状态。<br>Context：环境（上下文）角色，该类负责状态的切换，还持有一个State实例，代表当前环境所处状态。</p>\n</blockquote>\n<h2 id=\"案例讲解\"><a href=\"#案例讲解\" class=\"headerlink\" title=\"案例讲解\"></a>案例讲解</h2><p>案例：通过状态模式来实现自助售卖机的功能。</p>\n<h3 id=\"状态接口\"><a href=\"#状态接口\" class=\"headerlink\" title=\"状态接口\"></a><strong>状态接口</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 挑选商品</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">choose</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 付款</span></span><br><span class=\"line\">  <span class=\"type\">boolean</span> <span class=\"title function_\">payment</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 分发商品</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">dispenseCommodity</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"挑选商品状态类\"><a href=\"#挑选商品状态类\" class=\"headerlink\" title=\"挑选商品状态类\"></a><strong>挑选商品状态类</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChooseGoods</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  VendingMachine machine;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ChooseGoods</span><span class=\"params\">(VendingMachine machine)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.machine = machine;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">choose</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (machine.getCount() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;商品挑选成功，请及时付款！&quot;</span>);</span><br><span class=\"line\">      machine.setState(machine.getPaymentState());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;很遗憾，商品售罄了！&quot;</span>);</span><br><span class=\"line\">      machine.setState(machine.getEmptyState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">payment</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;请先挑选商品！&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispenseCommodity</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;请先挑选商品！&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"付款状态类\"><a href=\"#付款状态类\" class=\"headerlink\" title=\"付款状态类\"></a><strong>付款状态类</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentState</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  VendingMachine machine;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">PaymentState</span><span class=\"params\">(VendingMachine machine)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.machine = machine;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">choose</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;商品已选购完成请勿重复挑选&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">payment</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> random.nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num % <span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;付款成功！&quot;</span>);</span><br><span class=\"line\">      machine.setState(machine.getDispenseCommodityState());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;付款失败，请重新支付！&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispenseCommodity</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;请先完成支付！&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"商品售罄状态类\"><a href=\"#商品售罄状态类\" class=\"headerlink\" title=\"商品售罄状态类\"></a><strong>商品售罄状态类</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmptyState</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  VendingMachine machine;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">EmptyState</span><span class=\"params\">(VendingMachine machine)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.machine = machine;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">choose</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;对不起商品已售罄！&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">payment</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;对不起商品已售罄！&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispenseCommodity</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;对不起商品已售罄！&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"分发商品状态类\"><a href=\"#分发商品状态类\" class=\"headerlink\" title=\"分发商品状态类\"></a><strong>分发商品状态类</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DispenseCommodityState</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  VendingMachine machine;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">DispenseCommodityState</span><span class=\"params\">(VendingMachine machine)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.machine = machine;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">choose</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;请及时取走您的商品！&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">payment</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;请及时取走您的商品！&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispenseCommodity</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;请及时取走您的商品！&quot;</span>);</span><br><span class=\"line\">    machine.setState(machine.getChooseGoods());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"自动售货机-Context角色\"><a href=\"#自动售货机-Context角色\" class=\"headerlink\" title=\"自动售货机 &#x3D;&gt; Context角色\"></a><strong>自动售货机 &#x3D;&gt; Context角色</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VendingMachine</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 表示当前状态</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">State</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 商品数量</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">State</span> <span class=\"variable\">chooseGoods</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChooseGoods</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">State</span> <span class=\"variable\">paymentState</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PaymentState</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">State</span> <span class=\"variable\">dispenseCommodityState</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DispenseCommodityState</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">State</span> <span class=\"variable\">emptyState</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EmptyState</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">VendingMachine</span><span class=\"params\">(<span class=\"type\">int</span> count)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.count = count;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = <span class=\"built_in\">this</span>.getChooseGoods();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 购买商品</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">purchase</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 挑选商品</span></span><br><span class=\"line\">    state.choose();</span><br><span class=\"line\">    <span class=\"comment\">// 支付成功</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (state.payment()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 分发商品</span></span><br><span class=\"line\">      state.dispenseCommodity();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取商品后将商品减一</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// get和set方法 ... </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"客户端测试类\"><a href=\"#客户端测试类\" class=\"headerlink\" title=\"客户端测试类\"></a><strong>客户端测试类</strong></h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">VendingMachine</span> <span class=\"variable\">machine</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VendingMachine</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;第&quot;</span> + i + <span class=\"string\">&quot;次购买。&quot;</span>);</span><br><span class=\"line\">      machine.purchase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a><strong>执行结果</strong></h3><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1、状态模式将每个状态所对应的行为封装到一个类中，大大提高了代码的可读性。并且通过这样的设计还可以消除多余的if-else语句，方便代码的维护。</p>\n<p>2、状态模式符合“开闭原则”，容易增加和删除状态。</p>\n<p>3、任何事情都有利弊，状态模式也不例外。其最显著的问题是，每个状态都要对应一个类，当状态过多时会产生大量的类，从而加大维护成本。</p>\n<p>4、应用场景：当一个需求有很多状态，并且状态之间会进行转换，不同状态还对应不同的行为时就可以考虑使用“状态模式”。</p>\n","text":"简介状态模式是行为型设计模式的一种。其设计理念是当对象的内部状态发生改变时，随之改变其行为。状态和行为之间是一一对应的。该模式主要用于，对象的行为依赖于它的状态，并且其行为是随着状态的改变而切换时。状态模式UML类图类图讲解State：抽象状态接口（也可以定义成抽象类），该接口封","raw":null,"photos":[],"categories":[{"name":"设计模式","slug":"设计模式","count":1,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":1,"path":"api/tags/设计模式.json"}]},{"title":"Google 开源的 Guava 工具库","slug":"Google-开源的-Guava-工具库","date":"2023-12-24T08:04:10.000Z","updated":"2023-12-24T11:02:17.000Z","comments":true,"pin":null,"path":"api/articles/Google-开源的-Guava-工具库.json","excerpt":"","keywords":null,"cover":null,"content":"<p>目前Google Guava在实际应用中非常广泛，本篇博客将以博主对Guava使用的认识以及在项目中的经验来给大家分享！正如标题所言，学习使用Google Guava可以让你快乐编程，写出优雅的JAVA代码！</p>\n<h2 id=\"以面向对象思想处理字符串\"><a href=\"#以面向对象思想处理字符串\" class=\"headerlink\" title=\"以面向对象思想处理字符串:\"></a><strong>以面向对象思想处理字符串:</strong></h2><h3 id=\"Joiner-Splitter-CharMatcher\"><a href=\"#Joiner-Splitter-CharMatcher\" class=\"headerlink\" title=\"Joiner&#x2F;Splitter&#x2F;CharMatcher\"></a><strong>Joiner&#x2F;Splitter&#x2F;CharMatcher</strong></h3><blockquote>\n<p>JDK提供的String还不够好么？</p>\n<p>也许还不够友好，至少让我们用起来还不够爽，还得操心！</p>\n<p>举个栗子，比如String提供的split方法，我们得关心空字符串吧，还得考虑返回的结果中存在null元素吧，只提供了前后trim的方法（如果我想对中间元素进行trim呢）。</p>\n</blockquote>\n<p><strong>那么，看下面的代码示例，guava让你不必在操心这些：</strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 连接器</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Joiner</span> <span class=\"variable\">joiner</span> <span class=\"operator\">=</span> Joiner.on(<span class=\"string\">&quot;,&quot;</span>).skipNulls();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分割器</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Splitter</span> <span class=\"variable\">splitter</span> <span class=\"operator\">=</span> Splitter.on(<span class=\"string\">&quot;,&quot;</span>).trimResults().omitEmptyStrings();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把集合/数组中的元素 join 在一起</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">join</span> <span class=\"operator\">=</span> joiner.join(Lists.newArrayList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&quot;b&quot;</span>));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;join=&quot;</span> + join);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String tmp : splitter.split(<span class=\"string\">&quot;a, ,b,,&quot;</span>)) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;|&quot;</span> + tmp + <span class=\"string\">&quot;|&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>Joiner&#x2F;Splitter</strong></p>\n<blockquote>\n<p>Joiner是连接器，Splitter是分割器，通常我们会把它们定义为static final，利用on生成对象后在应用到String进行处理，这是可以复用的。要知道apache commons StringUtils提供的都是static method。</p>\n<p>更加重要的是，guava提供的Joiner&#x2F;Splitter是经过充分测试，它的稳定性和效率要比apache高出不少，这个你可以自行测试下~</p>\n<p>发现没有我们想对String做什么操作，就是生成自己定制化的Joiner&#x2F;Splitter，多么直白，简单，流畅的API！</p>\n<p>对于Joiner，常用的方法是 跳过NULL元素：skipNulls() &#x2F; 对于NULL元素使用其他替代：useForNull(String)</p>\n<p>对于Splitter，常用的方法是：trimResults()&#x2F;omitEmptyStrings()。注意拆分的方式，有字符串，还有正则，还有固定长度分割（太贴心了！）</p>\n</blockquote>\n<p>其实除了Joiner&#x2F;Splitter外，guava还提供了字符串匹配器：<strong>CharMatcher</strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">CharMatcher</span> <span class=\"variable\">charMatcherDigit</span> <span class=\"operator\">=</span> CharMatcher.DIGIT;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Charmatcher</span> <span class=\"variable\">charMatcherAny</span> <span class=\"operator\">=</span> CharMatcher.ANY;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只保留匹配的字符，其他移除</span></span><br><span class=\"line\">    System.out.println(charMatcherDigit.retainFrom(<span class=\"string\">&quot;abc2def134f~&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 移除匹配的字符</span></span><br><span class=\"line\">    System.out.println(charMatcherDigit.removeFrom(<span class=\"string\">&quot;yes,i love you 1314&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(charMatcherAny.inRange(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>).or(charMatcherAny.is(<span class=\"string\">&#x27;a&#x27;</span>)).replaceFrom(<span class=\"string\">&quot;abcdefg&quot;</span>,<span class=\"string\">&quot;*&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>CharMatcher</strong></p>\n<blockquote>\n<p>CharMatcher，将字符的匹配和处理解耦，并提供丰富的方法供你使用！</p>\n</blockquote>\n<hr>\n<h2 id=\"对基本类型进行支持\"><a href=\"#对基本类型进行支持\" class=\"headerlink\" title=\"对基本类型进行支持\"></a><strong>对基本类型进行支持</strong></h2><blockquote>\n<p>guava对JDK提供的原生类型操作进行了扩展，使得功能更加强大！</p>\n</blockquote>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 快速完成到集合的转换</span></span><br><span class=\"line\">List&lt;Integer&gt; list = Ints.asList(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(Ints.join(<span class=\"string\">&quot;,&quot;</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原生类型数据快速合并</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] newIntArray = Ints.concat(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;);</span><br><span class=\"line\">System.out.println(newIntArray.length);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最大/最小</span></span><br><span class=\"line\">System.out.println(Ints.max(newIntArray) + <span class=\"string\">&quot;,&quot;</span> + Ints.min(newIntArray));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否包含</span></span><br><span class=\"line\">System.out.println(Ints.contains(newArray, <span class=\"number\">6</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 集合到数组的转换</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] someArray = Ints.toArray(list);</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>Ints</strong></p>\n<blockquote>\n<p>guava提供了</p>\n<p>Bytes&#x2F;Shorts&#x2F;Ints&#x2F;Iongs&#x2F;Floats&#x2F;Doubles&#x2F;Chars&#x2F;Booleans</p>\n<p>这些基本数据类型的扩展支持，只有你想不到的，没有它没有的！</p>\n</blockquote>\n<h2 id=\"对JDK集合的有效补充\"><a href=\"#对JDK集合的有效补充\" class=\"headerlink\" title=\"对JDK集合的有效补充\"></a><strong>对JDK集合的有效补充</strong></h2><h3 id=\"灰色地带-Multiset\"><a href=\"#灰色地带-Multiset\" class=\"headerlink\" title=\"灰色地带:Multiset\"></a><strong>灰色地带:Multiset</strong></h3><blockquote>\n<p>JDK的集合，提供了有序且可以重复的List，无序且不可以重复的Set。那这里其实对于集合涉及到了2个概念，一个order，一个dups。那么List vs Set，and then some ?</p>\n</blockquote>\n<hr>\n<p><strong>Multiset</strong></p>\n<blockquote>\n<p>Multiset是什么，我想上面的图，你应该了解它的概念了。Multiset就是无序的，但是可以重复的集合，它就是游离在List&#x2F;Set之间的“灰色地带”！（至于有序的，不允许重复的集合嘛，guava还没有提供，当然在未来应该会提供UniqueList，我猜的，哈哈）</p>\n</blockquote>\n<p>来看一个Multiset的示例：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Multiset&lt;String&gt; multiset = HashMultiset.create();</span><br><span class=\"line\"></span><br><span class=\"line\">multiset.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">multiset.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">multiset.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">multiset.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">multiset.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(multiset.size());</span><br><span class=\"line\">System.out.println(multiset.count(<span class=\"string\">&quot;a&quot;</span>));</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>Multiset Code</strong></p>\n<blockquote>\n<p>Multiset自带一个有用的功能，就是可以跟踪每个对象的数量。</p>\n</blockquote>\n<h3 id=\"Immutable-vs-unmodifiable\"><a href=\"#Immutable-vs-unmodifiable\" class=\"headerlink\" title=\"Immutable vs unmodifiable\"></a>Immutable vs unmodifiable</h3><p>来我们先看一个unmodifiable的例子：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// List 的不可变设置</span></span><br><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这种视图，不够安全，不是真正意义上的快照，怎么能随着而变化呢？</span></span><br><span class=\"line\">List&lt;String&gt; readOnlyList = Collections.unmodifiableList(list);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// readOnlyList.add(&quot;c&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">// 抛异常：java.lang.UnsupportedOperationException</span></span><br><span class=\"line\"></span><br><span class=\"line\">list.acc(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(reaOnlyList.size()); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>unmodifiable</strong></p>\n<blockquote>\n<p>你看到JDK提供的unmodifiable的缺陷了吗？</p>\n<p>实际上，Collections.unmodifiableXxx所返回的集合和源集合是同一个对象，只不过可以对集合做出改变的API都被override，会抛出UnsupportedOperationException。</p>\n<p>也即是说我们改变源集合，导致不可变视图（unmodifiable View）也会发生变化，oh my god!</p>\n</blockquote>\n<p>当然，在不使用guava的情况下，我们是怎么避免上面的问题的呢？</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// List    的不可变性设置</span></span><br><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;~&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new Object ; Copy</span></span><br><span class=\"line\">List&lt;String&gt; readOnList = Collections.unmodifiableList(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(list));</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>defensive copies</strong></p>\n<blockquote>\n<p>上面揭示了一个概念：Defensive Copies，保护性拷贝。</p>\n</blockquote>\n<p>OK，unmodifiable看上去没有问题呢，但是guava依然觉得可以改进，于是提出了Immutable的概念，来看：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// guava 是如何做的呢？</span></span><br><span class=\"line\">List&lt;String&gt; immutable = ImmutabeList.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// immutable.add(&quot;d&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">// 抛异常：java.lang.UnsupportedOperationException</span></span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;String&gt; immutable2 = ImmutableList.copyOf(list);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 视图不随着源而改变 guava 只读设置安全可靠 简单易用</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;list size:&quot;</span> + list.size() + <span class=\"string\">&quot; immutable2.size:&quot;</span> + immutables.size());</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>Immutable</strong></p>\n<blockquote>\n<p>就一个copyOf，你不会忘记，如此cheap~</p>\n<p>用Google官方的说法是：we’re using just one class,just say exactly what we mean，很了不起吗（不仅仅是个概念，Immutable在COPY阶段还考虑了线程的并发性等，很智能的！），O(∩_∩)O哈哈~</p>\n<p>guava提供了很多Immutable集合，比如</p>\n<p>ImmutableList&#x2F;ImmutableSet&#x2F;ImmutableSortedSet&#x2F;ImmutableMap&#x2F;……</p>\n</blockquote>\n<p>看一个ImmutableMap的例子：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImmutableMap&lt;String, String&gt; immutableMap = ImmutableMap.of(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;hubert&quot;</span>, <span class=\"string\">&quot;sex&quot;</span>, <span class=\"string\">&quot;man&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">immutableMap.put(<span class=\"string\">&quot;wife&quot;</span>, <span class=\"string\">&quot;no...&quot;</span>);    <span class=\"comment\">// UnsupportedOperationException</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>ImmutableMap</strong></p>\n<h3 id=\"可不可以一对多：Multimap\"><a href=\"#可不可以一对多：Multimap\" class=\"headerlink\" title=\"可不可以一对多：Multimap\"></a>可不可以一对多：Multimap</h3><blockquote>\n<p>JDK提供给我们的Map是一个键，一个值，一对一的，那么在实际开发中，显然存在一个KEY多个VALUE的情况（比如一个分类下的书本），我们往往这样表达：<code>Map&lt;k,List&lt;v&gt;&gt;</code>，好像有点臃肿！臃肿也就算了，更加不爽的事，我们还得判断KEY是否存在来决定是否new 一个LIST出来，有点麻烦！更加麻烦的事情还在后头，比如遍历，比如删除，so hard……</p>\n</blockquote>\n<p>来看guava如何替你解决这个大麻烦的：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Multimap&lt;String, String&gt; multiMap = ArrayListMultimap.create();</span><br><span class=\"line\"></span><br><span class=\"line\">multiMap.put(<span class=\"string\">&quot;hubert&quot;</span>, <span class=\"string\">&quot;man&quot;</span>);</span><br><span class=\"line\">multiMap.put(<span class=\"string\">&quot;hubert&quot;</span>, <span class=\"string\">&quot;yes&quot;</span>);</span><br><span class=\"line\">multiMap.put(<span class=\"string\">&quot;lucy&quot;</span>, <span class=\"string\">&quot;woman&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(multiMap.get(<span class=\"string\">&quot;hubert&quot;</span>)); <span class=\"comment\">//collection</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>Multimap</strong></p>\n<blockquote>\n<p>友情提示下，guava所有的集合都有create方法，这样的好处在于简单，而且我们不必在重复泛型信息了。</p>\n<p>get()&#x2F;keys()&#x2F;keySet()&#x2F;values()&#x2F;entries()&#x2F;asMap()都是非常有用的返回view collection的方法。</p>\n<p>Multimap的实现类有：</p>\n<p>ArrayListMultimap&#x2F;HashMultimap&#x2F;LinkedHashMultimap&#x2F;TreeMultimap&#x2F;ImmutableMultimap&#x2F;……</p>\n</blockquote>\n<h3 id=\"可不可以双向：BiMap\"><a href=\"#可不可以双向：BiMap\" class=\"headerlink\" title=\"可不可以双向：BiMap\"></a><strong>可不可以双向：BiMap</strong></h3><blockquote>\n<p>JDK提供的MAP让我们可以find value by key，那么能不能通过find key by value呢，能不能KEY和VALUE都是唯一的呢。这是一个双向的概念，即forward+backward。</p>\n<p>在实际场景中有这样的需求吗？比如通过用户ID找到mail，也需要通过mail找回用户名。没有guava的时候，我们需要create forward map AND create backward map，and now just let guava do that for you.</p>\n</blockquote>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BiMap&lt;String, String&gt; biMap = HashBiMap.create();</span><br><span class=\"line\"></span><br><span class=\"line\">biMap.put(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;hubert&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// java.lang.IllegaArgumentException: value already present: hubert</span></span><br><span class=\"line\"><span class=\"comment\">// value 重复会报错</span></span><br><span class=\"line\">biMap.put(<span class=\"string\">&quot;nick&quot;</span>, <span class=\"string\">&quot;hubert&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 强制覆盖 name:hubert</span></span><br><span class=\"line\">biMap.forcePut(<span class=\"string\">&quot;nick&quot;</span>, <span class=\"string\">&quot;hubert&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">biMap.put(<span class=\"string\">&quot;123&quot;</span>, <span class=\"string\">&quot;hubertwongcn@163.com&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(biMap.inverse().get(<span class=\"string\">&quot;hubertwongcn@163.com&quot;</span>)); <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>BiMap</strong></p>\n<blockquote>\n<p>biMap &#x2F; biMap.inverse() &#x2F; biMap.inverse().inverse() 它们是什么关系呢？</p>\n<p>你可以稍微看一下BiMap的源码实现，实际上，当你创建BiMap的时候，在内部维护了2个map，一个forward map，一个backward map，并且设置了它们之间的关系。</p>\n<p>因此，biMap.inverse() !&#x3D; biMap ；biMap.inverse().inverse() &#x3D;&#x3D; biMap</p>\n</blockquote>\n<h3 id=\"可不可以多个KEY：Table\"><a href=\"#可不可以多个KEY：Table\" class=\"headerlink\" title=\"可不可以多个KEY：Table\"></a><strong>可不可以多个KEY：Table</strong></h3><blockquote>\n<p>我们知道数据库除了主键外，还提供了复合索引，而且实际中这样的多级关系查找也是比较多的，当然我们可以利用嵌套的Map来实现：<code>Map&lt;k1,Map&lt;k2,v2&gt;&gt;</code>。为了让我们的代码看起来不那么丑陋，guava为我们提供了Table。</p>\n</blockquote>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Table&lt;String, String, Integer&gt; table = HashBaseTable.create();</span><br><span class=\"line\">table.put(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;计算机&quot;</span>, <span class=\"number\">80</span>);</span><br><span class=\"line\">table.put(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;数学&quot;</span>, <span class=\"number\">90</span>);</span><br><span class=\"line\">table.put(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;语文&quot;</span>, <span class=\"number\">70</span>);</span><br><span class=\"line\">table.put(<span class=\"string\">&quot;李四&quot;</span>, <span class=\"string\">&quot;计算机&quot;</span>, <span class=\"number\">70</span>);</span><br><span class=\"line\">table.put(<span class=\"string\">&quot;李四&quot;</span>, <span class=\"string\">&quot;数学&quot;</span>, <span class=\"number\">60</span>);</span><br><span class=\"line\">table.put(<span class=\"string\">&quot;李四&quot;</span>, <span class=\"string\">&quot;语文&quot;</span>, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>Table</strong></p>\n<blockquote>\n<p>Table涉及到3个概念：rowKey,columnKey,value，并提供了多种视图以及操作方法让你更加轻松的处理多个KEY的场景。</p>\n</blockquote>\n<h2 id=\"函数式编程：Functions\"><a href=\"#函数式编程：Functions\" class=\"headerlink\" title=\"函数式编程：Functions\"></a><strong>函数式编程：Functions</strong></h2><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Lists.newArrayList(<span class=\"string\">&quot;hello world&quot;</span>, <span class=\"string\">&quot;yes&quot;</span>, <span class=\"string\">&quot;hubert&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Function&lt;String, String&gt; f1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>&lt;String, String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">apply</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.length() &lt;= <span class=\"number\">5</span> ? s : s.substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Function&lt;String, String&gt; f2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>&lt;String, String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">apply</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.toUpperCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Function&lt;String, String&gt; f3 = Functions.compose(f1, f2);</span><br><span class=\"line\"></span><br><span class=\"line\">Collection&lt;String&gt; collection = Collections2.transform(list, f3);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(String s : collection) &#123;</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>Functions</strong></p>\n<blockquote>\n<p>上面的代码是为了完成将List集合中的元素，先截取5个长度，然后转成大写。</p>\n<p>函数式编程的好处在于在集合遍历操作中提供自定义Function的操作，比如transform转换。我们再也不需要一遍遍的遍历集合，显著的简化了代码！</p>\n</blockquote>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterables.transform(Iterable, Function);</span><br><span class=\"line\">Iterators.transform(Iterator, Function);</span><br><span class=\"line\">Collections2.transform(Collection, Function);</span><br><span class=\"line\">Lists.transform(List, Function);</span><br><span class=\"line\">Maps.transformValues(Map, Function);</span><br><span class=\"line\">Multimaps.transformValues(Multimap, Function);</span><br><span class=\"line\">Multimaps.transformValues(ListMultimap, Funtion);</span><br><span class=\"line\">Tables.transformValues(Table, Function);</span><br><span class=\"line\">Maps.transformEntries(Map, EntryTransformer);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>对集合的transform操作可以通过Function完成</strong></p>\n<h2 id=\"断言：Predicate\"><a href=\"#断言：Predicate\" class=\"headerlink\" title=\"断言：Predicate\"></a><strong>断言：Predicate</strong></h2><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Lists.newArrayList(<span class=\"string\">&quot;moom&quot;</span>, <span class=\"string\">&quot;dad&quot;</span>, <span class=\"string\">&quot;refer&quot;</span>, <span class=\"string\">&quot;yes&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Collection&lt;String&gt; collection = Collections2.filter(list, <span class=\"keyword\">new</span> <span class=\"title class_\">Predicate</span>&lt;String&gt;)) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">apply</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 业务逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(s).reverse().toString().equals(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(String s : collection) &#123;</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>Predicate最常用的功能就是运用在集合的过滤当中！</p>\n</blockquote>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterables.filter(Iterable, Predicate);</span><br><span class=\"line\">Iterators.filter(Iterator, Predicate);</span><br><span class=\"line\">Collectios2.filter(Collection, Predicate);</span><br><span class=\"line\">Sets.filter(Set, Predicate);</span><br><span class=\"line\">Sets.filter(SortedSet, Predicate);</span><br><span class=\"line\">Maps.filterKeys(Map, Predicate);</span><br><span class=\"line\">Multimaps.filterKeys(Multimap, Predicate);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>filter</strong></p>\n<blockquote>\n<p>需要注意的是Lists并没有提供filter方法，不过你可以使用Collections2.filter完成！</p>\n</blockquote>\n<h3 id=\"check-null-and-other：Optional、Preconditions\"><a href=\"#check-null-and-other：Optional、Preconditions\" class=\"headerlink\" title=\"check null and other：Optional、Preconditions\"></a>check null and other：Optional、Preconditions</h3><p>在guava中，对于null的处理手段是快速失败，你可以看看guava的源码，很多方法的第一行就是：Preconditions.checkNotNull(elements);</p>\n<p>要知道null是模糊的概念，是成功呢，还是失败呢，还是别的什么含义呢？</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(String name, <span class=\"type\">int</span> age, Map&lt;String, String&gt; extInfo)</span> &#123;</span><br><span class=\"line\">    Preconditions.checkNotNull(name, <span class=\"string\">&quot;name must be given!&quot;</span>);</span><br><span class=\"line\">    Preconditions.checkArgument(age &gt;= <span class=\"number\">18</span>, <span class=\"string\">&quot;the game you can not play it, your age is under 18!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, String&gt; defaulExtInfo = Maps.newHashMap();</span><br><span class=\"line\">    defaultExtInfo.put(<span class=\"string\">&quot;sex&quot;</span>, <span class=\"string\">&quot;man&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    extInfo = Optional.fromNullable(extInfo).or(defaultExtInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Map.Entry&lt;String, Stirng&gt; entry : extInfo.entrySet())) &#123;</span><br><span class=\"line\">        System.out.println(entry.getKey() + <span class=\"string\">&quot;:&quot;</span> + entry.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>Preconditions&#x2F;Optional</strong></p>\n<h3 id=\"Cache-is-king\"><a href=\"#Cache-is-king\" class=\"headerlink\" title=\"Cache is king\"></a><strong>Cache is king</strong></h3><blockquote>\n<p>对于大多数互联网项目而言，缓存的重要性，不言而喻！</p>\n<p>如果我们的应用系统，并不想使用一些第三方缓存组件（如redis），我们仅仅想在本地有一个功能足够强大的缓存，很可惜JDK提供的那些SET&#x2F;MAP还不行！</p>\n</blockquote>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义缓存的实现</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CacheLoader&lt;Long, User&gt; userCacheLoader = <span class=\"keyword\">new</span> <span class=\"title class_\">CacheLoader</span>&lt;Long, User&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">load</span><span class=\"params\">(Long along)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 模拟从数据库/Redis/缓存中加载数据</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        user.setId(along);</span><br><span class=\"line\">        user.setName(Thread.currentThread().getName() + <span class=\"string\">&quot;-&quot;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>())  </span><br><span class=\"line\">                     + <span class=\"string\">&quot;-&quot;</span> + along);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;load:&quot;</span> + user);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义缓存的策略，提供对外访问缓存</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> LoadingCache&lt;Long, User&gt; userCacheData = CacheBuilder.newBuilder()</span><br><span class=\"line\">    .expireAfterAccess(<span class=\"number\">2</span>, TimeUnit.SECONDS)</span><br><span class=\"line\">    .expireAfterWrite(<span class=\"number\">2</span>, TimeUnit.SECONDS)</span><br><span class=\"line\">    .refreshAfterWrite(<span class=\"number\">3</span>, TimeUnit.SECONS)</span><br><span class=\"line\">    .maximumSize(<span class=\"number\">10000L</span>)</span><br><span class=\"line\">    .bulid(userCacheLoader);</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>CacheLoader</strong></p>\n<blockquote>\n<p>首先，这是一个本地缓存，guava提供的cache是一个简洁、高效，易于维护的。为什么这么说呢？因为并没有一个单独的线程用于刷新 OR 清理cache，对于cache的操作，都是通过访问&#x2F;读写带来的，也就是说在读写中完成缓存的刷新操作！</p>\n<p>其次，我们看到了，我们非常通俗的告诉cache，我们的缓存策略是什么，SO EASY！在如此简单的背后，是guava帮助我们做了很多事情，比如线程安全。</p>\n</blockquote>\n<h3 id=\"让异步回调更加简单\"><a href=\"#让异步回调更加简单\" class=\"headerlink\" title=\"让异步回调更加简单\"></a><strong>让异步回调更加简单</strong></h3><blockquote>\n<p>JDK中提供了Future&#x2F;FutureTask&#x2F;Callable来对异步回调进行支持，但是还是看上去挺复杂的，能不能更加简单呢？比如注册一个监听回调。</p>\n</blockquote>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JDK 所提供的线程池</span></span><br><span class=\"line\"><span class=\"type\">ExecutorService</span> <span class=\"variable\">es</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// 经过guava封装的带有监听回调功能的线程池</span></span><br><span class=\"line\"><span class=\"type\">ListeningExecutorService</span> <span class=\"variable\">listeningExecutorService</span> <span class=\"operator\">=</span> MoreExecutors.listeningDecorator(es);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ListenableFuture</span> <span class=\"variable\">listenableFuture</span> <span class=\"operator\">=</span> listeningExecutorService.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">3</span>) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">FutureCallback</span> <span class=\"variable\">futureCallback</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FutureCallback</span>&lt;Integer&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">final</span> Integer o)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------&quot;</span> + o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onFailure</span><span class=\"params\">(<span class=\"keyword\">final</span> Throwable throwable)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;======&quot;</span> + throwable.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Futures.addCallback(listenableFuture, futureCallback);</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>异步回调</strong></p>\n<blockquote>\n<p>我们可以通过guava对JDK提供的线程池进行装饰，让其具有异步回调监听功能，然后在设置监听器即可！</p>\n</blockquote>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a><strong>Summary</strong></h3><p>到这里，这篇文章也只介绍了guava的冰山一角，其实还有很多内容：</p>\n<hr>\n<p><strong>guava package</strong></p>\n<blockquote>\n<p>比如反射、注解、网络、并发、IO等等</p>\n</blockquote>\n","text":"目前Google Guava在实际应用中非常广泛，本篇博客将以博主对Guava使用的认识以及在项目中的经验来给大家分享！正如标题所言，学习使用Google Guava可以让你快乐编程，写出优雅的JAVA代码！以面向对象思想处理字符串:Joiner&#x2F;Splitter&#x","raw":null,"photos":[],"categories":[{"name":"工具","slug":"工具","count":1,"path":"api/categories/工具.json"}],"tags":[{"name":"工具","slug":"工具","count":1,"path":"api/tags/工具.json"},{"name":"开源","slug":"开源","count":1,"path":"api/tags/开源.json"},{"name":"Google","slug":"Google","count":1,"path":"api/tags/Google.json"}]}]}
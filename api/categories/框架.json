{"name":"框架","slug":"框架","count":1,"posts":[{"title":"MyBatis 的执行流程","slug":"MyBatis-的执行流程！","date":"2023-12-24T08:48:35.000Z","updated":"2023-12-24T11:19:17.000Z","comments":true,"pin":null,"path":"api/articles/MyBatis-的执行流程！.json","excerpt":"","keywords":null,"cover":"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183435294.png","content":"<h3 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h3><p>在MyBatis中，利用编程式进行数据查询，主要就是下面几行代码：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">SqlSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> sqlSessionFactory.openSession();</span><br><span class=\"line\"><span class=\"type\">UserMapper</span> <span class=\"variable\">userMapper</span> <span class=\"operator\">=</span> session.getMapper(UserMapper.class);</span><br><span class=\"line\">List&lt;LwUser&gt; userList = userMapper.listUserByUserName(<span class=\"string\">&quot;孤狼1号&quot;</span>);</span><br></pre></td></tr></table></figure></div>\n\n<p>第一行是获取一个<code>SqlSession</code>对象在上一篇文章分析过了，第二行就是获取<code>UserMapper</code>接口，第三行一行代码就实现了整个查询语句的流程，接下来我们就来仔细分析一下第二和第三步。</p>\n<h3 id=\"获取Mapper接口-getMapper\"><a href=\"#获取Mapper接口-getMapper\" class=\"headerlink\" title=\"获取Mapper接口(getMapper)\"></a>获取Mapper接口(getMapper)</h3><p>第二步是通过<code>SqlSession</code>对象是获取一个<code>Mapper</code>接口，这个流程还是相对简单的，下面就是我们调用<code>session.getMapper</code>方法之后的运行时序图：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183435294.png\" alt=\"image-20231224183435294\"></p>\n<p>1、在调用<code>getMapper</code>之后，会去<code>Configuration</code>对象中获取<code>Mapper</code>对象，因为在项目启动的时候就会把<code>Mapper</code>接口加载并解析存储到<code>Configuration</code>对象</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224183500210\" alt=\"图片\"></p>\n<p>2、通过<code>Configuration</code>对象中的<code>MapperRegistry</code>对象属性，继续调用<code>getMapper</code>方法</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184636165.png\" alt=\"image-20231224184636165\"></p>\n<p>3、根据<code>type</code>类型，从<code>MapperRegistry</code>对象中的<code>knownMappers</code>获取到当前类型对应的代理工厂类，然后通过代理工厂类生成对应<code>Mapper</code>的代理类</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224183500394\" alt=\"图片\"></p>\n<p>4、最终获取到我们接口对应的代理类<code>MapperProxy</code>对象</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224183500536\" alt=\"图片\"></p>\n<p>而<code>MapperProxy</code>可以看到实现了<code>InvocationHandler</code>，使用的就是JDK动态代理。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224183500588\" alt=\"图片\"></p>\n<p>至此获取<code>Mapper</code>流程结束了，那么就有一个问题了<code>MapperRegistry</code>对象内的<code>HashMap</code>属性<code>knownMappers</code>中的数据是什么时候存进去的呢？</p>\n<h3 id=\"Mapper接口和映射文件是何时关联的\"><a href=\"#Mapper接口和映射文件是何时关联的\" class=\"headerlink\" title=\"Mapper接口和映射文件是何时关联的\"></a>Mapper接口和映射文件是何时关联的</h3><p>Mapper接口及其映射文件是在加载mybatis-config配置文件的时候存储进去的，下面就是时序图：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183721291.png\" alt=\"image-20231224183721291\"></p>\n<p>1、首先我们会手动调用<code>SqlSessionFactoryBuilder</code>方法中的<code>build()</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183809123.png\" alt=\"image-20231224183809123\"></p>\n<p>2、然后会构造一个<code>XMLConfigBuilder</code>对象，并调用其<code>parse</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183849737.png\" alt=\"image-20231224183849737\"></p>\n<p>3、然后会继续调用自己的<code>parseConfiguration</code>来解析配置文件，这里面就会分别去解析全局配置文件的顶级节点，其他的我们先不看，我们直接看最后解析<code>mappers</code>节点</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183900371.png\" alt=\"image-20231224183900371\"></p>\n<p>4、继续调用自己的<code>mapperElement</code>来解析<code>mappers</code>文件（这个方法比较长，为了方便截图完整，所以把字体缩小了1号），可以看到，这里面分了四种方式来解析<code>mappers</code>节点的配置，对应了4种<code>mapper</code>配置方式，而其中红框内的两种方式是直接配置的<code>xml</code>映射文件，蓝框内的两种方式是解析直接配置<code>Mapper</code>接口的方式，从这里也可以说明，不论配置哪种方式，最终<code>MyBatis</code>都会将<code>xml</code>映射文件和<code>Mapper</code>接口进行关联。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224183914717.png\" alt=\"image-20231224183914717\"></p>\n<p>5、我们先看第2种和第3中（直接配置<code>xml</code>映射文件的解析方式），会构建一个<code>XMLMapperBuilder</code>对象并调用其<code>parse</code>方法。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184656478.png\" alt=\"image-20231224184656478\"></p>\n<p>当然，这个还是会被解析的，后面执行查询的时候会再次通过不断遍历去全部解析完毕，不过有一点需要注意的是，互相引用这种是会导致解析失败报错的，所以在开发过程中我们应该避免循环依赖的产生。</p>\n<p>6、解析完映射文件之后，调用自身方法<code>bindMapperForNamespace</code>，开始绑定<code>Mapper</code>接口和映射文件：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184043173.png\" alt=\"image-20231224184043173\"></p>\n<p>7、调用<code>Configuration</code>对象的<code>addMapper</code></p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184056630.png\" alt=\"image-20231224184056630\"></p>\n<p>8、调用<code>Configuration</code>对象的属性<code>MapperRegistry</code>内的<code>addMapper</code>方法，这个方法就是正式将<code>Mapper</code>接口添加到<code>knownMappers</code>，所以上面<code>getMapper</code>可以直接获取：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184105761.png\" alt=\"image-20231224184105761\"></p>\n<p>到这里我们就完成了<code>Mapper</code>接口和<code>xml</code>映射文件的绑定</p>\n<p>9、注意上面红框里面的代码，又调用了一次<code>parse</code>方法，这个<code>parse</code>方法主要是解析注解，比如下面的语句：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Select(&quot;select * from lw_user&quot;)</span></span><br><span class=\"line\">List&lt;LwUser&gt; <span class=\"title function_\">listAllUser</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure></div>\n\n<p>所以这个方法里面会去解析<code>@Selec</code>t等注解，需要注意的是，<code>parse</code>方法里面会同时再解析一次<code>xml</code>映射文件，因为上面我们提到了<code>mappers</code>节点有4种配置方式，其中两种配置的是<code>Mapper</code>接口，而配置<code>Mapper</code>接口会直接先调用<code>addMapper</code>接口，并没有解析映射文件，所以进入注解解析方法<code>parse</code>之中会需要再尝试解析一次<code>XML</code>映射文件。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184119352.png\" alt=\"image-20231224184119352\"></p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184725124.png\" alt=\"image-20231224184725124\"></p>\n<p>解析完成之后，还会对<code>Mapper</code>接口中的方法进行解析，并将每个方法的全限定类名作为<code>key</code>存入存入<code>Configuration</code>中的<code>mappedStatements</code>属性。</p>\n<p>需要指出的是，这里存储的时候，同一个<code>value</code>会存储2次，**一个全限定名作为<code>key</code>，另一个就是只用方法名(<code>sql</code>语句的<code>id</code>)来作为<code>key</code>**：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224183637858\" alt=\"图片\"></p>\n<p>所以最终<code>mappedStatements</code>会是下面的情况：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184738684.png\" alt=\"image-20231224184738684\"></p>\n<p>事实上如果我们通过接口的方式来编程的话，最后来<code>getStatement</code>的时候，都是根据全限定名来取的，<strong>所以即使有重名对我们也没有影响，而之所以要这么做的原因其实还是为了兼容早期版本的用法，那就是不通过接口，而是直接通过方法名的方式来进行查询</strong>：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session.selectList(<span class=\"string\">&quot;com.lonelyWolf.mybatis.mapper.UserMapper.listAllUser&quot;</span>);</span><br></pre></td></tr></table></figure></div>\n\n<p>这里如果<code>shortName</code>没有重复的话，是可以直接通过简写来查询的：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session.selectList(<span class=\"string\">&quot;listAllUser&quot;</span>);</span><br></pre></td></tr></table></figure></div>\n\n<p>但是通过简写来查询一旦shortName重复了就会抛出以下异常：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224183638060\" alt=\"图片\"></p>\n<p>这里的异常其实就是<code>StrickMap</code>的<code>get</code>方法抛出来的：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184215812.png\" alt=\"image-20231224184215812\"></p>\n<h3 id=\"sql执行流程分析\"><a href=\"#sql执行流程分析\" class=\"headerlink\" title=\"sql执行流程分析\"></a>sql执行流程分析</h3><p>上面我们讲到了，获取到的<code>Mapper</code>接口实际上被包装成为了代理对象，所以我们执行查询语句肯定是执行的代理对象方法，接下来我们就以<code>Mapper</code>接口的代理对象<code>MapperProxy</code>来分析一下查询流程。</p>\n<p>整个<code>sql</code>执行流程可以分为两大步骤：</p>\n<ul>\n<li>一、寻找<code>sql</code></li>\n<li>二、执行<code>sql</code>语句</li>\n</ul>\n<h4 id=\"寻找sql\"><a href=\"#寻找sql\" class=\"headerlink\" title=\"寻找sql\"></a>寻找<code>sql</code></h4><p>首先还是来看一下寻找<code>sql</code>语句的时序图：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184226447.png\" alt=\"image-20231224184226447\"></p>\n<p>1、了解代理模式的应该都知道，调用被代理对象的方法之后实际上执行的就是代理对象的<code>invoke</code>方法</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184238250.png\" alt=\"image-20231224184238250\"></p>\n<p>2、因为我们这里并没有调用<code>Object</code>类中的方法，所以肯定走的<code>else</code>。<code>else</code>中会继续调用<code>MapperProxy</code>内部类<code>MapperMethodInvoker</code>中的方法<code>cachedInvoker</code>，这里面会有一个判断，判断一下我们是不是<code>default</code>方法，因为<code>Jdk1.8</code>中接口中可以新增<code>default</code>方法，而<code>default</code>方法是并不是一个抽象方法，所以也需要特殊处理（刚开始会从缓存里面取，缓存相关知识我们这里先不讲，后面会单独写一篇来分析一下缓存)）。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184249440.png\" alt=\"image-20231224184249440\"></p>\n<p>3、接下来，是构造一个<code>MapperMethod</code>对象,这个对象封装了<code>Mapper</code>接口中对应的方法信息以及对应的<code>sql</code>语句信息：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184259658.png\" alt=\"image-20231224184259658\"></p>\n<p>这里面就会把要执行的<code>sql</code>语句，请求参数，方法返回值全部解析封装成<code>MapperMethod</code>对象，然后后面就可以开始准备执行<code>sql</code>语句了</p>\n<h4 id=\"执行sql语句\"><a href=\"#执行sql语句\" class=\"headerlink\" title=\"执行sql语句\"></a>执行<code>sql</code>语句</h4><p>还是先来看一下执行<code>Sql</code>语句的时序图：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184309570.png\" alt=\"image-20231224184309570\"></p>\n<p>1、我们继续上面的流程进入<code>execute</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184318355.png\" alt=\"image-20231224184318355\"></p>\n<p>2、这里面会根据语句类型以及返回值类型来决定如何执行，本人这里返回的是一个集合，故而我们进入<code>executeForMany</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184325395.png\" alt=\"image-20231224184325395\"></p>\n<p>3、这里面首先会将前面存好的参数进行一次转换，然后绕了这么一圈，回到了起点<code>SqlSession</code>对象，继续调用<code>selectList</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184804748.png\" alt=\"image-20231224184804748\"></p>\n<p>3、接下来又讲流程委派给了<code>Execute</code>去执行<code>query</code>方法，最终又会去调用<code>queryFromDatabase</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184338444.png\" alt=\"image-20231224184338444\"></p>\n<p>4、到这里之后，终于要进入正题了，一般带了这种<code>do</code>开头的方法就是真正做事的，<code>Spring</code>中很多地方也是采用的这种命名方式：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184347582.png\" alt=\"image-20231224184347582\"></p>\n<p>注意，前面我们的<code>sql</code>语句还是占位符的方式，并没有将参数设置进去，所以这里在<code>return</code>上面一行调用<code>prepareStatement</code>方法创建<code>Statement</code>对象的时候会去设置参数，替换占位符。参数如何设置我们先跳过，等把流程执行完了我们在单独分析参数映射和结果集映射。</p>\n<p>5、继续进入<code>PreparedStatementHandler</code>对象的<code>query</code>方法，可以看到，这一步就是调用了<code>jdbc</code>操作对象<code>PreparedStatement</code>中的<code>execute</code>方法，最后一步就是转换结果集然后返回。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184357517.png\" alt=\"image-20231224184357517\"></p>\n<p>到这里，整个<code>SQL</code>语句执行流程分析就结束了，中途有一些参数的存储以及转换并没有深入进去，因为参数的转换并不是核心，只要清楚整个数据的流转流程，我们自己也可以有自己的实现方式，只要存起来最后我们能重新解析读出来就行。</p>\n<h3 id=\"参数映射\"><a href=\"#参数映射\" class=\"headerlink\" title=\"参数映射\"></a>参数映射</h3><p>现在我们来看一下上面在执行查询之前参数是如何进行设置的，我们先进入<code>prepareStatement</code>方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224184433823.png\" alt=\"image-20231224184433823\"></p>\n<p>我们发现，最终是调用了<code>StatementHandler</code>中的<code>parameterize</code>进行参数设置，接下来这里为了节省篇幅，我们不会一步步点进去，直接进入设置参数的方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181859574.png\" alt=\"image-20231224181859574\"></p>\n<p>上面的<code>BaseTypeHandler</code>是一个抽象类，<code>setNonNullParameter</code>并没有实现，都是交给子类去实现，而每一个子类就是对应了数据库的一种类型。下图中就是默认的一个子类<code>StringTypeHandler</code>，里面没什么其他逻辑，就是设置参数。</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181909339.png\" alt=\"image-20231224181909339\"></p>\n<p>可以看到<code>String</code>里面调用了<code>jdbc</code>中的<code>setString</code>方法，而如果是<code>int</code>也会调用<code>setInt</code>方法。<br>看到这些子类如果大家之前阅读过我前面讲的<code>MyBatis</code>参数配置，应该就很明显可以知道，这些子类就是系统默认提供的一些<code>typeHandler</code>。而这些默认的<code>typeHandler</code>会默认被注册并和<code>Java</code>对象进行绑定：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181916896.png\" alt=\"image-20231224181916896\"></p>\n<p>正是因为<code>MyBatis</code>中默认提供了常用数据类型的映射，所以我们写<code>Sql</code>的时候才可以省略参数映射关系，可以直接采用下面的方式，系统可以根据我们参数的类型，自动选择合适的<code>typeHander</code>进行映射：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SQL\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> user_id,user_name <span class=\"keyword\">from</span> lw_user <span class=\"keyword\">where</span> user_name<span class=\"operator\">=</span>#&#123;userName&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>上面这条语句实际上和下面这条是等价的：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SQL\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> user_id,user_name <span class=\"keyword\">from</span> lw_user <span class=\"keyword\">where</span> user_name<span class=\"operator\">=</span>#&#123;userName,jdbcType<span class=\"operator\">=</span><span class=\"type\">VARCHAR</span>&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>或者说我们可以直接指定<code>typeHandler</code>：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SQL\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> user_id,user_name <span class=\"keyword\">from</span> lw_user <span class=\"keyword\">where</span> user_name <span class=\"operator\">=</span> #&#123;userName,jdbcType<span class=\"operator\">=</span><span class=\"type\">VARCHAR</span>,typeHandler<span class=\"operator\">=</span>org.apache.ibatis.type.IntegerTypeHandler&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>这里因为我们配置了<code>typeHandler</code>，所以会优先以配置的<code>typeHandler</code>为主不会再去读取默认的映射，如果类型不匹配就会直接报错了：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181927367.png\" alt=\"image-20231224181927367\"></p>\n<p>看到这里很多人应该就知道了，如果我们自己自定义一个<code>typeHandler</code>，然后就可以配置成我们自己的自定义类。<br>所以接下来就让我们看看如何自定义一个<code>typeHandler</code></p>\n<h4 id=\"自定义typeHandler\"><a href=\"#自定义typeHandler\" class=\"headerlink\" title=\"自定义typeHandler\"></a>自定义<code>typeHandler</code></h4><p>自定义<code>typeHandler</code>需要实现<code>BaseTypeHandler</code>接口，<code>BaseTypeHandler</code>有4个方法，包括结果集映射，为了节省篇幅，代码没有写上来：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lonelyWolf.mybatis.typeHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.CallableStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.PreparedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTypeHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseTypeHandler</span>&lt;String&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNonNullParameter</span><span class=\"params\">(PreparedStatement preparedStatement, <span class=\"type\">int</span> index, String param, JdbcType jdbcType)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;自定义typeHandler生效了&quot;</span>);</span><br><span class=\"line\">        preparedStatement.setString(index,param);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>然后我们改写一下上面的查询语句：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SQL\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> user_id,user_name <span class=\"keyword\">from</span> lw_user <span class=\"keyword\">where</span> user_name<span class=\"operator\">=</span>#&#123;userName,jdbcType<span class=\"operator\">=</span><span class=\"type\">VARCHAR</span>,typeHandler<span class=\"operator\">=</span>com.lonelyWolf.mybatis.typeHandler.MyTypeHandler&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>然后执行，可以看到，自定义的typeHandler生效了：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181936005.png\" alt=\"image-20231224181936005\"></p>\n<h3 id=\"结果集映射\"><a href=\"#结果集映射\" class=\"headerlink\" title=\"结果集映射\"></a>结果集映射</h3><p>接下来让我们看看结果集的映射，回到上面执行sql流程的最后一个方法：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resultSetHandler.handleResultSets(ps)</span><br></pre></td></tr></table></figure></div>\n\n<p>结果集映射里面的逻辑相对来说还是挺复杂的，因为要考虑到非常多的情况，这里我们就不会去深究每一个细节，直接进入到正式解析结果集的代码，下面的5个代码片段就是一个简单的但是完整的解析流程：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181944730.png\" alt=\"image-20231224181944730\"></p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181951520.png\" alt=\"image-20231224181951520\"></p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224181959899.png\" alt=\"image-20231224181959899\"></p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224182008233.png\" alt=\"image-20231224182008233\"></p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224182016140.png\" alt=\"image-20231224182016140\"></p>\n<p>从上面的代码片段我们也可以看到，实际上解析结果集还是很复杂的，就如我们上一篇介绍的复杂查询一样，一个查询可以不断嵌套其他查询，还有延迟加载等等一些复杂的特性<br>的处理，所以逻辑分支是有很多，但是不管怎么处理，最后的核心还是上面的一套流程，最终还是会调用<code>typeHandler</code>来获取查询到的结果。</p>\n<p>是的，你没猜错，这个就是上面我们映射参数的<code>typeHandler</code>，因为<code>typeHandler</code>里面不只是一个设置参数方法，还有获取结果集方法(上面设置参数的时候省略了)。</p>\n<h4 id=\"自定义typeHandler结果集\"><a href=\"#自定义typeHandler结果集\" class=\"headerlink\" title=\"自定义typeHandler结果集\"></a>自定义<code>typeHandler</code>结果集</h4><p>所以说我们还是用上面那个<code>MyTypeHandler</code> 例子来重写一下取值方法(省略了设置参数方法)：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lonelyWolf.mybatis.typeHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.CallableStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.PreparedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTypeHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseTypeHandler</span>&lt;String&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNonNullParameter</span><span class=\"params\">(PreparedStatement preparedStatement, <span class=\"type\">int</span> index, String param, JdbcType jdbcType)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;设置参数-&gt;自定义typeHandler生效了&quot;</span>);</span><br><span class=\"line\">        preparedStatement.setString(index,param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据列名获取结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getNullableResult</span><span class=\"params\">(ResultSet resultSet, String columnName)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;根据columnName获取结果-&gt;自定义typeHandler生效了&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultSet.getString(columnName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据列的下标来获取结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getNullableResult</span><span class=\"params\">(ResultSet resultSet, <span class=\"type\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;根据columnIndex获取结果-&gt;自定义typeHandler生效了&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultSet.getString(columnIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理存储过程的结果集</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getNullableResult</span><span class=\"params\">(CallableStatement callableStatement, <span class=\"type\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> callableStatement.getString(columnIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>改写Mapper映射文件配置：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"XML\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;MyUserResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;lwUser&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> <span class=\"attr\">typeHandler</span>=<span class=\"string\">&quot;com.lonelyWolf.mybatis.typeHandler.MyTypeHandler&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_name&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userName&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;listUserByUserName&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;String&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;MyUserResultMap&quot;</span>&gt;</span></span><br><span class=\"line\">        select user_id,user_name from lw_user where user_name=#&#123;userName,jdbcType=VARCHAR,typeHandler=com.lonelyWolf.mybatis.typeHandler.MyTypeHandler&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>执行之后输出如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224182028959.png\" alt=\"image-20231224182028959\"></p>\n<p>因为我们属性上面只配置了一个属性，所以只输出了一次。</p>\n<h3 id=\"工作流程图\"><a href=\"#工作流程图\" class=\"headerlink\" title=\"工作流程图\"></a>工作流程图</h3><p>上面介绍了代码的流转，可能绕来绕去有点晕，所以我们来画一个主要的对象之间流程图来更加清晰的展示一下<code>MyBatis</code>主要工作流程：</p>\n<p><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224182036640.png\" alt=\"image-20231224182036640\"></p>\n<p>从上面的工作流程图上我们可以看到，<code>SqlSession</code>下面还有4大对象，这4大对象也很重要，后面学习拦截器的时候就是针对这4大对象进行的拦截，关于这4大对象的具体详情，我们下一篇文章再展开分析。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文主要分析了<code>MyBatis</code>的<code>SQL</code>执行流程。在分析流程的过程中，我们也举例论证了如何自定义t<code>ypeHandler</code>来实现自定义的参数映射和结果集映射，不过<code>MyBatis</code>中提供的默认映射其实可以满足大部分的需求，如果我们对某些属性需要特殊处理，那么就可以采用自定义的<code>typeHandler</code>来实现，相信如果本文如果读懂了，以下几点大家应该至少会有一个清晰的认识：</p>\n<p>1、Mapper接口和映射文件是如何进行绑定的</p>\n<p>2、MyBatis中SQL语句的执行流程</p>\n<p>3、自定义MyBatis中的参数设置处理器typeHandler</p>\n<p>4、自定义MyBatis中结果集处理器typeHandler</p>\n<p>当然，其中很多细节并没有提到，而看源码我们也并不需要追求每一行代码都能看懂，就比如我们一个稍微复杂一点的业务系统，即使我们是项目开发者如果某一个模块不是本人负责的，恐怕也很难搞清楚每一行代码的含义。所以对于MyBatis及其他框架的源码中也是一样，首先应该从大局入手，掌握整体流程和设计思想，然后如果对某些实现细节感兴趣，再深入进行了解。</p>\n","text":"概要在MyBatis中，利用编程式进行数据查询，主要就是下面几行代码：1<br>2<br>3<br>SqlSession session = sqlSessionFactory.openSession();<br>UserMapper userMapper = session.g","raw":null,"photos":[],"categories":[{"name":"框架","slug":"框架","count":1,"path":"api/categories/框架.json"}],"tags":[{"name":"MyBatis","slug":"MyBatis","count":1,"path":"api/tags/MyBatis.json"},{"name":"框架","slug":"框架","count":1,"path":"api/tags/框架.json"}]}]}
{"title":"Java 泛型 T，E，K，V，?，傻傻分不清？","slug":"Java-泛型-T，E，K，V，-，傻傻分不清？","date":"2023-12-24T11:56:56.000Z","updated":"2023-12-24T11:56:56.000Z","comments":true,"path":"api/articles/Java-泛型-T，E，K，V，-，傻傻分不清？.json","photos":[],"excerpt":"","covers":["https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224195911158.png","https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224195846999","https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224195847102","https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224195934147.png","https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224195847276","https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224195949975.png"],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型。</p>\n<p>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p>\n<h2 id=\"泛型带来的好处\"><a href=\"#泛型带来的好处\" class=\"headerlink\" title=\"泛型带来的好处\"></a><strong>泛型带来的好处</strong></h2><p>在没有泛型的情况的下，通过对类型 Object 的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是本身就是一个安全隐患。</p>\n<p>那么泛型的好处就是在编译的时候能够检查类型安全，并且所有的强制转换都是自动和隐式的。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlmapperGeneric</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> T t;    </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(T t)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.t = t; </span><br><span class=\"line\">  &#125;    </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> T <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t; </span><br><span class=\"line\">  &#125;      </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do nothing    </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 不指定类型</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">noSpecifyType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">GlmapperGeneric</span> <span class=\"variable\">glmapperGeneric</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GlmapperGeneric</span>();    </span><br><span class=\"line\">    glmapperGeneric.set(<span class=\"string\">&quot;test&quot;</span>);    </span><br><span class=\"line\">    <span class=\"comment\">// 需要强制类型转换    </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> (String) glmapperGeneric.get();    </span><br><span class=\"line\">    System.out.println(test);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 指定类型    </span></span><br><span class=\"line\"><span class=\"comment\">  */</span>  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">specifyType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    GlmapperGeneric&lt;String&gt; glmapperGeneric = <span class=\"keyword\">new</span> <span class=\"title class_\">GlmapperGeneric</span>();    </span><br><span class=\"line\">    glmapperGeneric.set(<span class=\"string\">&quot;test&quot;</span>);    </span><br><span class=\"line\">    <span class=\"comment\">// 不需要强制类型转换    </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> glmapperGeneric.get();</span><br><span class=\"line\">    System.out.println(test);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>上面这段代码中的 specifyType 方法中 省去了强制转换，可以在编译时候检查类型安全，可以用在类，方法，接口上。</p>\n<h2 id=\"泛型中通配符\"><a href=\"#泛型中通配符\" class=\"headerlink\" title=\"泛型中通配符\"></a><strong>泛型中通配符</strong></h2><p>我们在定义泛型类，泛型方法，泛型接口的时候经常会碰见很多不同的通配符，比如 T，E，K，V 等等，这些通配符又都是什么意思呢？</p>\n<h3 id=\"常用的-T，E，K，V，？\"><a href=\"#常用的-T，E，K，V，？\" class=\"headerlink\" title=\"常用的 T，E，K，V，？\"></a>常用的 T，E，K，V，？</h3><p>本质上这些个都是通配符，没啥区别，只不过是编码时的一种约定俗成的东西。比如上述代码中的 T ，我们可以换成 A-Z 之间的任何一个 字母都可以，并不会影响程序的正常运行，但是如果换成其他的字母代替 T ，在可读性上可能会弱一些。通常情况下，T，E，K，V，？是这样约定的：</p>\n<ul>\n<li>？表示不确定的 java 类型</li>\n<li>T (type) 表示具体的一个java类型</li>\n<li>K V (key value) 分别代表java键值中的Key Value</li>\n<li>E (element) 代表Element</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"？无界通配符\"><a href=\"#？无界通配符\" class=\"headerlink\" title=\"？无界通配符\"></a>？无界通配符</h3><p>先从一个小例子看起 。</p>\n<p>我有一个父类 Animal 和几个子类，如狗、猫等，现在我需要一个动物的列表，我的第一个想法是像这样的：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Animal&gt; listAnimals</span><br></pre></td></tr></table></figure></div>\n\n<p>但是老板的想法确实这样的：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span>&gt; listAnimals</span><br></pre></td></tr></table></figure></div>\n\n<p>为什么要使用通配符而不是简单的泛型呢？通配符其实在声明局部变量时是没有什么意义的，但是当你为一个方法声明一个参数时，它是非常重要的。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">countLegs</span> <span class=\"params\">(List&lt;? extends Animal &gt; animals )</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">retVal</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;    </span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( Animal animal : animals ) &#123;</span><br><span class=\"line\">    retVal += animal.countLegs();    </span><br><span class=\"line\">  &#125;    </span><br><span class=\"line\">  <span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">countLegs1</span> <span class=\"params\">(List&lt; Animal &gt; animals )</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">retVal</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;     </span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( Animal animal : animals ) &#123;</span><br><span class=\"line\">    retVal += animal.countLegs();    </span><br><span class=\"line\">  &#125;    </span><br><span class=\"line\">  <span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">  List&lt;Dog&gt; dogs = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// 不会报错    </span></span><br><span class=\"line\">  countLegs( dogs ); </span><br><span class=\"line\">  <span class=\"comment\">// 报错    </span></span><br><span class=\"line\">  countLegs1(dogs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>当调用 countLegs1 时，就会飘红，提示的错误信息如下：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224195911158.png\"/></div></div>\n\n<p>所以，对于不确定或者不关心实际要操作的类型，可以使用无限制通配符（尖括号里一个问号，即 &lt;?&gt; ），表示可以持有任何类型。像 countLegs 方法中，限定了上届，但是不关心具体类型是什么，所以对于传入的 Animal 的所有子类都可以支持，并且不会报错。而 countLegs1 就不行。</p>\n<h3 id=\"上界通配符-extends-E\"><a href=\"#上界通配符-extends-E\" class=\"headerlink\" title=\"上界通配符 &lt; ? extends E&gt;\"></a>上界通配符 &lt; ? extends E&gt;</h3><blockquote>\n<p>上界：用 extends 关键字声明，表示参数化的类型可能是所指定的类型，或者是此类型的子类。</p>\n</blockquote>\n<p>在类型参数中使用 extends 表示这个泛型中的参数必须是 E 或者 E 的子类，这样有两个好处：</p>\n<ul>\n<li>如果传入的类型不是 E 或者 E 的子类，编译不成功</li>\n<li>泛型中可以使用 E 的方法，要不然还得强转成 E 才能使用</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;K <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span>, E <span class=\"keyword\">extends</span> <span class=\"title class_\">B</span>&gt; E <span class=\"title function_\">test</span><span class=\"params\">(K arg1, E arg2)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">E</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> arg2;    </span><br><span class=\"line\">  arg2.compareTo(arg1);    </span><br><span class=\"line\">  <span class=\"comment\">//.....    return result;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>类型参数列表中如果有多个类型参数上限，用逗号分开</p>\n</blockquote>\n<h3 id=\"下界通配符-super-E\"><a href=\"#下界通配符-super-E\" class=\"headerlink\" title=\"下界通配符 &lt; ? super E&gt;\"></a>下界通配符 &lt; ? super E&gt;</h3><blockquote>\n<p>下界: 用 super 进行声明，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至 Object</p>\n</blockquote>\n<p>在类型参数中使用 super 表示这个泛型中的参数必须是 E 或者 E 的父类。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(List&lt;? <span class=\"built_in\">super</span> T&gt; dst, List&lt;T&gt; src)</span> &#123;    </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (T t : src) &#123;</span><br><span class=\"line\">    dst.add(t);    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">  List&lt;Dog&gt; dogs = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();    </span><br><span class=\"line\">  List&lt;Animal&gt; animals = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();    </span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Test3</span>().test(animals,dogs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Dog 是 Animal 的子类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>dst 类型 “大于等于” src 的类型，这里的“大于等于”是指 dst 表示的范围比 src 要大，因此装得下 dst 的容器也就能装 src 。</p>\n<h3 id=\"？和-T-的区别\"><a href=\"#？和-T-的区别\" class=\"headerlink\" title=\"？和 T 的区别\"></a>？和 T 的区别</h3><div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224195846999\"/></div></div>\n\n<p>？和 T 都表示不确定的类型，区别在于我们可以对 T 进行操作，但是对 ？不行，比如如下这种 ：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以</span></span><br><span class=\"line\"><span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> operate();</span><br><span class=\"line\"><span class=\"comment\">// 不可以？</span></span><br><span class=\"line\">car = operate();</span><br></pre></td></tr></table></figure></div>\n\n<p>简单总结下：</p>\n<p>T 是一个 确定的 类型，通常用于泛型类和泛型方法的定义，？是一个 不确定 的类型，通常用于泛型方法的调用代码和形参，不能用于定义类和泛型方法。</p>\n<h4 id=\"区别1：通过-T-来-确保-泛型参数的一致性\"><a href=\"#区别1：通过-T-来-确保-泛型参数的一致性\" class=\"headerlink\" title=\"区别1：通过 T 来 确保 泛型参数的一致性\"></a>区别1：通过 T 来 确保 泛型参数的一致性</h4><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过 T 来 确保 泛型参数的一致性</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span>&gt; voidtest(List&lt;T&gt; dest, List&lt;T&gt; src)</span><br><span class=\"line\"><span class=\"comment\">//通配符是 不确定的，所以这个方法不能保证两个 List 具有相同的元素类型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(List&lt;? extends Number&gt; dest, List&lt;? extends Number&gt; src)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>像下面的代码中，约定的 T 是 Number 的子类才可以，但是申明时是用的 String ，所以就会飘红报错。</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224195847102\"/></div></div>\n\n<p>不能保证两个 List 具有相同的元素类型的情况</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlmapperGeneric&lt;String&gt; glmapperGeneric = <span class=\"keyword\">new</span> <span class=\"title class_\">GlmapperGeneric</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;String&gt; dest = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;Number&gt; src = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">glmapperGeneric.testNon(dest,src);</span><br></pre></td></tr></table></figure></div>\n\n<p>上面的代码在编译器并不会报错，但是当进入到 testNon 方法内部操作时（比如赋值），对于 dest 和 src 而言，就还是需要进行类型转换。</p>\n<h4 id=\"区别2：类型参数可以多重限定而通配符不行\"><a href=\"#区别2：类型参数可以多重限定而通配符不行\" class=\"headerlink\" title=\"区别2：类型参数可以多重限定而通配符不行\"></a>区别2：类型参数可以多重限定而通配符不行</h4><div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224195934147.png\"/></div></div>\n\n<p>使用 &amp; 符号设定多重边界（Multi Bounds)，指定泛型类型 T 必须是 MultiLimitInterfaceA 和 MultiLimitInterfaceB 的共有子类型，此时变量 t 就具有了所有限定的方法和属性。对于通配符来说，因为它不是一个确定的类型，所以不能进行多重限定。</p>\n<h4 id=\"区别3：通配符可以使用超类限定而类型参数不行\"><a href=\"#区别3：通配符可以使用超类限定而类型参数不行\" class=\"headerlink\" title=\"区别3：通配符可以使用超类限定而类型参数不行\"></a>区别3：通配符可以使用超类限定而类型参数不行</h4><p>类型参数 T 只具有 一种 类型限定方式：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span></span><br></pre></td></tr></table></figure></div>\n\n<p>但是通配符 ? 可以进行 两种限定：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span>? <span class=\"built_in\">super</span> A</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"Class-和-Class-区别\"><a href=\"#Class-和-Class-区别\" class=\"headerlink\" title=\"** Class 和 Class&lt;?&gt; 区别**\"></a>** Class<T> 和 Class&lt;?&gt; 区别**</h2><p>前面介绍了 ？和 T 的区别，那么对于，Class<T> 和 &lt;Class<?> 又有什么区别呢？Class<T> 和 Class<?></p>\n<p>最常见的是在反射场景下的使用，这里以用一段发射的代码来说明下。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过反射的方式生成  multiLimit </span></span><br><span class=\"line\"><span class=\"comment\">// 对象，这里比较明显的是，我们需要使用强制类型转换</span></span><br><span class=\"line\"><span class=\"type\">MultiLimit</span> <span class=\"variable\">multiLimit</span> <span class=\"operator\">=</span> (MultiLimit)Class.forName(<span class=\"string\">&quot;com.glmapper.bridge.boot.generic.MultiLimit&quot;</span>).newInstance();</span><br></pre></td></tr></table></figure></div>\n\n<p>对于上述代码，在运行期，如果反射的类型不是 MultiLimit 类，那么一定会报<br> java.lang.ClassCastException 错误。</p>\n<p>对于这种情况，则可以使用下面的代码来代替，使得在在编译期就能直接 检查到类型的问题：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224195847276\"/></div></div>\n\n<p>Class<T> 在实例化的时候，T 要替换成具体类。Class&lt;?&gt; 它是个通配泛型，? 可以代表任何类型，所以主要用于声明时的限制情况。比如，我们可以这样做申明：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Class&lt;?&gt; clazz;</span><br><span class=\"line\"><span class=\"comment\">// 不可以，因为 T 需要指定类型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Class&lt;T&gt; clazzT;</span><br></pre></td></tr></table></figure></div>\n\n<p>所以当不知道定声明什么类型的 Class 的时候可以定义一 个Class&lt;?&gt;。</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/image-20231224195949975.png\"/></div></div>\n\n\n\n<p>那如果也想 public Class<T> clazzT; 这样的话，就必须让当前的类也指定 T ，</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test3</span>&lt;T&gt; &#123;    </span><br><span class=\"line\">  <span class=\"keyword\">public</span> Class&lt;?&gt; clazz;    <span class=\"comment\">// 不会报错    </span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Class&lt;T&gt; clazzT;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a><strong>小结</strong></h2><p>本文零碎整理了下 JAVA 泛型中的一些点，不是很全，仅供参考。</p>\n","categories":[{"name":"Java","slug":"Java","count":1,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"},{"name":"泛型","slug":"泛型","count":1,"path":"api/tags/泛型.json"}]}
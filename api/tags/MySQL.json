{"name":"MySQL","slug":"MySQL","count":1,"posts":[{"title":"MySQL大表优化方案","slug":"MySQL大表优化方案","date":"2023-12-24T11:42:52.000Z","updated":"2023-12-24T11:42:52.000Z","comments":true,"pin":null,"path":"api/articles/MySQL大表优化方案.json","excerpt":"","keywords":null,"cover":"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194431917","content":"<p>当MySQL单表记录数过大时，增删改查性能都会急剧下降，可以参考以下步骤来优化：</p>\n<h3 id=\"单表优化\"><a href=\"#单表优化\" class=\"headerlink\" title=\"单表优化\"></a><strong>单表优化</strong></h3><p>除非单表数据未来会一直不断上涨，否则不要一开始就考虑拆分，拆分会带来逻辑、部署、运维的各种复杂度，一般以整型值为主的表在千万级以下，字符串为主的表在五百万以下是没有太大问题的。而事实上很多时候MySQL单表的性能依然有不少优化空间，甚至能正常支撑千万级以上的数据量：</p>\n<h4 id=\"字段\"><a href=\"#字段\" class=\"headerlink\" title=\"字段\"></a>字段</h4><ul>\n<li>尽量使用TINYINT、SMALLINT、MEDIUM_INT作为整数类型而非INT，如果非负则加上UNSIGNED</li>\n<li>VARCHAR的长度只分配真正需要的空间</li>\n<li>使用枚举或整数代替字符串类型</li>\n<li>尽量使用TIMESTAMP而非DATETIME，</li>\n<li>单表不要有太多字段，建议在20以内</li>\n<li>避免使用NULL字段，很难查询优化且占用额外索引空间</li>\n<li>用整型来存IP</li>\n</ul>\n<h4 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h4><ul>\n<li>索引并不是越多越好，要根据查询有针对性的创建，考虑在WHERE和ORDER BY命令上涉及的列建立索引，可根据EXPLAIN来查看是否用了索引还是全表扫描</li>\n<li>应尽量避免在WHERE子句中对字段进行NULL值判断，否则将导致引擎放弃使用索引而进行全表扫描</li>\n<li>值分布很稀少的字段不适合建索引，例如”性别”这种只有两三个值的字段</li>\n<li>字符字段只建前缀索引</li>\n<li>字符字段最好不要做主键</li>\n<li>不用外键，由程序保证约束</li>\n<li>尽量不用UNIQUE，由程序保证约束</li>\n<li>使用多列索引时主意顺序和查询条件保持一致，同时删除不必要的单列索引</li>\n</ul>\n<h4 id=\"查询SQL\"><a href=\"#查询SQL\" class=\"headerlink\" title=\"查询SQL\"></a>查询SQL</h4><ul>\n<li>可通过开启慢查询日志来找出较慢的SQL</li>\n<li>不做列运算：SELECT id WHERE age + 1 &#x3D; 10，任何对列的操作都将导致表扫描，它包括数据库教程函数、计算表达式等等，查询时要尽可能将操作移至等号右边</li>\n<li>sql语句尽可能简单：一条sql只能在一个cpu运算；大语句拆小语句，减少锁时间；一条大sql可以堵死整个库</li>\n<li>不用SELECT *</li>\n<li>OR改写成IN：OR的效率是n级别，IN的效率是log(n)级别，in的个数建议控制在200以内</li>\n<li>不用函数和触发器，在应用程序实现</li>\n<li>避免%xxx式查询</li>\n<li>少用JOIN</li>\n<li>使用同类型进行比较，比如用’123’和’123’比，123和123比</li>\n<li>尽量避免在WHERE子句中使用!&#x3D;或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描</li>\n<li>对于连续数值，使用BETWEEN不用IN：SELECT id FROM t WHERE num BETWEEN 1 AND 5</li>\n<li>列表数据不要拿全表，要使用LIMIT来分页，每页数量也不要太大</li>\n</ul>\n<h4 id=\"引擎\"><a href=\"#引擎\" class=\"headerlink\" title=\"引擎\"></a><strong>引擎</strong></h4><p>目前广泛使用的是MyISAM和InnoDB两种引擎：</p>\n<h5 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h5><p>MyISAM引擎是MySQL 5.1及之前版本的默认引擎，它的特点是：</p>\n<ul>\n<li>不支持行锁，读取时对需要读到的所有表加锁，写入时则对表加排它锁</li>\n<li>不支持事务</li>\n<li>不支持外键</li>\n<li>不支持崩溃后的安全恢复</li>\n<li>在表有读取查询的同时，支持往表中插入新纪录</li>\n<li>支持BLOB和TEXT的前500个字符索引，支持全文索引</li>\n<li>支持延迟更新索引，极大提升写入性能</li>\n<li>对于不会进行修改的表，支持压缩表，极大减少磁盘空间占用</li>\n</ul>\n<h5 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h5><p>InnoDB在MySQL 5.5后成为默认索引，它的特点是：</p>\n<ul>\n<li>支持行锁，采用MVCC来支持高并发</li>\n<li>支持事务</li>\n<li>支持外键</li>\n<li>支持崩溃后的安全恢复</li>\n<li>不支持全文索引</li>\n</ul>\n<p>总体来讲，MyISAM适合SELECT密集型的表，而InnoDB适合INSERT和UPDATE密集型的表</p>\n<h4 id=\"系统调优参数\"><a href=\"#系统调优参数\" class=\"headerlink\" title=\"系统调优参数\"></a><strong>系统调优参数</strong></h4><p>可以使用下面几个工具来做基准测试：</p>\n<ul>\n<li>sysbench：一个模块化，跨平台以及多线程的性能测试工具</li>\n<li>iibench-mysql：基于 Java 的 MySQL&#x2F;Percona&#x2F;MariaDB 索引进行插入性能测试工具</li>\n<li>tpcc-mysql：Percona开发的TPC-C测试工具</li>\n</ul>\n<p>具体的调优参数内容较多，具体可参考官方文档，这里介绍一些比较重要的参数：</p>\n<ul>\n<li>back_log：back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。也就是说，如果MySql的连接数据达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。可以从默认的50升至500</li>\n<li>wait_timeout：数据库连接闲置时间，闲置连接会占用内存资源。可以从默认的8小时减到半小时</li>\n<li>max_user_connection: 最大连接数，默认为0无上限，最好设一个合理上限</li>\n<li>thread_concurrency：并发线程数，设为CPU核数的两倍</li>\n<li>skip_name_resolve：禁止对外部连接进行DNS解析，消除DNS解析时间，但需要所有远程主机用IP访问</li>\n<li>key_buffer_size：索引块的缓存大小，增加会提升索引处理速度，对MyISAM表性能影响最大。对于内存4G左右，可设为256M或384M，通过查询show status like ‘key_read%’，保证key_reads &#x2F; key_read_requests在0.1%以下最好</li>\n<li>innodb_buffer_pool_size：缓存数据块和索引块，对InnoDB表性能影响最大。通过查询show status like ‘Innodb_buffer_pool_read%’，保证 (Innodb_buffer_pool_read_requests – Innodb_buffer_pool_reads) &#x2F; Innodb_buffer_pool_read_requests越高越好</li>\n<li>innodb_additional_mem_pool_size：InnoDB存储引擎用来存放数据字典信息以及一些内部数据结构的内存空间大小，当数据库对象非常多的时候，适当调整该参数的大小以确保所有数据都能存放在内存中提高访问效率，当过小的时候，MySQL会记录Warning信息到数据库的错误日志中，这时就需要该调整这个参数大小</li>\n<li>innodb_log_buffer_size：InnoDB存储引擎的事务日志所使用的缓冲区，一般来说不建议超过32MB</li>\n<li>query_cache_size：缓存MySQL中的ResultSet，也就是一条SQL语句执行的结果集，所以仅仅只能针对select语句。当某个表的数据有任何任何变化，都会导致所有引用了该表的select语句在Query Cache中的缓存数据失效。所以，当我们的数据变化非常频繁的情况下，使用Query Cache可能会得不偿失。根据命中率(Qcache_hits&#x2F;(Qcache_hits+Qcache_inserts)*100))进行调整，一般不建议太大，256MB可能已经差不多了，大型的配置型静态数据可适当调大.<br>可以通过命令show status like ‘Qcache_%’查看目前系统Query catch使用大小</li>\n<li>read_buffer_size：MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。如果对表的顺序扫描请求非常频繁，可以通过增加该变量值以及内存缓冲区大小提高其性能</li>\n<li>sort_buffer_size：MySql执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。如果不能，可以尝试增加sort_buffer_size变量的大小</li>\n<li>read_rnd_buffer_size：MySql的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。</li>\n<li>record_buffer：每个进行一个顺序扫描的线程为其扫描的每张表分配这个大小的一个缓冲区。如果你做很多顺序扫描，可能想要增加该值</li>\n<li>thread_cache_size：保存当前没有与连接关联但是准备为后面新的连接服务的线程，可以快速响应连接的线程请求而无需创建新的</li>\n<li>table_cache：类似于thread_cache_size，但用来缓存表文件，对InnoDB效果不大，主要用于MyISAM</li>\n</ul>\n<h4 id=\"升级硬件\"><a href=\"#升级硬件\" class=\"headerlink\" title=\"升级硬件\"></a><strong>升级硬件</strong></h4><p>Scale up，这个不多说了，根据MySQL是CPU密集型还是I&#x2F;O密集型，通过提升CPU和内存、使用SSD，都能显著提升MySQL性能</p>\n<h3 id=\"读写分离\"><a href=\"#读写分离\" class=\"headerlink\" title=\"读写分离\"></a>读写分离</h3><p>也是目前常用的优化，从库读主库写，一般不要采用双主或多主引入很多复杂性，尽量采用文中的其他方案来提高性能。同时目前很多拆分的解决方案同时也兼顾考虑了读写分离</p>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>缓存可以发生在这些层次：</p>\n<ul>\n<li>MySQL内部：在系统调优参数介绍了相关设置</li>\n<li>数据访问层：比如MyBatis针对SQL语句做缓存，而Hibernate可以精确到单个记录，这里缓存的对象主要是持久化对象Persistence Object</li>\n<li>应用服务层：这里可以通过编程手段对缓存做到更精准的控制和更多的实现策略，这里缓存的对象是数据传输对象Data Transfer Object</li>\n<li>Web层：针对web页面做缓存</li>\n<li>浏览器客户端：用户端的缓存</li>\n</ul>\n<p>可以根据实际情况在一个层次或多个层次结合加入缓存。这里重点介绍下服务层的缓存实现，目前主要有两种方式：</p>\n<ul>\n<li>直写式（Write Through）：在数据写入数据库后，同时更新缓存，维持数据库与缓存的一致性。这也是当前大多数应用缓存框架如Spring Cache的工作方式。这种实现非常简单，同步好，但效率一般。</li>\n<li>回写式（Write Back）：当有数据要写入数据库时，只会更新缓存，然后异步批量的将缓存数据同步到数据库上。这种实现比较复杂，需要较多的应用逻辑，同时可能会产生数据库与缓存的不同步，但效率非常高。</li>\n</ul>\n<h3 id=\"表分区\"><a href=\"#表分区\" class=\"headerlink\" title=\"表分区\"></a>表分区</h3><p>MySQL在5.1版引入的分区是一种简单的水平拆分，用户需要在建表的时候加上分区参数，对应用是透明的无需修改代码</p>\n<p>对用户来说，分区表是一个独立的逻辑表，但是底层由多个物理子表组成，实现分区的代码实际上是通过对一组底层表的对象封装，但对SQL层来说是一个完全封装底层的黑盒子。MySQL实现分区的方式也意味着索引也是按照分区的子表定义，没有全局索引</p>\n<p>用户的SQL语句是需要针对分区表做优化，SQL条件中要带上分区条件的列，从而使查询定位到少量的分区上，否则就会扫描全部分区，可以通过EXPLAIN PARTITIONS来查看某条SQL语句会落在那些分区上，从而进行SQL优化，如下图5条记录落在两个分区上：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SQL\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> explain partitions <span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"number\">1</span>) <span class=\"keyword\">from</span> user_partition <span class=\"keyword\">where</span> id <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> id <span class=\"operator\">|</span> select_type <span class=\"operator\">|</span> <span class=\"keyword\">table</span>          <span class=\"operator\">|</span> partitions <span class=\"operator\">|</span> type  <span class=\"operator\">|</span> possible_keys <span class=\"operator\">|</span> key     <span class=\"operator\">|</span> key_len <span class=\"operator\">|</span> <span class=\"keyword\">ref</span>  <span class=\"operator\">|</span> <span class=\"keyword\">rows</span> <span class=\"operator\">|</span> Extra                    <span class=\"operator\">|</span><span class=\"operator\">+</span><span class=\"comment\">----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span>  <span class=\"number\">1</span> <span class=\"operator\">|</span> SIMPLE      <span class=\"operator\">|</span> user_partition <span class=\"operator\">|</span> p1,p4      <span class=\"operator\">|</span> <span class=\"keyword\">range</span> <span class=\"operator\">|</span> <span class=\"keyword\">PRIMARY</span>       <span class=\"operator\">|</span> <span class=\"keyword\">PRIMARY</span> <span class=\"operator\">|</span> <span class=\"number\">8</span>       <span class=\"operator\">|</span> <span class=\"keyword\">NULL</span> <span class=\"operator\">|</span>    <span class=\"number\">5</span> <span class=\"operator\">|</span> <span class=\"keyword\">Using</span> <span class=\"keyword\">where</span>; <span class=\"keyword\">Using</span> index <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"type\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>分区的好处是：</p>\n<ul>\n<li>可以让单表存储更多的数据</li>\n<li>分区表的数据更容易维护，可以通过清楚整个分区批量删除大量数据，也可以增加新的分区来支持新插入的数据。另外，还可以对一个独立分区进行优化、检查、修复等操作</li>\n<li>部分查询能够从查询条件确定只落在少数分区上，速度会很快</li>\n<li>分区表的数据还可以分布在不同的物理设备上，从而搞笑利用多个硬件设备</li>\n<li>可以使用分区表赖避免某些特殊瓶颈，例如InnoDB单个索引的互斥访问、ext3文件系统的inode锁竞争</li>\n<li>可以备份和恢复单个分区</li>\n</ul>\n<p>分区的限制和缺点：</p>\n<ul>\n<li>一个表最多只能有1024个分区</li>\n<li>如果分区字段中有主键或者唯一索引的列，那么所有主键列和唯一索引列都必须包含进来</li>\n<li>分区表无法使用外键约束</li>\n<li>NULL值会使分区过滤无效</li>\n<li>所有分区必须使用相同的存储引擎</li>\n</ul>\n<p>分区的类型：</p>\n<ul>\n<li>RANGE分区：基于属于一个给定连续区间的列值，把多行分配给分区</li>\n<li>LIST分区：类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择</li>\n<li>HASH分区：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL中有效的、产生非负整数值的任何表达式</li>\n<li>KEY分区：类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数。必须有一列或多列包含整数值</li>\n</ul>\n<p>分区适合的场景有：</p>\n<ul>\n<li>最适合的场景数据的时间序列性比较强，则可以按时间来分区，如下所示：</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SQL\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> members (    </span><br><span class=\"line\">  firstname <span class=\"type\">VARCHAR</span>(<span class=\"number\">25</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,    </span><br><span class=\"line\">  lastname <span class=\"type\">VARCHAR</span>(<span class=\"number\">25</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,    </span><br><span class=\"line\">  username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,    </span><br><span class=\"line\">  email <span class=\"type\">VARCHAR</span>(<span class=\"number\">35</span>),    </span><br><span class=\"line\">  joined <span class=\"type\">DATE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">RANGE</span>( <span class=\"keyword\">YEAR</span>(joined) ) (    </span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> p0 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"number\">1960</span>),    </span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> p1 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"number\">1970</span>),    </span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> p2 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"number\">1980</span>),    </span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> p3 <span class=\"keyword\">VALUES</span> LESS THAN (<span class=\"number\">1990</span>),    </span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> p4 <span class=\"keyword\">VALUES</span> LESS THAN MAXVALUE</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></div>\n\n<p>查询时加上时间范围条件效率会非常高，同时对于不需要的历史数据能很容的批量删除。</p>\n<ul>\n<li>如果数据有明显的热点，而且除了这部分数据，其他数据很少被访问到，那么可以将热点数据单独放在一个分区，让这个分区的数据能够有机会都缓存在内存中，查询时只访问一个很小的分区表，能够有效使用索引和缓存</li>\n</ul>\n<p>另外MySQL有一种早期的简单的分区实现 - 合并表（merge table），限制较多且缺乏优化，不建议使用，应该用新的分区机制来替代</p>\n<h3 id=\"垂直拆分\"><a href=\"#垂直拆分\" class=\"headerlink\" title=\"垂直拆分\"></a>垂直拆分</h3><p>垂直分库是根据数据库里面的数据表的相关性进行拆分，比如：一个数据库里面既存在用户数据，又存在订单数据，那么垂直拆分可以把用户数据放到用户库、把订单数据放到订单库。垂直分表是对数据表进行垂直拆分的一种方式，常见的是把一个多字段的大表按常用字段和非常用字段进行拆分，每个表里面的数据记录数一般情况下是相同的，只是字段不一样，使用主键关联</p>\n<p>比如原始的用户表是：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194431917\"/></div></div>\n\n<p>垂直拆分后是：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194432458\"/></div></div>\n\n<p>垂直拆分的优点是：</p>\n<ul>\n<li>可以使得行数据变小，一个数据块(Block)就能存放更多的数据，在查询时就会减少I&#x2F;O次数(每次查询时读取的Block 就少)</li>\n<li>可以达到最大化利用Cache的目的，具体在垂直拆分的时候可以将不常变的字段放一起，将经常改变的放一起</li>\n<li>数据维护简单</li>\n</ul>\n<p>缺点是：</p>\n<ul>\n<li>主键出现冗余，需要管理冗余列</li>\n<li>会引起表连接JOIN操作（增加CPU开销）可以通过在业务服务器上进行join来减少数据库压力</li>\n<li>依然存在单表数据量过大的问题（需要水平拆分）</li>\n<li>事务处理复杂</li>\n</ul>\n<h3 id=\"水平拆分\"><a href=\"#水平拆分\" class=\"headerlink\" title=\"水平拆分\"></a><strong>水平拆分</strong></h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>水平拆分是通过某种策略将数据分片来存储，分库内分表和分库两部分，每片数据会分散到不同的MySQL表或库，达到分布式的效果，能够支持非常大的数据量。</p>\n<p>前面的表分区本质上也是一种特殊的库内分表</p>\n<p>库内分表，仅仅是单纯的解决了单一表数据过大的问题，由于没有把表的数据分布到不同的机器上，因此对于减轻MySQL服务器的压力来说，并没有太大的作用，大家还是竞争同一个物理机上的IO、CPU、网络，这个就要通过分库来解决</p>\n<p>前面垂直拆分的用户表如果进行水平拆分，结果是：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194432665\"/></div></div>\n\n<p>实际情况中往往会是垂直拆分和水平拆分的结合，即将Users_A_M和Users_N_Z再拆成Users和UserExtras，这样一共四张表</p>\n<p>水平拆分的优点是:</p>\n<ul>\n<li>不存在单库大数据和高并发的性能瓶颈</li>\n<li>应用端改造较少</li>\n<li>提高了系统的稳定性和负载能力</li>\n</ul>\n<p>缺点是：</p>\n<ul>\n<li>分片事务一致性难以解决</li>\n<li>跨节点Join性能差，逻辑复杂</li>\n<li>数据多次扩展难度跟维护量极大</li>\n</ul>\n<h4 id=\"分片原则\"><a href=\"#分片原则\" class=\"headerlink\" title=\"分片原则\"></a>分片原则</h4><ul>\n<li>能不分就不分，参考单表优化</li>\n<li>分片数量尽量少，分片尽量均匀分布在多个数据结点上，因为一个查询SQL跨分片越多，则总体性能越差，虽然要好于所有数据在一个分片的结果，只在必要的时候进行扩容，增加分片数量</li>\n<li>分片规则需要慎重选择做好提前规划，分片规则的选择，需要考虑数据的增长模式，数据的访问模式，分片关联性问题，以及分片扩容问题，最近的分片策略为范围分片，枚举分片，一致性Hash分片，这几种分片都有利于扩容</li>\n<li>尽量不要在一个事务中的SQL跨越多个分片，分布式事务一直是个不好处理的问题</li>\n<li>查询条件尽量优化，尽量避免Select * 的方式，大量数据结果集下，会消耗大量带宽和CPU资源，查询尽量避免返回大量结果集，并且尽量为频繁使用的查询语句建立索引。</li>\n<li>通过数据冗余和表分区赖降低跨库Join的可能</li>\n</ul>\n<p>这里特别强调一下分片规则的选择问题，如果某个表的数据有明显的时间特征，比如订单、交易记录等，则他们通常比较合适用时间范围分片，因为具有时效性的数据，我们往往关注其近期的数据，查询条件中往往带有时间字段进行过滤，比较好的方案是，当前活跃的数据，采用跨度比较短的时间段进行分片，而历史性的数据，则采用比较长的跨度存储。</p>\n<p>总体上来说，分片的选择是取决于最频繁的查询SQL的条件，因为不带任何Where语句的查询SQL，会遍历所有的分片，性能相对最差，因此这种SQL越多，对系统的影响越大，所以我们要尽量避免这种SQL的产生。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>由于水平拆分牵涉的逻辑比较复杂，当前也有了不少比较成熟的解决方案。这些方案分为两大类：客户端架构和代理架构。</p>\n<h5 id=\"客户端架构\"><a href=\"#客户端架构\" class=\"headerlink\" title=\"客户端架构\"></a>客户端架构</h5><p>通过修改数据访问层，如JDBC、Data Source、MyBatis，通过配置来管理多个数据源，直连数据库，并在模块内完成数据的分片整合，一般以Jar包的方式呈现</p>\n<p>这是一个客户端架构的例子：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640.png\"/></div></div>\n\n<p>可以看到分片的实现是和应用服务器在一起的，通过修改Spring JDBC层来实现</p>\n<p>客户端架构的优点是：</p>\n<ul>\n<li>应用直连数据库，降低外围系统依赖所带来的宕机风险</li>\n<li>集成成本低，无需额外运维的组件</li>\n</ul>\n<p>缺点是：</p>\n<ul>\n<li>限于只能在数据库访问层上做文章，扩展性一般，对于比较复杂的系统可能会力不从心</li>\n<li>将分片逻辑的压力放在应用服务器上，造成额外风险</li>\n</ul>\n<h5 id=\"代理架构\"><a href=\"#代理架构\" class=\"headerlink\" title=\"代理架构\"></a>代理架构</h5><p>通过独立的中间件来统一管理所有数据源和数据分片整合，后端数据库集群对前端应用程序透明，需要独立部署和运维代理组件</p>\n<p>这是一个代理架构的例子：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"https://raw.githubusercontent.com/HubertWongCN/image_host/main/img/640-20231224194433338.png\"/></div></div>\n\n<p>代理组件为了分流和防止单点，一般以集群形式存在，同时可能需要Zookeeper之类的服务组件来管理</p>\n<p>代理架构的优点是：</p>\n<ul>\n<li>能够处理非常复杂的需求，不受数据库访问层原来实现的限制，扩展性强</li>\n<li>对于应用服务器透明且没有增加任何额外负载</li>\n</ul>\n<p>缺点是：</p>\n<ul>\n<li>需部署和运维独立的代理中间件，成本高</li>\n<li>应用需经过代理来连接数据库，网络上多了一跳，性能有损失且有额外风险</li>\n</ul>\n<h5 id=\"各方案比较\"><a href=\"#各方案比较\" class=\"headerlink\" title=\"各方案比较\"></a>各方案比较</h5><table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">出品方</th>\n<th align=\"left\">架构模型</th>\n<th align=\"left\">支持数据库</th>\n<th align=\"left\">分库</th>\n<th align=\"left\">分表</th>\n<th align=\"left\">读写分离</th>\n<th align=\"left\">外部依赖</th>\n<th align=\"left\">是否开源</th>\n<th align=\"left\">实现语言</th>\n<th align=\"left\">支持语言</th>\n<th align=\"left\">最后更新</th>\n<th align=\"left\">Github星数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">MySQL Fabric</td>\n<td align=\"left\">MySQL官方</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">python</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">4个月前</td>\n<td align=\"left\">35</td>\n</tr>\n<tr>\n<td align=\"left\">Cobar</td>\n<td align=\"left\">阿里巴巴</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">两年前</td>\n<td align=\"left\">1287</td>\n</tr>\n<tr>\n<td align=\"left\">Cobar Client</td>\n<td align=\"left\">阿里巴巴</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">三年前</td>\n<td align=\"left\">344</td>\n</tr>\n<tr>\n<td align=\"left\">TDDL</td>\n<td align=\"left\">淘宝</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">Diamond</td>\n<td align=\"left\">只开源部分</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">未知</td>\n<td align=\"left\">519</td>\n</tr>\n<tr>\n<td align=\"left\">Atlas</td>\n<td align=\"left\">奇虎360</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">C</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">10个月前</td>\n<td align=\"left\">1941</td>\n</tr>\n<tr>\n<td align=\"left\">Heisenberg</td>\n<td align=\"left\">百度熊照</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">2个月前</td>\n<td align=\"left\">197</td>\n</tr>\n<tr>\n<td align=\"left\">TribeDB</td>\n<td align=\"left\">个人</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">NodeJS</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">3个月前</td>\n<td align=\"left\">126</td>\n</tr>\n<tr>\n<td align=\"left\">ShardingJDBC</td>\n<td align=\"left\">当当</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">当天</td>\n<td align=\"left\">1144</td>\n</tr>\n<tr>\n<td align=\"left\">Shark</td>\n<td align=\"left\">个人</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">两天前</td>\n<td align=\"left\">84</td>\n</tr>\n<tr>\n<td align=\"left\">KingShard</td>\n<td align=\"left\">个人</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Golang</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">两天前</td>\n<td align=\"left\">1836</td>\n</tr>\n<tr>\n<td align=\"left\">OneProxy</td>\n<td align=\"left\">平民软件</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">否</td>\n<td align=\"left\">未知</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">未知</td>\n<td align=\"left\">未知</td>\n</tr>\n<tr>\n<td align=\"left\">MyCat</td>\n<td align=\"left\">社区</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">两天前</td>\n<td align=\"left\">1270</td>\n</tr>\n<tr>\n<td align=\"left\">Vitess</td>\n<td align=\"left\">Youtube</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Golang</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">当天</td>\n<td align=\"left\">3636</td>\n</tr>\n<tr>\n<td align=\"left\">Mixer</td>\n<td align=\"left\">个人</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Golang</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">9个月前</td>\n<td align=\"left\">472</td>\n</tr>\n<tr>\n<td align=\"left\">JetPants</td>\n<td align=\"left\">Tumblr</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Ruby</td>\n<td align=\"left\">Ruby</td>\n<td align=\"left\">10个月前</td>\n<td align=\"left\">957</td>\n</tr>\n<tr>\n<td align=\"left\">HibernateShard</td>\n<td align=\"left\">Hibernate</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">4年前</td>\n<td align=\"left\">57</td>\n</tr>\n<tr>\n<td align=\"left\">MybatisShard</td>\n<td align=\"left\">MakerSoft</td>\n<td align=\"left\">客户端架构</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">11个月前</td>\n<td align=\"left\">119</td>\n</tr>\n<tr>\n<td align=\"left\">Gizzard</td>\n<td align=\"left\">Twitter</td>\n<td align=\"left\">代理架构</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">有</td>\n<td align=\"left\">有</td>\n<td align=\"left\">无</td>\n<td align=\"left\">无</td>\n<td align=\"left\">是</td>\n<td align=\"left\">Java</td>\n<td align=\"left\">无限制</td>\n<td align=\"left\">3年前</td>\n<td align=\"left\">2087</td>\n</tr>\n</tbody></table>\n<p>如此多的方案，如何进行选择？可以按以下思路来考虑：</p>\n<ol>\n<li>确定是使用代理架构还是客户端架构。中小型规模或是比较简单的场景倾向于选择客户端架构，复杂场景或大规模系统倾向选择代理架构</li>\n<li>具体功能是否满足，比如需要跨节点ORDER BY，那么支持该功能的优先考虑</li>\n<li>不考虑一年内没有更新的产品，说明开发停滞，甚至无人维护和技术支持</li>\n<li>最好按大公司-&gt;社区-&gt;小公司-&gt;个人这样的出品方顺序来选择</li>\n<li>选择口碑较好的，比如github星数、使用者数量质量和使用者反馈</li>\n<li>开源的优先，往往项目有特殊需求可能需要改动源代码</li>\n</ol>\n<p>按照上述思路，推荐以下选择：</p>\n<ul>\n<li>客户端架构：ShardingJDBC</li>\n<li>代理架构：MyCat或者Atlas</li>\n</ul>\n<h3 id=\"兼容MySQL且可水平扩展的数据库\"><a href=\"#兼容MySQL且可水平扩展的数据库\" class=\"headerlink\" title=\"兼容MySQL且可水平扩展的数据库\"></a><strong>兼容MySQL且可水平扩展的数据库</strong></h3><p>目前也有一些开源数据库兼容MySQL协议，如：</p>\n<ul>\n<li>TiDB</li>\n<li>Cubrid</li>\n</ul>\n<p>但其工业品质和MySQL尚有差距，且需要较大的运维投入，如果想将原始的MySQL迁移到可水平扩展的新数据库中，可以考虑一些云数据库：</p>\n<ul>\n<li>阿里云PetaData</li>\n<li>阿里云OceanBase</li>\n<li>腾讯云DCDB</li>\n</ul>\n<h3 id=\"NoSQL\"><a href=\"#NoSQL\" class=\"headerlink\" title=\"NoSQL\"></a>NoSQL</h3><p>在MySQL上做Sharding是一种戴着镣铐的跳舞，事实上很多大表本身对MySQL这种RDBMS的需求并不大，并不要求ACID，可以考虑将这些表迁移到NoSQL，彻底解决水平扩展问题，例如：</p>\n<ul>\n<li>日志类、监控类、统计类数据</li>\n<li>非结构化或弱结构化数据</li>\n<li>对事务要求不强，且无太多关联操作的数据</li>\n</ul>\n","text":"当MySQL单表记录数过大时，增删改查性能都会急剧下降，可以参考以下步骤来优化：单表优化除非单表数据未来会一直不断上涨，否则不要一开始就考虑拆分，拆分会带来逻辑、部署、运维的各种复杂度，一般以整型值为主的表在千万级以下，字符串为主的表在五百万以下是没有太大问题的。而事实上很多时候","raw":null,"photos":[],"categories":[{"name":"DataBase","slug":"DataBase","count":1,"path":"api/categories/DataBase.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"},{"name":"DataBase","slug":"DataBase","count":1,"path":"api/tags/DataBase.json"}]}]}
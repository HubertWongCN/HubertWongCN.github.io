<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hubert&#39;s Blog</title>
  
  <subtitle> Hubert爱猫爱生活</subtitle>
  <link href="https://hubertwongcn.github.io/atom.xml" rel="self"/>
  
  <link href="https://hubertwongcn.github.io/"/>
  <updated>2024-01-09T13:55:00.000Z</updated>
  <id>https://hubertwongcn.github.io/</id>
  
  <author>
    <name>Hubert Wong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>17.Tomcat - Request请求处理过程：Connector</title>
    <link href="https://hubertwongcn.github.io/posts/45589.html"/>
    <id>https://hubertwongcn.github.io/posts/45589.html</id>
    <published>2024-01-09T13:55:00.000Z</published>
    <updated>2024-01-09T13:55:00.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要介绍request请求的处理过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>16.Tomcat - Container的管道机制：责任链模式</title>
    <link href="https://hubertwongcn.github.io/posts/8700.html"/>
    <id>https://hubertwongcn.github.io/posts/8700.html</id>
    <published>2024-01-09T13:51:20.000Z</published>
    <updated>2024-01-09T13:51:20.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上文中介绍了Engine的设计，其中有Pipline相关内容没有介绍，本文将向你阐述Tomcat的管道机制以及它要解决的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;内容引入&quot;&gt;&lt;a href=&quot;#内容引入&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>15.Tomcat - Container容器之Engine：StandardEngine</title>
    <link href="https://hubertwongcn.github.io/posts/49789.html"/>
    <id>https://hubertwongcn.github.io/posts/49789.html</id>
    <published>2024-01-09T13:50:01.000Z</published>
    <updated>2024-01-09T13:50:01.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上文已经知道Container的整体结构和设计，其中Engine其实就是Servlet Engine，负责处理request的顶层容器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;理解思路&quot;&gt;&lt;a href=&quot;#理解思路&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>14.Tomcat - Request请求处理: Container设计</title>
    <link href="https://hubertwongcn.github.io/posts/33222.html"/>
    <id>https://hubertwongcn.github.io/posts/33222.html</id>
    <published>2024-01-09T13:48:05.000Z</published>
    <updated>2024-01-09T13:48:05.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在理解了Server，Service和Executor后，我们可以进入Request处理环节了。我们知道客户端是可以发起多个请求的，Tomcat也是可以支持多个webapp的，有多个上下文，且一个webapp中可以有多个Servlet…等等，那么T</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>13.Tomcat - 线程池的设计与实现：StandardThreadExecutor</title>
    <link href="https://hubertwongcn.github.io/posts/8568.html"/>
    <id>https://hubertwongcn.github.io/posts/8568.html</id>
    <published>2024-01-09T13:46:09.000Z</published>
    <updated>2024-01-09T13:46:09.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上文中我们研究了下Service的设计和实现，StandardService中包含Executor的调用；这个比较好理解，Tomcat需要并发处理用户的请求，自然而言就想到线程池，那么Tomcat中线程池（Executor）具体是如何实现的？本文带</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>12.Tomcat - Service的设计和实现: StandardService</title>
    <link href="https://hubertwongcn.github.io/posts/20698.html"/>
    <id>https://hubertwongcn.github.io/posts/20698.html</id>
    <published>2024-01-09T13:45:03.000Z</published>
    <updated>2024-01-09T13:45:03.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上文讲了Server的具体实现了，本文主要讲Service的设计和实现；我们从上文其实已经知道Server中包含多个service了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;理解思路&quot;&gt;&lt;a href=&quot;#理解思路&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>11.Tomcat - Server的设计和实现: StandardServer</title>
    <link href="https://hubertwongcn.github.io/posts/43205.html"/>
    <id>https://hubertwongcn.github.io/posts/43205.html</id>
    <published>2024-01-09T13:40:24.000Z</published>
    <updated>2024-01-09T13:40:24.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;基于前面的几篇文章，我们终于可以总体上梳理Server的具体实现了，这里体现在StandardServer具体的功能实现上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;理解思路&quot;&gt;&lt;a href=&quot;#理解思路&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>10.Tomcat - 事件的监听机制：观察者模式</title>
    <link href="https://hubertwongcn.github.io/posts/22546.html"/>
    <id>https://hubertwongcn.github.io/posts/22546.html</id>
    <published>2024-01-09T13:08:21.000Z</published>
    <updated>2024-01-09T13:08:21.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文承接上文中Lifecycle中实现，引出Tomcat的监听机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>9.Tomcat - 组件拓展管理:JMX和MBean</title>
    <link href="https://hubertwongcn.github.io/posts/60663.html"/>
    <id>https://hubertwongcn.github.io/posts/60663.html</id>
    <published>2024-01-09T12:08:42.000Z</published>
    <updated>2024-01-09T12:08:42.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我们在前文中讲Lifecycle以及组件，怎么会突然讲JMX和MBean呢？本文通过承接上文Lifecycle讲Tomcat基于JMX的实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>8.Tomcat - 组件生命周期管理:LifeCycle</title>
    <link href="https://hubertwongcn.github.io/posts/3905.html"/>
    <id>https://hubertwongcn.github.io/posts/3905.html</id>
    <published>2024-01-08T20:52:44.000Z</published>
    <updated>2024-01-08T20:52:44.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt; 上文中，我们已经知道Catalina初始化了Server（它调用了 Server 类的 init 和 start 方法来启动</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>7.Tomcat - 启动过程:Catalina的加载</title>
    <link href="https://hubertwongcn.github.io/posts/42097.html"/>
    <id>https://hubertwongcn.github.io/posts/42097.html</id>
    <published>2024-01-08T20:26:32.000Z</published>
    <updated>2024-01-08T20:26:32.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;通过前两篇文章，我们知道了&lt;a href=&quot;https://hubertwongcn.github.io/posts/20412.html&quot;&gt;Tomcat的类加载机制&lt;/a&gt;和&lt;a</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>6.Tomcat - 启动过程:类加载机制详解</title>
    <link href="https://hubertwongcn.github.io/posts/20412.html"/>
    <id>https://hubertwongcn.github.io/posts/20412.html</id>
    <published>2024-01-08T19:54:56.000Z</published>
    <updated>2024-01-08T19:54:56.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上文我们讲了Tomcat在初始化时会初始化classLoader。本文将具体分析Tomcat的类加载机制，特别是区别于传统的&lt;code&gt;双亲委派模型&lt;/code&gt;的加载机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>5.Tomcat - 启动过程：初始化和启动流程</title>
    <link href="https://hubertwongcn.github.io/posts/36470.html"/>
    <id>https://hubertwongcn.github.io/posts/36470.html</id>
    <published>2024-01-08T17:52:30.000Z</published>
    <updated>2024-01-08T17:52:30.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在有了Tomcat架构设计和源码入口以后，我们便可以开始真正读源码了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;总体流程&quot;&gt;&lt;a href=&quot;#总体流程&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>4.Tomcat - 源码分析准备和分析入口</title>
    <link href="https://hubertwongcn.github.io/posts/59520.html"/>
    <id>https://hubertwongcn.github.io/posts/59520.html</id>
    <published>2024-01-08T05:57:43.000Z</published>
    <updated>2024-01-08T05:57:43.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上文我们介绍了Tomcat的架构设计，接下来我们便可以下载源码以及寻找源码入口了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;源代码下载和编译&quot;&gt;&lt;a href=&quot;#源代码下载和编译&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>3.Tomcat - 理解Tomcat架构设计</title>
    <link href="https://hubertwongcn.github.io/posts/24677.html"/>
    <id>https://hubertwongcn.github.io/posts/24677.html</id>
    <published>2024-01-08T05:56:08.000Z</published>
    <updated>2024-01-08T05:56:08.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前文我们已经介绍了一个简单的Servlet容器是如何设计出来，我们就可以开始正式学习Tomcat了，在学习开始，我们有必要站在高点去看看Tomcat的架构设计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;准备知识&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>2.Tomcat - 如何设计一个简单的web容器</title>
    <link href="https://hubertwongcn.github.io/posts/25909.html"/>
    <id>https://hubertwongcn.github.io/posts/25909.html</id>
    <published>2024-01-08T04:37:08.000Z</published>
    <updated>2024-01-08T04:37:08.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在学习Tomcat前，很多人先入为主的对它的认知是巨复杂的；所以第一步，在学习它之前，要打破这种观念，我们通过学习如何设计一个最基本的web容器来看它需要考虑什么；进而在真正学习Tomcat时，多把重点放在它的顶层设计上，而不是某一块代码上,</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>1.Tomcat源码详解知识体系详解</title>
    <link href="https://hubertwongcn.github.io/posts/54385.html"/>
    <id>https://hubertwongcn.github.io/posts/54385.html</id>
    <published>2024-01-08T04:34:16.000Z</published>
    <updated>2024-01-08T04:34:16.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本系列主要对Tomcat源码知识体系进行深入理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;知识体系&quot;&gt;&lt;a href=&quot;#知识体系&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>73.SpringBoot进阶 - 自定义starter</title>
    <link href="https://hubertwongcn.github.io/posts/29127.html"/>
    <id>https://hubertwongcn.github.io/posts/29127.html</id>
    <published>2024-01-08T02:06:51.000Z</published>
    <updated>2024-01-08T02:06:51.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;如何将自己的模块封装成starter， 并给其它springBoot项目使用呢？</summary>
        
      
    
    
    
    <category term="SpringBoot" scheme="https://hubertwongcn.github.io/categories/SpringBoot/"/>
    
    
    <category term="Spring" scheme="https://hubertwongcn.github.io/tags/Spring/"/>
    
    <category term="SpringBoot" scheme="https://hubertwongcn.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>72.SpringBoot进阶 - 实现自动装配原理</title>
    <link href="https://hubertwongcn.github.io/posts/11186.html"/>
    <id>https://hubertwongcn.github.io/posts/11186.html</id>
    <published>2024-01-08T02:06:22.000Z</published>
    <updated>2024-01-08T02:06:22.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
        
      
    
    
    
    <category term="SpringBoot" scheme="https://hubertwongcn.github.io/categories/SpringBoot/"/>
    
    
    <category term="Spring" scheme="https://hubertwongcn.github.io/tags/Spring/"/>
    
    <category term="SpringBoot" scheme="https://hubertwongcn.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>71.SpringBoot监控 - 集成springboot admin监控工具</title>
    <link href="https://hubertwongcn.github.io/posts/12333.html"/>
    <id>https://hubertwongcn.github.io/posts/12333.html</id>
    <published>2024-01-08T01:39:02.000Z</published>
    <updated>2024-01-08T01:39:02.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上文中展示了SpringBoot提供了Actuator对应用进行监控和管理， 而Spring Boot Admin能够将 Actuator 中的信息进行界面化的展示，也可以监控所有 Spring Boot 应用的健康状况，提供实时警报功能。</summary>
        
      
    
    
    
    <category term="SpringBoot" scheme="https://hubertwongcn.github.io/categories/SpringBoot/"/>
    
    
    <category term="Spring" scheme="https://hubertwongcn.github.io/tags/Spring/"/>
    
    <category term="SpringBoot" scheme="https://hubertwongcn.github.io/tags/SpringBoot/"/>
    
    <category term="springboot admin" scheme="https://hubertwongcn.github.io/tags/springboot-admin/"/>
    
  </entry>
  
</feed>

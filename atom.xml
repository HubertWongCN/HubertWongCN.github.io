<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hubert&#39;s Blog</title>
  
  <subtitle> Hubert爱猫爱生活</subtitle>
  <link href="https://hubertwongcn.github.io/atom.xml" rel="self"/>
  
  <link href="https://hubertwongcn.github.io/"/>
  <updated>2024-01-09T15:02:49.000Z</updated>
  <id>https://hubertwongcn.github.io/</id>
  
  <author>
    <name>Hubert Wong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>14.MyBatis详解 - 二级缓存实现机制</title>
    <link href="https://hubertwongcn.github.io/posts/19700.html"/>
    <id>https://hubertwongcn.github.io/posts/19700.html</id>
    <published>2024-01-09T15:02:49.000Z</published>
    <updated>2024-01-09T15:02:49.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;MyBatis的二级缓存是Application级别的缓存，它可以提高对数据库查询的效率，以提高应用的性能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;MyBatis二级缓存实现&quot;&gt;&lt;a href=&quot;#MyBatis二级缓存实现&quot;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>13.MyBatis详解 - 一级缓存实现机制</title>
    <link href="https://hubertwongcn.github.io/posts/44115.html"/>
    <id>https://hubertwongcn.github.io/posts/44115.html</id>
    <published>2024-01-09T15:00:12.000Z</published>
    <updated>2024-01-09T15:00:12.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;减少资源的浪费，MyBatis会在表示会话的SqlSession对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出，返回给用户，不需要再进行一次数据库查询了。&lt;/</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>12.MyBatis详解 - 事务管理机制</title>
    <link href="https://hubertwongcn.github.io/posts/2419.html"/>
    <id>https://hubertwongcn.github.io/posts/2419.html</id>
    <published>2024-01-09T14:57:37.000Z</published>
    <updated>2024-01-09T14:57:37.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要介绍MyBatis事务管理相关的使用和机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>11.MyBatis详解 - 数据源与连接池</title>
    <link href="https://hubertwongcn.github.io/posts/51219.html"/>
    <id>https://hubertwongcn.github.io/posts/51219.html</id>
    <published>2024-01-09T14:53:28.000Z</published>
    <updated>2024-01-09T14:53:28.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要介绍MyBatis数据源和连接池相关的内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;MyBatis数据源DataSource分类&quot;&gt;&lt;a href=&quot;#MyBatis数据源DataSource分类&quot;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>10.MyBatis详解 - 插件之分页机制</title>
    <link href="https://hubertwongcn.github.io/posts/21507.html"/>
    <id>https://hubertwongcn.github.io/posts/21507.html</id>
    <published>2024-01-09T14:52:22.000Z</published>
    <updated>2024-01-09T14:52:22.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Mybatis的分页功能很弱，它是基于内存的分页（查出所有记录再按偏移量和limit取结果），在大数据量的情况下这样的分页基本上是没有用的。本文基于插件，通过拦截StatementHandler重写sql语句，实现数据库的物理分页。&lt;/p&gt;
&lt;/b</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>9.MyBatis详解 - 插件机制</title>
    <link href="https://hubertwongcn.github.io/posts/37509.html"/>
    <id>https://hubertwongcn.github.io/posts/37509.html</id>
    <published>2024-01-09T14:51:15.000Z</published>
    <updated>2024-01-09T14:51:15.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;MyBatis提供了一种插件(plugin)的功能，虽然叫做插件，但其实这是拦截器功能。那么拦截器拦截MyBatis中的哪些内容呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>8.MyBatis详解 - 动态SQL使用与原理</title>
    <link href="https://hubertwongcn.github.io/posts/27497.html"/>
    <id>https://hubertwongcn.github.io/posts/27497.html</id>
    <published>2024-01-09T14:46:52.000Z</published>
    <updated>2024-01-09T14:46:52.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>7.MyBatis详解 - sqlSession执行流程</title>
    <link href="https://hubertwongcn.github.io/posts/55413.html"/>
    <id>https://hubertwongcn.github.io/posts/55413.html</id>
    <published>2024-01-09T14:45:05.000Z</published>
    <updated>2024-01-09T14:45:05.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前面的章节主要讲mybatis如何解析配置文件，这些都是一次性的过程。从本章开始讲解动态的过程，它们跟应用程序对mybatis的调用密切相关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>6.MyBatis详解 - Mapper映射文件配置</title>
    <link href="https://hubertwongcn.github.io/posts/56153.html"/>
    <id>https://hubertwongcn.github.io/posts/56153.html</id>
    <published>2024-01-09T14:43:53.000Z</published>
    <updated>2024-01-09T14:43:53.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在mapper文件中，以mapper作为根节点，其下面可以配置的元素节点有： select, insert, update, delete, cache, cache-ref, resultMap, sql;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>5.MyBatis详解 - 官网配置清单</title>
    <link href="https://hubertwongcn.github.io/posts/46623.html"/>
    <id>https://hubertwongcn.github.io/posts/46623.html</id>
    <published>2024-01-09T14:43:03.000Z</published>
    <updated>2024-01-09T14:43:03.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;【本文为低优先级】通过上文我们知道配置是如何加载并初始化的，那MyBatis提供了哪些配置呢？通过MyBatis官网文档我们一探究竟。PS：对于清单型的，只需要大致浏览且在使用时能快速查找即可，所以是低优先级的。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>4.MyBatis详解 - 配置解析过程</title>
    <link href="https://hubertwongcn.github.io/posts/54475.html"/>
    <id>https://hubertwongcn.github.io/posts/54475.html</id>
    <published>2024-01-09T14:39:25.000Z</published>
    <updated>2024-01-09T14:39:25.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;【本文为中优先级】通过上文我们知道MyBatis初始化过程中会解析配置，那具体是如何解析的呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;回顾上文配置解析方法&quot;&gt;&lt;a href=&quot;#回顾上文配置解析方法&quot;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>3.MyBatis详解 - 初始化基本过程</title>
    <link href="https://hubertwongcn.github.io/posts/1921.html"/>
    <id>https://hubertwongcn.github.io/posts/1921.html</id>
    <published>2024-01-09T14:37:29.000Z</published>
    <updated>2024-01-09T14:37:29.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;从上文我们知道MyBatis和数据库的交互有两种方式有Java API和Mapper接口两种，所以MyBatis的初始化必然也有两种；那么MyBatis是如何初始化的呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>2.MyBatis详解 - 总体框架设计</title>
    <link href="https://hubertwongcn.github.io/posts/53262.html"/>
    <id>https://hubertwongcn.github.io/posts/53262.html</id>
    <published>2024-01-09T14:33:54.000Z</published>
    <updated>2024-01-09T14:33:54.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;MyBatis整体架构包含哪些层呢？这些层次是如何设计的呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;MyBatis架构概览&quot;&gt;&lt;a href=&quot;#MyBatis架构概览&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>1.MyBatis知识体系详解</title>
    <link href="https://hubertwongcn.github.io/posts/9614.html"/>
    <id>https://hubertwongcn.github.io/posts/9614.html</id>
    <published>2024-01-09T14:32:19.000Z</published>
    <updated>2024-01-09T14:32:19.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;MyBatis知识体系详解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;架构图&quot;&gt;&lt;a href=&quot;#架构图&quot; class=&quot;headerlink&quot; title=&quot;架构图&quot;&gt;&lt;/a&gt;架构图&lt;/h2&gt;&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>17.Tomcat - Request请求处理过程：Connector</title>
    <link href="https://hubertwongcn.github.io/posts/45589.html"/>
    <id>https://hubertwongcn.github.io/posts/45589.html</id>
    <published>2024-01-09T13:55:00.000Z</published>
    <updated>2024-01-09T13:55:00.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要介绍request请求的处理过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>16.Tomcat - Container的管道机制：责任链模式</title>
    <link href="https://hubertwongcn.github.io/posts/8700.html"/>
    <id>https://hubertwongcn.github.io/posts/8700.html</id>
    <published>2024-01-09T13:51:20.000Z</published>
    <updated>2024-01-09T13:51:20.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上文中介绍了Engine的设计，其中有Pipline相关内容没有介绍，本文将向你阐述Tomcat的管道机制以及它要解决的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;内容引入&quot;&gt;&lt;a href=&quot;#内容引入&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>15.Tomcat - Container容器之Engine：StandardEngine</title>
    <link href="https://hubertwongcn.github.io/posts/49789.html"/>
    <id>https://hubertwongcn.github.io/posts/49789.html</id>
    <published>2024-01-09T13:50:01.000Z</published>
    <updated>2024-01-09T13:50:01.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上文已经知道Container的整体结构和设计，其中Engine其实就是Servlet Engine，负责处理request的顶层容器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;理解思路&quot;&gt;&lt;a href=&quot;#理解思路&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>14.Tomcat - Request请求处理: Container设计</title>
    <link href="https://hubertwongcn.github.io/posts/33222.html"/>
    <id>https://hubertwongcn.github.io/posts/33222.html</id>
    <published>2024-01-09T13:48:05.000Z</published>
    <updated>2024-01-09T13:48:05.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在理解了Server，Service和Executor后，我们可以进入Request处理环节了。我们知道客户端是可以发起多个请求的，Tomcat也是可以支持多个webapp的，有多个上下文，且一个webapp中可以有多个Servlet…等等，那么T</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>13.Tomcat - 线程池的设计与实现：StandardThreadExecutor</title>
    <link href="https://hubertwongcn.github.io/posts/8568.html"/>
    <id>https://hubertwongcn.github.io/posts/8568.html</id>
    <published>2024-01-09T13:46:09.000Z</published>
    <updated>2024-01-09T13:46:09.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上文中我们研究了下Service的设计和实现，StandardService中包含Executor的调用；这个比较好理解，Tomcat需要并发处理用户的请求，自然而言就想到线程池，那么Tomcat中线程池（Executor）具体是如何实现的？本文带</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>12.Tomcat - Service的设计和实现: StandardService</title>
    <link href="https://hubertwongcn.github.io/posts/20698.html"/>
    <id>https://hubertwongcn.github.io/posts/20698.html</id>
    <published>2024-01-09T13:45:03.000Z</published>
    <updated>2024-01-09T13:45:03.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上文讲了Server的具体实现了，本文主要讲Service的设计和实现；我们从上文其实已经知道Server中包含多个service了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;理解思路&quot;&gt;&lt;a href=&quot;#理解思路&quot;</summary>
        
      
    
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/categories/Web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Web容器" scheme="https://hubertwongcn.github.io/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
    <category term="Tomcat" scheme="https://hubertwongcn.github.io/tags/Tomcat/"/>
    
  </entry>
  
</feed>

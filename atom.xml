<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hubert&#39;s Blog</title>
  
  <subtitle> Hubert爱猫爱生活</subtitle>
  <link href="https://hubertwongcn.github.io/atom.xml" rel="self"/>
  
  <link href="https://hubertwongcn.github.io/"/>
  <updated>2024-01-09T15:32:34.000Z</updated>
  <id>https://hubertwongcn.github.io/</id>
  
  <author>
    <name>Hubert Wong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>9.ShardingSphere详解 - 通过影子库进行压测</title>
    <link href="https://hubertwongcn.github.io/posts/50188.html"/>
    <id>https://hubertwongcn.github.io/posts/50188.html</id>
    <published>2024-01-09T15:32:34.000Z</published>
    <updated>2024-01-09T15:32:34.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Apache ShardingSphere 关注于全链路压测场景下，数据库层面的解决方案。 将压测数据自动路由至用户指定的数据库，是 Apache ShardingSphere 影子库模块的主要设计目标; 这篇文章主要转载自&lt;a</summary>
        
      
    
    
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/categories/ShardingSphere/"/>
    
    
    <category term="中间件" scheme="https://hubertwongcn.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="分布式数据库" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/tags/ShardingSphere/"/>
    
    <category term="影子库" scheme="https://hubertwongcn.github.io/tags/%E5%BD%B1%E5%AD%90%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>8.ShardingSphere详解 - 弹性伸缩原理</title>
    <link href="https://hubertwongcn.github.io/posts/63143.html"/>
    <id>https://hubertwongcn.github.io/posts/63143.html</id>
    <published>2024-01-09T15:31:17.000Z</published>
    <updated>2024-01-09T15:31:17.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;支持自定义分片算法，减少数据伸缩及迁移时的业务影响，提供一站式的通用弹性伸缩解决方案，是 Apache ShardingSphere 弹性伸缩的主要设计目标; 这篇文章主要转载自&lt;a</summary>
        
      
    
    
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/categories/ShardingSphere/"/>
    
    
    <category term="中间件" scheme="https://hubertwongcn.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="分布式数据库" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/tags/ShardingSphere/"/>
    
  </entry>
  
  <entry>
    <title>7.ShardingSphere详解 - 事务实现原理之柔性事务SEATA</title>
    <link href="https://hubertwongcn.github.io/posts/17793.html"/>
    <id>https://hubertwongcn.github.io/posts/17793.html</id>
    <published>2024-01-09T15:30:05.000Z</published>
    <updated>2024-01-09T15:30:05.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Apache ShardingSphere 集成了 SEATA 作为柔性事务的使用方案，本文主要介绍其实现原理; 这篇文章主要转载自&lt;a</summary>
        
      
    
    
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/categories/ShardingSphere/"/>
    
    
    <category term="中间件" scheme="https://hubertwongcn.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="分布式数据库" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/tags/ShardingSphere/"/>
    
    <category term="SEATA" scheme="https://hubertwongcn.github.io/tags/SEATA/"/>
    
  </entry>
  
  <entry>
    <title>6.ShardingSphere详解 - 事务实现原理之柔性事务SAGA</title>
    <link href="https://hubertwongcn.github.io/posts/60976.html"/>
    <id>https://hubertwongcn.github.io/posts/60976.html</id>
    <published>2024-01-09T15:29:09.000Z</published>
    <updated>2024-01-09T15:29:09.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Apache ShardingSphere 在v5.0版本前还支持柔性事务SAGA，目前看5.x+版本中已经移除了向观众章节，本文主要介绍其实现原理; 这篇文章主要转载自&lt;a</summary>
        
      
    
    
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/categories/ShardingSphere/"/>
    
    
    <category term="中间件" scheme="https://hubertwongcn.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="分布式数据库" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/tags/ShardingSphere/"/>
    
    <category term="SAGA" scheme="https://hubertwongcn.github.io/tags/SAGA/"/>
    
  </entry>
  
  <entry>
    <title>5.ShardingSphere详解 - 事务实现原理之两阶段事务XA</title>
    <link href="https://hubertwongcn.github.io/posts/21645.html"/>
    <id>https://hubertwongcn.github.io/posts/21645.html</id>
    <published>2024-01-09T15:28:01.000Z</published>
    <updated>2024-01-09T15:28:01.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要介绍ShardingSphere分布式事务XA的实现原理; 这篇文章主要转载自&lt;a</summary>
        
      
    
    
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/categories/ShardingSphere/"/>
    
    
    <category term="中间件" scheme="https://hubertwongcn.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="分布式数据库" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/tags/ShardingSphere/"/>
    
    <category term="XA" scheme="https://hubertwongcn.github.io/tags/XA/"/>
    
  </entry>
  
  <entry>
    <title>4.ShardingSpherex详解 - 数据脱敏(加密)详解</title>
    <link href="https://hubertwongcn.github.io/posts/379.html"/>
    <id>https://hubertwongcn.github.io/posts/379.html</id>
    <published>2024-01-09T15:25:43.000Z</published>
    <updated>2024-01-09T15:25:43.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;根据业界对加密的需求及业务改造痛点，提供了一套完整、安全、透明化、低改造成本的数据加密整合解决方案，是 Apache ShardingSphere 数据加密模块的主要设计目标; 这篇文章主要转载自&lt;a</summary>
        
      
    
    
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/categories/ShardingSphere/"/>
    
    
    <category term="中间件" scheme="https://hubertwongcn.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="分布式数据库" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/tags/ShardingSphere/"/>
    
  </entry>
  
  <entry>
    <title>3.ShardingSphere详解 - 数据分片的原理</title>
    <link href="https://hubertwongcn.github.io/posts/26699.html"/>
    <id>https://hubertwongcn.github.io/posts/26699.html</id>
    <published>2024-01-09T15:21:16.000Z</published>
    <updated>2024-01-09T15:21:16.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要介绍ShardingSphere最重要的数据分片功能的原理，ShardingSphere的3个产品的数据分片主要流程是完全一致的，&lt;strong&gt;Standard 内核流程由 SQL 解析 =&amp;gt; SQL 路由 =&amp;gt; SQL</summary>
        
      
    
    
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/categories/ShardingSphere/"/>
    
    
    <category term="中间件" scheme="https://hubertwongcn.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="分布式数据库" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/tags/ShardingSphere/"/>
    
  </entry>
  
  <entry>
    <title>2.ShardingSphere详解 - 整体架构设计</title>
    <link href="https://hubertwongcn.github.io/posts/48286.html"/>
    <id>https://hubertwongcn.github.io/posts/48286.html</id>
    <published>2024-01-09T15:19:12.000Z</published>
    <updated>2024-01-09T15:19:12.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Apache ShardingSphere 5.x 版本开始致力于可插拔架构，项目的功能组件能够灵活的以可插拔的方式进行扩展。 目前，数据分片、读写分离、数据库高可用、数据加密、影子库压测等功能，以及对</summary>
        
      
    
    
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/categories/ShardingSphere/"/>
    
    
    <category term="中间件" scheme="https://hubertwongcn.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="分布式数据库" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/tags/ShardingSphere/"/>
    
  </entry>
  
  <entry>
    <title>1.ShardingSphere详解知识体系</title>
    <link href="https://hubertwongcn.github.io/posts/60039.html"/>
    <id>https://hubertwongcn.github.io/posts/60039.html</id>
    <published>2024-01-09T15:16:40.000Z</published>
    <updated>2024-01-09T15:16:40.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;ShardingSphere知识体系详解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;相关文章&quot;&gt;&lt;a href=&quot;#相关文章&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/categories/ShardingSphere/"/>
    
    
    <category term="中间件" scheme="https://hubertwongcn.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="分布式数据库" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="ShardingSphere" scheme="https://hubertwongcn.github.io/tags/ShardingSphere/"/>
    
  </entry>
  
  <entry>
    <title>14.MyBatis详解 - 二级缓存实现机制</title>
    <link href="https://hubertwongcn.github.io/posts/19700.html"/>
    <id>https://hubertwongcn.github.io/posts/19700.html</id>
    <published>2024-01-09T15:02:49.000Z</published>
    <updated>2024-01-09T15:02:49.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;MyBatis的二级缓存是Application级别的缓存，它可以提高对数据库查询的效率，以提高应用的性能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;MyBatis二级缓存实现&quot;&gt;&lt;a href=&quot;#MyBatis二级缓存实现&quot;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>13.MyBatis详解 - 一级缓存实现机制</title>
    <link href="https://hubertwongcn.github.io/posts/44115.html"/>
    <id>https://hubertwongcn.github.io/posts/44115.html</id>
    <published>2024-01-09T15:00:12.000Z</published>
    <updated>2024-01-09T15:00:12.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;减少资源的浪费，MyBatis会在表示会话的SqlSession对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出，返回给用户，不需要再进行一次数据库查询了。&lt;/</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>12.MyBatis详解 - 事务管理机制</title>
    <link href="https://hubertwongcn.github.io/posts/2419.html"/>
    <id>https://hubertwongcn.github.io/posts/2419.html</id>
    <published>2024-01-09T14:57:37.000Z</published>
    <updated>2024-01-09T14:57:37.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要介绍MyBatis事务管理相关的使用和机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>11.MyBatis详解 - 数据源与连接池</title>
    <link href="https://hubertwongcn.github.io/posts/51219.html"/>
    <id>https://hubertwongcn.github.io/posts/51219.html</id>
    <published>2024-01-09T14:53:28.000Z</published>
    <updated>2024-01-09T14:53:28.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要介绍MyBatis数据源和连接池相关的内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;MyBatis数据源DataSource分类&quot;&gt;&lt;a href=&quot;#MyBatis数据源DataSource分类&quot;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>10.MyBatis详解 - 插件之分页机制</title>
    <link href="https://hubertwongcn.github.io/posts/21507.html"/>
    <id>https://hubertwongcn.github.io/posts/21507.html</id>
    <published>2024-01-09T14:52:22.000Z</published>
    <updated>2024-01-09T14:52:22.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Mybatis的分页功能很弱，它是基于内存的分页（查出所有记录再按偏移量和limit取结果），在大数据量的情况下这样的分页基本上是没有用的。本文基于插件，通过拦截StatementHandler重写sql语句，实现数据库的物理分页。&lt;/p&gt;
&lt;/b</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>9.MyBatis详解 - 插件机制</title>
    <link href="https://hubertwongcn.github.io/posts/37509.html"/>
    <id>https://hubertwongcn.github.io/posts/37509.html</id>
    <published>2024-01-09T14:51:15.000Z</published>
    <updated>2024-01-09T14:51:15.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;MyBatis提供了一种插件(plugin)的功能，虽然叫做插件，但其实这是拦截器功能。那么拦截器拦截MyBatis中的哪些内容呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>8.MyBatis详解 - 动态SQL使用与原理</title>
    <link href="https://hubertwongcn.github.io/posts/27497.html"/>
    <id>https://hubertwongcn.github.io/posts/27497.html</id>
    <published>2024-01-09T14:46:52.000Z</published>
    <updated>2024-01-09T14:46:52.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>7.MyBatis详解 - sqlSession执行流程</title>
    <link href="https://hubertwongcn.github.io/posts/55413.html"/>
    <id>https://hubertwongcn.github.io/posts/55413.html</id>
    <published>2024-01-09T14:45:05.000Z</published>
    <updated>2024-01-09T14:45:05.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前面的章节主要讲mybatis如何解析配置文件，这些都是一次性的过程。从本章开始讲解动态的过程，它们跟应用程序对mybatis的调用密切相关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>6.MyBatis详解 - Mapper映射文件配置</title>
    <link href="https://hubertwongcn.github.io/posts/56153.html"/>
    <id>https://hubertwongcn.github.io/posts/56153.html</id>
    <published>2024-01-09T14:43:53.000Z</published>
    <updated>2024-01-09T14:43:53.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在mapper文件中，以mapper作为根节点，其下面可以配置的元素节点有： select, insert, update, delete, cache, cache-ref, resultMap, sql;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>5.MyBatis详解 - 官网配置清单</title>
    <link href="https://hubertwongcn.github.io/posts/46623.html"/>
    <id>https://hubertwongcn.github.io/posts/46623.html</id>
    <published>2024-01-09T14:43:03.000Z</published>
    <updated>2024-01-09T14:43:03.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;【本文为低优先级】通过上文我们知道配置是如何加载并初始化的，那MyBatis提供了哪些配置呢？通过MyBatis官网文档我们一探究竟。PS：对于清单型的，只需要大致浏览且在使用时能快速查找即可，所以是低优先级的。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>4.MyBatis详解 - 配置解析过程</title>
    <link href="https://hubertwongcn.github.io/posts/54475.html"/>
    <id>https://hubertwongcn.github.io/posts/54475.html</id>
    <published>2024-01-09T14:39:25.000Z</published>
    <updated>2024-01-09T14:39:25.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;【本文为中优先级】通过上文我们知道MyBatis初始化过程中会解析配置，那具体是如何解析的呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;回顾上文配置解析方法&quot;&gt;&lt;a href=&quot;#回顾上文配置解析方法&quot;</summary>
        
      
    
    
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/categories/MyBatis/"/>
    
    
    <category term="ORM" scheme="https://hubertwongcn.github.io/tags/ORM/"/>
    
    <category term="MyBatis" scheme="https://hubertwongcn.github.io/tags/MyBatis/"/>
    
  </entry>
  
</feed>

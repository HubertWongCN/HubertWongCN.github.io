<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hubert&#39;s Blog</title>
  
  <subtitle> Hubert爱猫爱生活</subtitle>
  <link href="https://hubertwongcn.github.io/atom.xml" rel="self"/>
  
  <link href="https://hubertwongcn.github.io/"/>
  <updated>2024-01-09T19:00:05.000Z</updated>
  <id>https://hubertwongcn.github.io/</id>
  
  <author>
    <name>Hubert Wong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>走出微服务误区：避免从单体到分布式单体</title>
    <link href="https://hubertwongcn.github.io/posts/37344.html"/>
    <id>https://hubertwongcn.github.io/posts/37344.html</id>
    <published>2024-01-09T19:00:05.000Z</published>
    <updated>2024-01-09T19:00:05.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近社区频繁出现的对微服务的各种质疑和反思的声音，甚至放弃微服务回归单体。本文从“分布式单体”问题出发，介绍通过引入非侵入式方案和引入Event/EDA</summary>
        
      
    
    
    
    <category term="微服务" scheme="https://hubertwongcn.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://hubertwongcn.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>11.分布式系统 - 分布式系统的8个谬误</title>
    <link href="https://hubertwongcn.github.io/posts/5228.html"/>
    <id>https://hubertwongcn.github.io/posts/5228.html</id>
    <published>2024-01-09T18:34:57.000Z</published>
    <updated>2024-01-09T18:34:57.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;20多年前，Peter Deutsch和James</summary>
        
      
    
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>10.分布式系统 - 分布式计算详解</title>
    <link href="https://hubertwongcn.github.io/posts/36449.html"/>
    <id>https://hubertwongcn.github.io/posts/36449.html</id>
    <published>2024-01-09T18:33:18.000Z</published>
    <updated>2024-01-09T18:33:18.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;传统的并行计算要的是：投入更多机器，数据大小不变，计算速度更快。 分布式计算要求：投入更多的机器，能处理更大的数据。&lt;/p&gt;
&lt;p&gt;作者：张建国 链接：&lt;a</summary>
        
      
    
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="分布式计算" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>9.分布式系统 - 分布式服务链路追踪</title>
    <link href="https://hubertwongcn.github.io/posts/51535.html"/>
    <id>https://hubertwongcn.github.io/posts/51535.html</id>
    <published>2024-01-09T18:27:56.000Z</published>
    <updated>2024-01-09T18:27:56.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;0-概述&quot;&gt;&lt;a href=&quot;#0-概述&quot; class=&quot;headerlink&quot; title=&quot;0. 概述&quot;&gt;&lt;/a&gt;0. 概述&lt;/h2&gt;&lt;p&gt;Dapper–Google生产环境下的分布式跟踪系统。 Dapper的英文论文：&lt;a</summary>
        
      
    
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="分布式服务链路追踪" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    
  </entry>
  
  <entry>
    <title>8.分布式系统 - 分布式会话及实现方案</title>
    <link href="https://hubertwongcn.github.io/posts/4197.html"/>
    <id>https://hubertwongcn.github.io/posts/4197.html</id>
    <published>2024-01-09T18:25:41.000Z</published>
    <updated>2024-01-09T18:25:41.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;无状态的token或者有状态的Session集中管理是目前最为常用的方案，本节主要讨论的有状态的分布式Session会话, 包括Session Stick, Session Replication, Session 数据集中存储, Cookie</summary>
        
      
    
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="分布式会话" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BC%9A%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>7.分布式系统 - 分布式任务及实现方案</title>
    <link href="https://hubertwongcn.github.io/posts/1796.html"/>
    <id>https://hubertwongcn.github.io/posts/1796.html</id>
    <published>2024-01-09T18:22:09.000Z</published>
    <updated>2024-01-09T18:22:09.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要介绍定时任务的基础和单体方式下定时任务方案的演化，以及常见的分布式任务方案和技术实现要点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;定时任务和分布式任务介绍&quot;&gt;&lt;a href=&quot;#定时任务和分布式任务介绍&quot;</summary>
        
      
    
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="分布式任务" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>6.分布式系统 - 分布式缓存及方案实现</title>
    <link href="https://hubertwongcn.github.io/posts/65038.html"/>
    <id>https://hubertwongcn.github.io/posts/65038.html</id>
    <published>2024-01-09T18:17:40.000Z</published>
    <updated>2024-01-09T18:17:40.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;缓存基础和分布式缓存&quot;&gt;&lt;a href=&quot;#缓存基础和分布式缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存基础和分布式缓存&quot;&gt;&lt;/a&gt;缓存基础和分布式缓存&lt;/h2&gt;&lt;h3 id=&quot;缓存基础和本地缓存&quot;&gt;&lt;a href=&quot;#缓存基础和本地缓存&quot;</summary>
        
      
    
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="分布式缓存" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>5.分布式系统 - 分布式事务及实现方案</title>
    <link href="https://hubertwongcn.github.io/posts/10669.html"/>
    <id>https://hubertwongcn.github.io/posts/10669.html</id>
    <published>2024-01-09T17:50:42.000Z</published>
    <updated>2024-01-09T17:50:42.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;事务&lt;/strong&gt;是一个程序执行单元，里面的所有操作要么全部执行成功，要么全部执行失败。而&lt;strong&gt;分布式事务&lt;/strong&gt;是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点</summary>
        
      
    
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="分布式事务" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>4.分布式系统 - 分布式锁及实现方案</title>
    <link href="https://hubertwongcn.github.io/posts/555.html"/>
    <id>https://hubertwongcn.github.io/posts/555.html</id>
    <published>2024-01-09T17:48:53.000Z</published>
    <updated>2024-01-09T17:48:53.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要介绍分布式锁的概念和分布式锁的设计原则，以及常见的分布式锁的实现方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是分布式锁&quot;&gt;&lt;a href=&quot;#什么是分布式锁&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式锁" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>3.分布式系统 - 全局唯一ID实现方案</title>
    <link href="https://hubertwongcn.github.io/posts/20961.html"/>
    <id>https://hubertwongcn.github.io/posts/20961.html</id>
    <published>2024-01-09T17:44:30.000Z</published>
    <updated>2024-01-09T17:44:30.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要介绍常见的分布式ID生成方式，大致分类的话可以分为两类：&lt;strong&gt;一种是类DB型的&lt;/strong&gt;，根据设置不同起始值和步长来实现趋势递增，需要考虑服务的容错性和可用性;</summary>
        
      
    
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Snowflake" scheme="https://hubertwongcn.github.io/tags/Snowflake/"/>
    
    <category term="UidGenerator" scheme="https://hubertwongcn.github.io/tags/UidGenerator/"/>
    
    <category term="Leaf" scheme="https://hubertwongcn.github.io/tags/Leaf/"/>
    
    <category term="Mist" scheme="https://hubertwongcn.github.io/tags/Mist/"/>
    
  </entry>
  
  <entry>
    <title>2.分布式系统 - 理论基础,理论及一致性算法</title>
    <link href="https://hubertwongcn.github.io/posts/8011.html"/>
    <id>https://hubertwongcn.github.io/posts/8011.html</id>
    <published>2024-01-09T17:41:32.000Z</published>
    <updated>2024-01-09T17:41:32.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一个分布式系统是一些独立的计算机集合，但是对这个系统的用户来说，系统就像一台计算机一样。本文主要介绍分布式的基础知识，以及分布式的理论基础和一致性算法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是分布式系统？&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="CAP" scheme="https://hubertwongcn.github.io/tags/CAP/"/>
    
    <category term="BASE" scheme="https://hubertwongcn.github.io/tags/BASE/"/>
    
    <category term="Paxos" scheme="https://hubertwongcn.github.io/tags/Paxos/"/>
    
    <category term="Raft" scheme="https://hubertwongcn.github.io/tags/Raft/"/>
    
    <category term="ZAB" scheme="https://hubertwongcn.github.io/tags/ZAB/"/>
    
  </entry>
  
  <entry>
    <title>1.分布式系统 - 知识体系详解</title>
    <link href="https://hubertwongcn.github.io/posts/89.html"/>
    <id>https://hubertwongcn.github.io/posts/89.html</id>
    <published>2024-01-09T17:40:02.000Z</published>
    <updated>2024-01-09T17:40:02.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://hubertwongcn.github.io/posts/8011.html&quot;&gt;分布式系统 -</summary>
        
      
    
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式系统" scheme="https://hubertwongcn.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>16.架构 - 学习资料</title>
    <link href="https://hubertwongcn.github.io/posts/45953.html"/>
    <id>https://hubertwongcn.github.io/posts/45953.html</id>
    <published>2024-01-09T17:00:04.000Z</published>
    <updated>2024-01-09T17:00:04.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这里主要总结下架构相关的学习资料。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;书籍推荐&quot;&gt;&lt;a href=&quot;#书籍推荐&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>15.架构 - 保障架构安全</title>
    <link href="https://hubertwongcn.github.io/posts/41191.html"/>
    <id>https://hubertwongcn.github.io/posts/41191.html</id>
    <published>2024-01-09T16:58:28.000Z</published>
    <updated>2024-01-09T16:58:28.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文对架构安全知识点梳理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;架构安全&quot;&gt;&lt;a href=&quot;#架构安全&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="架构安全" scheme="https://hubertwongcn.github.io/tags/%E6%9E%B6%E6%9E%84%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>14.架构之高可用：容灾备份,故障转移</title>
    <link href="https://hubertwongcn.github.io/posts/63343.html"/>
    <id>https://hubertwongcn.github.io/posts/63343.html</id>
    <published>2024-01-09T16:55:58.000Z</published>
    <updated>2024-01-09T16:55:58.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;容灾技术是系统的高可用性技术的一个组成部分，容灾系统更加强调处理外界环境对系统的影响，特别是灾难性事件对整个IT节点的影响，提供节点级别的系统恢复功能。故障转移（failover），即当活动的服务或应用意外终止时，快速启用&lt;strong&gt;冗余&lt;/s</summary>
        
      
    
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="高并发" scheme="https://hubertwongcn.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    <category term="容灾备份" scheme="https://hubertwongcn.github.io/tags/%E5%AE%B9%E7%81%BE%E5%A4%87%E4%BB%BD/"/>
    
    <category term="故障转移" scheme="https://hubertwongcn.github.io/tags/%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>13.架构之高可用：负载均衡</title>
    <link href="https://hubertwongcn.github.io/posts/14293.html"/>
    <id>https://hubertwongcn.github.io/posts/14293.html</id>
    <published>2024-01-09T16:52:50.000Z</published>
    <updated>2024-01-09T16:52:50.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;负载均衡（Load Balance），意思是将负载（工作任务，访问请求）进行平衡、分摊到多个操作单元（服务器，组件）上进行执行。是解决高性能，单点故障（高可用），扩展性（水平伸缩）的终极解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="高并发" scheme="https://hubertwongcn.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    <category term="负载均衡" scheme="https://hubertwongcn.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>12.架构之高并发：降级和熔断</title>
    <link href="https://hubertwongcn.github.io/posts/8066.html"/>
    <id>https://hubertwongcn.github.io/posts/8066.html</id>
    <published>2024-01-09T16:49:08.000Z</published>
    <updated>2024-01-09T16:49:08.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在高并发环境下，&lt;strong&gt;服务之间的依赖关系导致调用失败，解决的方式通常是: 限流-&amp;gt;熔断-&amp;gt;隔离-&amp;gt;降级, 其目的是防止雪崩效应&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="高并发" scheme="https://hubertwongcn.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    <category term="降级" scheme="https://hubertwongcn.github.io/tags/%E9%99%8D%E7%BA%A7/"/>
    
    <category term="熔断" scheme="https://hubertwongcn.github.io/tags/%E7%86%94%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>11.架构之高并发：限流</title>
    <link href="https://hubertwongcn.github.io/posts/15400.html"/>
    <id>https://hubertwongcn.github.io/posts/15400.html</id>
    <published>2024-01-09T16:46:37.000Z</published>
    <updated>2024-01-09T16:46:37.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;每个系统都有服务的上线，所以当流量超过服务极限能力时，系统可能会出现卡死、崩溃的情况，所以就有了降级和限流。限流其实就是：当高并发或者瞬时高并发时，为了保证系统的稳定性、可用性，系统以牺牲部分请求为代价或者延迟处理请求为代价，保证系统整体服务可用。</summary>
        
      
    
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="高并发" scheme="https://hubertwongcn.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    <category term="限流" scheme="https://hubertwongcn.github.io/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>10.架构之高并发：缓存</title>
    <link href="https://hubertwongcn.github.io/posts/23199.html"/>
    <id>https://hubertwongcn.github.io/posts/23199.html</id>
    <published>2024-01-09T16:42:22.000Z</published>
    <updated>2024-01-09T16:42:22.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;高并发实现的三板斧：缓存，限流和降级&lt;/strong&gt;。缓存在高并发系统中有者极其广阔的应用，需要重点掌握，本文重点介绍下缓存及其实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;缓存简介&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="高并发" scheme="https://hubertwongcn.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    <category term="缓存" scheme="https://hubertwongcn.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>9.架构 - 理解架构的核心要素</title>
    <link href="https://hubertwongcn.github.io/posts/46707.html"/>
    <id>https://hubertwongcn.github.io/posts/46707.html</id>
    <published>2024-01-09T16:41:40.000Z</published>
    <updated>2024-01-09T16:41:40.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一般来说软件架构需要关注&lt;strong&gt;性能、可用性、伸缩性、扩展性和安全性这5个架构要素&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;架构的核心要素&quot;&gt;&lt;a href=&quot;#架构的核心要素&quot;</summary>
        
      
    
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://hubertwongcn.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hubert&#39;s Blog</title>
  
  <subtitle> Hubert爱猫爱生活</subtitle>
  <link href="https://hubertwongcn.github.io/atom.xml" rel="self"/>
  
  <link href="https://hubertwongcn.github.io/"/>
  <updated>2024-01-10T23:11:11.000Z</updated>
  <id>https://hubertwongcn.github.io/</id>
  
  <author>
    <name>Hubert Wong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4.信息安全管理认证 - ISO27001</title>
    <link href="https://hubertwongcn.github.io/posts/49635.html"/>
    <id>https://hubertwongcn.github.io/posts/49635.html</id>
    <published>2024-01-10T23:11:11.000Z</published>
    <updated>2024-01-10T23:11:11.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;信息安全管理认证 - ISO27001详解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ISO27001起源和发展&quot;&gt;&lt;a href=&quot;#ISO27001起源和发展&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="系统认证" scheme="https://hubertwongcn.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%AE%A4%E8%AF%81/"/>
    
    
    <category term="系统认证" scheme="https://hubertwongcn.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AE%A4%E8%AF%81/"/>
    
    <category term="ISO27001" scheme="https://hubertwongcn.github.io/tags/ISO27001/"/>
    
  </entry>
  
  <entry>
    <title>3.信息安全等级保护认证</title>
    <link href="https://hubertwongcn.github.io/posts/29974.html"/>
    <id>https://hubertwongcn.github.io/posts/29974.html</id>
    <published>2024-01-10T23:09:42.000Z</published>
    <updated>2024-01-10T23:09:42.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;随着国内对网络安全的逐步重视，以及《网络安全法》的出台，</summary>
        
      
    
    
    
    <category term="系统认证" scheme="https://hubertwongcn.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%AE%A4%E8%AF%81/"/>
    
    
    <category term="系统认证" scheme="https://hubertwongcn.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AE%A4%E8%AF%81/"/>
    
    <category term="信息安全等级保护认证" scheme="https://hubertwongcn.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AD%89%E7%BA%A7%E4%BF%9D%E6%8A%A4%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>2.能力成熟度模型集成认证 - CMMI</title>
    <link href="https://hubertwongcn.github.io/posts/31831.html"/>
    <id>https://hubertwongcn.github.io/posts/31831.html</id>
    <published>2024-01-10T23:08:38.000Z</published>
    <updated>2024-01-10T23:08:38.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;能力成熟度模型集成认证 - CMMI。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是软件过程&quot;&gt;&lt;a href=&quot;#什么是软件过程&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="系统认证" scheme="https://hubertwongcn.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%AE%A4%E8%AF%81/"/>
    
    
    <category term="系统认证" scheme="https://hubertwongcn.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AE%A4%E8%AF%81/"/>
    
    <category term="CMMI" scheme="https://hubertwongcn.github.io/tags/CMMI/"/>
    
  </entry>
  
  <entry>
    <title>1.常见企业开发和系统认证</title>
    <link href="https://hubertwongcn.github.io/posts/36321.html"/>
    <id>https://hubertwongcn.github.io/posts/36321.html</id>
    <published>2024-01-10T23:07:05.000Z</published>
    <updated>2024-01-10T23:07:05.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;常见企业开发和系统认证详解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;相关文章&quot;&gt;&lt;a href=&quot;#相关文章&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="系统认证" scheme="https://hubertwongcn.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%AE%A4%E8%AF%81/"/>
    
    
    <category term="系统认证" scheme="https://hubertwongcn.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>25.行为型 - 备忘录(Memento)</title>
    <link href="https://hubertwongcn.github.io/posts/54370.html"/>
    <id>https://hubertwongcn.github.io/posts/54370.html</id>
    <published>2024-01-10T20:55:51.000Z</published>
    <updated>2024-01-10T20:55:51.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;备忘录模式(Memento pattern): 当你需要让对象返回之前的状态时(例如, 你的用户请求”撤销”), 你使用备忘录模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot;</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="备忘录" scheme="https://hubertwongcn.github.io/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>24.行为型 - 中介者(Mediator)</title>
    <link href="https://hubertwongcn.github.io/posts/38446.html"/>
    <id>https://hubertwongcn.github.io/posts/38446.html</id>
    <published>2024-01-10T20:54:22.000Z</published>
    <updated>2024-01-10T20:54:22.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;中介者模式(Mediator pattern) : 使用中介者模式来集中相关对象之间复杂的沟通和控制方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="中介者" scheme="https://hubertwongcn.github.io/tags/%E4%B8%AD%E4%BB%8B%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>23.行为型 - 迭代器(Iterator)</title>
    <link href="https://hubertwongcn.github.io/posts/45942.html"/>
    <id>https://hubertwongcn.github.io/posts/45942.html</id>
    <published>2024-01-10T20:53:11.000Z</published>
    <updated>2024-01-10T20:53:11.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;迭代器模式(iterator pattern): 提供一种方法顺序访问一个聚合对象中的各个元素, 而又不暴露其内部的表示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot;</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="解释器" scheme="https://hubertwongcn.github.io/tags/%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>22.行为型 - 解释器(Interpreter)</title>
    <link href="https://hubertwongcn.github.io/posts/50769.html"/>
    <id>https://hubertwongcn.github.io/posts/50769.html</id>
    <published>2024-01-10T20:52:17.000Z</published>
    <updated>2024-01-10T20:52:17.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;解释器模式(Interpreter pattern): 使用解释器模式为语言创建解释器，通常由语言的语法和语法分析来定义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot;</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="解释器" scheme="https://hubertwongcn.github.io/tags/%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>21.行为型 - 状态(State)</title>
    <link href="https://hubertwongcn.github.io/posts/18028.html"/>
    <id>https://hubertwongcn.github.io/posts/18028.html</id>
    <published>2024-01-10T20:50:24.000Z</published>
    <updated>2024-01-10T20:50:24.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;状态模式(State pattern): 允许对象在内部状态改变时改变它的行为, 对象看起来好象改了它的类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="状态" scheme="https://hubertwongcn.github.io/tags/%E7%8A%B6%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>20.行为型 - 访问者(Visitor)</title>
    <link href="https://hubertwongcn.github.io/posts/12642.html"/>
    <id>https://hubertwongcn.github.io/posts/12642.html</id>
    <published>2024-01-10T20:49:23.000Z</published>
    <updated>2024-01-10T20:49:23.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;访问者模式(visitor pattern): 当你想要为一个对象的组合增加新的能力, 且封装并不重要时, 就使用访问者模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot;</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="访问者" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BF%E9%97%AE%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>19.行为型 - 观察者(Observer)</title>
    <link href="https://hubertwongcn.github.io/posts/38048.html"/>
    <id>https://hubertwongcn.github.io/posts/38048.html</id>
    <published>2024-01-10T20:47:32.000Z</published>
    <updated>2024-01-10T20:47:32.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;观察者模式(observer pattern): 在对象之间定义一对多的依赖, 这样一来, 当一个对象改变状态, 依赖它的对象都会收到通知, 并自动更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot;</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="观察者" scheme="https://hubertwongcn.github.io/tags/%E8%A7%82%E5%AF%9F%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>18.行为型 - 命令模式(Command)</title>
    <link href="https://hubertwongcn.github.io/posts/55781.html"/>
    <id>https://hubertwongcn.github.io/posts/55781.html</id>
    <published>2024-01-10T20:46:20.000Z</published>
    <updated>2024-01-10T20:46:20.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;命令模式(Command pattern): 将”请求”封闭成对象, 以便使用不同的请求,队列或者日志来参数化其他对象. 命令模式也支持可撤销的操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot;</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="命令模式" scheme="https://hubertwongcn.github.io/tags/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>17.行为型 - 模板方法(Template Method)</title>
    <link href="https://hubertwongcn.github.io/posts/1972.html"/>
    <id>https://hubertwongcn.github.io/posts/1972.html</id>
    <published>2024-01-10T20:44:42.000Z</published>
    <updated>2024-01-10T20:44:42.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;模板方法模式(Template pattern): 在一个方法中定义一个算法的骨架, 而将一些步骤延迟到子类中. 模板方法使得子类可以在不改变算法结构的情况下, 重新定义算法中的某些步骤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="模板方法" scheme="https://hubertwongcn.github.io/tags/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>16.行为型 - 策略(Strategy)</title>
    <link href="https://hubertwongcn.github.io/posts/21226.html"/>
    <id>https://hubertwongcn.github.io/posts/21226.html</id>
    <published>2024-01-10T20:43:40.000Z</published>
    <updated>2024-01-10T20:43:40.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;策略模式(strategy pattern): 定义了算法族, 分别封闭起来, 让它们之间可以互相替换, 此模式让算法的变化独立于使用算法的客户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot;</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="策略" scheme="https://hubertwongcn.github.io/tags/%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>15.行为型 - 责任链(Chain Of Responsibility)</title>
    <link href="https://hubertwongcn.github.io/posts/42492.html"/>
    <id>https://hubertwongcn.github.io/posts/42492.html</id>
    <published>2024-01-10T20:42:40.000Z</published>
    <updated>2024-01-10T20:42:40.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;责任链模式(Chain of responsibility pattern): 通过责任链模式, 你可以为某个请求创建一个对象链. 每个对象依序检查此请求并对其进行处理或者将它传给链中的下一个对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="责任链" scheme="https://hubertwongcn.github.io/tags/%E8%B4%A3%E4%BB%BB%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>14.结构型 - 代理(Proxy)</title>
    <link href="https://hubertwongcn.github.io/posts/29848.html"/>
    <id>https://hubertwongcn.github.io/posts/29848.html</id>
    <published>2024-01-10T20:41:33.000Z</published>
    <updated>2024-01-10T20:41:33.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;代理模式(Proxy pattern): 为另一个对象提供一个替身或占位符以控制对这个对象的访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="代理" scheme="https://hubertwongcn.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>13.结构型 - 享元(Flyweight)</title>
    <link href="https://hubertwongcn.github.io/posts/40207.html"/>
    <id>https://hubertwongcn.github.io/posts/40207.html</id>
    <published>2024-01-10T20:40:30.000Z</published>
    <updated>2024-01-10T20:40:30.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;享元模式(Flyweight Pattern): 利用共享的方式来支持大量细粒度的对象，这些对象一部分内部状态是相同的。 它让某个类的一个实例能用来提供许多”虚拟实例”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="享元" scheme="https://hubertwongcn.github.io/tags/%E4%BA%AB%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>11.结构型 - 组合(Composite)</title>
    <link href="https://hubertwongcn.github.io/posts/42819.html"/>
    <id>https://hubertwongcn.github.io/posts/42819.html</id>
    <published>2024-01-10T20:38:16.000Z</published>
    <updated>2024-01-10T20:38:16.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;组合模式(composite pattern): 允许你将对象组合成树形结构来表现”整体/部分”层次结构. 组合能让客户以一致的方式处理个别对象以及对象组合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot;</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="组合" scheme="https://hubertwongcn.github.io/tags/%E7%BB%84%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>10.结构型 - 桥接(Bridge)</title>
    <link href="https://hubertwongcn.github.io/posts/24211.html"/>
    <id>https://hubertwongcn.github.io/posts/24211.html</id>
    <published>2024-01-10T20:37:11.000Z</published>
    <updated>2024-01-10T20:37:11.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;桥接模式(Bridge pattern): 使用桥接模式通过将实现和抽象放在两个不同的类层次中而使它们可以独立改变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="桥接" scheme="https://hubertwongcn.github.io/tags/%E6%A1%A5%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>9.结构型 - 适配器(Adapter)</title>
    <link href="https://hubertwongcn.github.io/posts/16664.html"/>
    <id>https://hubertwongcn.github.io/posts/16664.html</id>
    <published>2024-01-10T20:35:58.000Z</published>
    <updated>2024-01-10T20:35:58.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;适配器模式(Adapter pattern): 将一个类的接口, 转换成客户期望的另一个接口。 适配器让原本接口不兼容的类可以合作无间。 对象适配器使用组合, 类适配器使用多重继承。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hubertwongcn.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="适配器" scheme="https://hubertwongcn.github.io/tags/%E9%80%82%E9%85%8D%E5%99%A8/"/>
    
  </entry>
  
</feed>
